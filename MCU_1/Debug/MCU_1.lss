
MCU_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000784  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  00800060  00000784  00000818  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  008000c4  008000c4  0000087c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  000008e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001463  00000000  00000000  00000a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a68  00000000  00000000  00001ea3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c91  00000000  00000000  0000290b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000258  00000000  00000000  0000359c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000618  00000000  00000000  000037f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007a3  00000000  00000000  00003e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000045af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e8       	ldi	r30, 0x84	; 132
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3c       	cpi	r26, 0xC4	; 196
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 ec       	ldi	r26, 0xC4	; 196
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 3d       	cpi	r26, 0xD9	; 217
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <main>
  8a:	0c 94 c0 03 	jmp	0x780	; 0x780 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_init>:
uint8_t option;
extern uint8_t password_checker;

void app_init()
{
	Keypad_init();
  92:	0e 94 a9 00 	call	0x152	; 0x152 <Keypad_init>
	LCD_8_bit_init();
  96:	0e 94 ae 01 	call	0x35c	; 0x35c <LCD_8_bit_init>
	UART_init();
  9a:	0e 94 98 03 	call	0x730	; 0x730 <UART_init>
	DDRB = 0xFF;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	87 bb       	out	0x17, r24	; 23
  a2:	08 95       	ret

000000a4 <app_start>:

void app_start()
{
	while(1)
	{
		if(password_checker == Password_was_entered)
  a4:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <password_checker>
  a8:	81 30       	cpi	r24, 0x01	; 1
  aa:	f1 f4       	brne	.+60     	; 0xe8 <app_start+0x44>
		{
			keypadInput = Keypad_pressed();
  ac:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <Keypad_pressed>
  b0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <keypadInput>
			set_pin(PORTB,PIN_0);
  b4:	88 b3       	in	r24, 0x18	; 24
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	88 bb       	out	0x18, r24	; 24
			clr_pin(PORTB,PIN_1);
  ba:	88 b3       	in	r24, 0x18	; 24
  bc:	8d 7f       	andi	r24, 0xFD	; 253
  be:	88 bb       	out	0x18, r24	; 24
			if(keypadInput == First_option)
  c0:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <keypadInput>
  c4:	81 33       	cpi	r24, 0x31	; 49
  c6:	39 f4       	brne	.+14     	; 0xd6 <app_start+0x32>
			{
				LCD_8_bit_clear_all();
  c8:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_8_bit_clear_all>
				LCD_8_bit_enter_pass();
  cc:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_8_bit_enter_pass>
				password_checker = Password_was_not_entered;
  d0:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <password_checker>
  d4:	e7 cf       	rjmp	.-50     	; 0xa4 <app_start>
			}
			else if(keypadInput == Second_option)
  d6:	82 33       	cpi	r24, 0x32	; 50
  d8:	29 f7       	brne	.-54     	; 0xa4 <app_start>
			{
				LCD_8_bit_clear_all();
  da:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_8_bit_clear_all>
				LCD_8_bit_enter_pass();
  de:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_8_bit_enter_pass>
				password_checker = Password_was_not_entered;
  e2:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <password_checker>
  e6:	de cf       	rjmp	.-68     	; 0xa4 <app_start>
			}
		}
		else if(password_checker == Password_was_not_entered)
  e8:	81 11       	cpse	r24, r1
  ea:	dc cf       	rjmp	.-72     	; 0xa4 <app_start>
		{
			keypadInput = Keypad_pressed();
  ec:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <Keypad_pressed>
  f0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <keypadInput>
			set_pin(PORTB,PIN_1);
  f4:	88 b3       	in	r24, 0x18	; 24
  f6:	82 60       	ori	r24, 0x02	; 2
  f8:	88 bb       	out	0x18, r24	; 24
			clr_pin(PORTB,PIN_0);
  fa:	88 b3       	in	r24, 0x18	; 24
  fc:	8e 7f       	andi	r24, 0xFE	; 254
  fe:	88 bb       	out	0x18, r24	; 24
			if(keypadInput == '=')
 100:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <keypadInput>
 104:	8d 33       	cpi	r24, 0x3D	; 61
 106:	61 f4       	brne	.+24     	; 0x120 <app_start+0x7c>
			{
				UART_transmitString(password);
 108:	85 ec       	ldi	r24, 0xC5	; 197
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 ab 03 	call	0x756	; 0x756 <UART_transmitString>
				password_checker = Password_was_entered;
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <password_checker>
				LCD_8_bit_clear_all();
 116:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_8_bit_clear_all>
				LCD_8_bit_display_options();
 11a:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_8_bit_display_options>
 11e:	c2 cf       	rjmp	.-124    	; 0xa4 <app_start>
			}
			
			else if(keypadInput == 'c')
 120:	83 36       	cpi	r24, 0x63	; 99
 122:	29 f4       	brne	.+10     	; 0x12e <app_start+0x8a>
			{
				LCD_8_bit_clear_all();
 124:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_8_bit_clear_all>
				LCD_8_bit_enter_pass();
 128:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_8_bit_enter_pass>
 12c:	bb cf       	rjmp	.-138    	; 0xa4 <app_start>
			}
			
			else
			{
				if(keypadInput != NOT_pressed)
 12e:	88 23       	and	r24, r24
 130:	09 f4       	brne	.+2      	; 0x134 <app_start+0x90>
 132:	b8 cf       	rjmp	.-144    	; 0xa4 <app_start>
				{
					LCD_8_bit_sendChar(keypadInput);
 134:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_8_bit_sendChar>
					password[cnt] = keypadInput;
 138:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <__data_end>
 13c:	e8 2f       	mov	r30, r24
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	eb 53       	subi	r30, 0x3B	; 59
 142:	ff 4f       	sbci	r31, 0xFF	; 255
 144:	90 91 d8 00 	lds	r25, 0x00D8	; 0x8000d8 <keypadInput>
 148:	90 83       	st	Z, r25
					++cnt;
 14a:	8f 5f       	subi	r24, 0xFF	; 255
 14c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__data_end>
 150:	a9 cf       	rjmp	.-174    	; 0xa4 <app_start>

00000152 <Keypad_init>:
						 {'c','0','=','+'}};

void Keypad_init()
{
	// Initialization of rows
	DIO_init(port_A,PIN_4,OUT);
 152:	41 e0       	ldi	r20, 0x01	; 1
 154:	64 e0       	ldi	r22, 0x04	; 4
 156:	81 e4       	ldi	r24, 0x41	; 65
 158:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <DIO_init>
	DIO_init(port_A,PIN_5,OUT);
 15c:	41 e0       	ldi	r20, 0x01	; 1
 15e:	65 e0       	ldi	r22, 0x05	; 5
 160:	81 e4       	ldi	r24, 0x41	; 65
 162:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <DIO_init>
	DIO_init(port_A,PIN_6,OUT);
 166:	41 e0       	ldi	r20, 0x01	; 1
 168:	66 e0       	ldi	r22, 0x06	; 6
 16a:	81 e4       	ldi	r24, 0x41	; 65
 16c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <DIO_init>
	DIO_init(port_A,PIN_7,OUT);
 170:	41 e0       	ldi	r20, 0x01	; 1
 172:	67 e0       	ldi	r22, 0x07	; 7
 174:	81 e4       	ldi	r24, 0x41	; 65
 176:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <DIO_init>
	
	// Initialization of columns
	DIO_init(port_A,PIN_0,IN);
 17a:	40 e0       	ldi	r20, 0x00	; 0
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	81 e4       	ldi	r24, 0x41	; 65
 180:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <DIO_init>
	DIO_init(port_A,PIN_1,IN);
 184:	40 e0       	ldi	r20, 0x00	; 0
 186:	61 e0       	ldi	r22, 0x01	; 1
 188:	81 e4       	ldi	r24, 0x41	; 65
 18a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <DIO_init>
	DIO_init(port_A,PIN_2,IN);
 18e:	40 e0       	ldi	r20, 0x00	; 0
 190:	62 e0       	ldi	r22, 0x02	; 2
 192:	81 e4       	ldi	r24, 0x41	; 65
 194:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <DIO_init>
	DIO_init(port_A,PIN_3,IN);
 198:	40 e0       	ldi	r20, 0x00	; 0
 19a:	63 e0       	ldi	r22, 0x03	; 3
 19c:	81 e4       	ldi	r24, 0x41	; 65
 19e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <DIO_init>
	
	// give logic one to all the keypad pins
	PORTA = 0xFF;
 1a2:	8f ef       	ldi	r24, 0xFF	; 255
 1a4:	8b bb       	out	0x1b, r24	; 27
 1a6:	08 95       	ret

000001a8 <Keypad_pressed>:
}

uint8_t Keypad_pressed()
{
 1a8:	cf 92       	push	r12
 1aa:	df 92       	push	r13
 1ac:	ef 92       	push	r14
 1ae:	ff 92       	push	r15
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	1f 92       	push	r1
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
	uint8_t key = NOT_pressed; // variable for the pressed key
	uint8_t flag = 0; // Flag to indicate that a key was pressed or not
	uint8_t value; // variable for storing the value of the pin
	for(int rows_cnt = 0; rows_cnt < 4; ++rows_cnt)
 1be:	e1 2c       	mov	r14, r1
 1c0:	f1 2c       	mov	r15, r1
}

uint8_t Keypad_pressed()
{
	uint8_t key = NOT_pressed; // variable for the pressed key
	uint8_t flag = 0; // Flag to indicate that a key was pressed or not
 1c2:	d1 2c       	mov	r13, r1
	PORTA = 0xFF;
}

uint8_t Keypad_pressed()
{
	uint8_t key = NOT_pressed; // variable for the pressed key
 1c4:	c1 2c       	mov	r12, r1
	uint8_t flag = 0; // Flag to indicate that a key was pressed or not
	uint8_t value; // variable for storing the value of the pin
	for(int rows_cnt = 0; rows_cnt < 4; ++rows_cnt)
 1c6:	4c c0       	rjmp	.+152    	; 0x260 <Keypad_pressed+0xb8>
	{
		DIO_write(port_A,rows[rows_cnt],LOW); // give each row pin a low value
 1c8:	40 e0       	ldi	r20, 0x00	; 0
 1ca:	f7 01       	movw	r30, r14
 1cc:	ec 58       	subi	r30, 0x8C	; 140
 1ce:	ff 4f       	sbci	r31, 0xFF	; 255
 1d0:	60 81       	ld	r22, Z
 1d2:	81 e4       	ldi	r24, 0x41	; 65
 1d4:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_write>
		for (int columns_cnt = 0; columns_cnt < 4; ++columns_cnt)
 1d8:	00 e0       	ldi	r16, 0x00	; 0
 1da:	10 e0       	ldi	r17, 0x00	; 0
 1dc:	31 c0       	rjmp	.+98     	; 0x240 <Keypad_pressed+0x98>
		{
			DIO_read(port_A,columns[columns_cnt],&value);
 1de:	ae 01       	movw	r20, r28
 1e0:	4f 5f       	subi	r20, 0xFF	; 255
 1e2:	5f 4f       	sbci	r21, 0xFF	; 255
 1e4:	f8 01       	movw	r30, r16
 1e6:	e0 59       	subi	r30, 0x90	; 144
 1e8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ea:	60 81       	ld	r22, Z
 1ec:	81 e4       	ldi	r24, 0x41	; 65
 1ee:	0e 94 e6 02 	call	0x5cc	; 0x5cc <DIO_read>
			if(value == LOW)
 1f2:	89 81       	ldd	r24, Y+1	; 0x01
 1f4:	81 11       	cpse	r24, r1
 1f6:	22 c0       	rjmp	.+68     	; 0x23c <Keypad_pressed+0x94>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f8:	87 e8       	ldi	r24, 0x87	; 135
 1fa:	93 e1       	ldi	r25, 0x13	; 19
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <Keypad_pressed+0x54>
 200:	00 c0       	rjmp	.+0      	; 0x202 <Keypad_pressed+0x5a>
 202:	00 00       	nop
 204:	0a c0       	rjmp	.+20     	; 0x21a <Keypad_pressed+0x72>
			{
				_delay_ms(20); // for solving the bouncing problem
				
				// Busy wait for long press
				while(value == LOW)
					DIO_read(port_A,columns[columns_cnt],&value);
 206:	ae 01       	movw	r20, r28
 208:	4f 5f       	subi	r20, 0xFF	; 255
 20a:	5f 4f       	sbci	r21, 0xFF	; 255
 20c:	f8 01       	movw	r30, r16
 20e:	e0 59       	subi	r30, 0x90	; 144
 210:	ff 4f       	sbci	r31, 0xFF	; 255
 212:	60 81       	ld	r22, Z
 214:	81 e4       	ldi	r24, 0x41	; 65
 216:	0e 94 e6 02 	call	0x5cc	; 0x5cc <DIO_read>
			if(value == LOW)
			{
				_delay_ms(20); // for solving the bouncing problem
				
				// Busy wait for long press
				while(value == LOW)
 21a:	89 81       	ldd	r24, Y+1	; 0x01
 21c:	88 23       	and	r24, r24
 21e:	99 f3       	breq	.-26     	; 0x206 <Keypad_pressed+0x5e>
					DIO_read(port_A,columns[columns_cnt],&value);
				
				key = keypad[rows_cnt][columns_cnt]; // get the pressed key
 220:	c7 01       	movw	r24, r14
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	80 5a       	subi	r24, 0xA0	; 160
 22c:	9f 4f       	sbci	r25, 0xFF	; 255
 22e:	fc 01       	movw	r30, r24
 230:	e0 0f       	add	r30, r16
 232:	f1 1f       	adc	r31, r17
 234:	c0 80       	ld	r12, Z
				flag = 1; // a key was pressed
 236:	dd 24       	eor	r13, r13
 238:	d3 94       	inc	r13
				break;
 23a:	05 c0       	rjmp	.+10     	; 0x246 <Keypad_pressed+0x9e>
	uint8_t flag = 0; // Flag to indicate that a key was pressed or not
	uint8_t value; // variable for storing the value of the pin
	for(int rows_cnt = 0; rows_cnt < 4; ++rows_cnt)
	{
		DIO_write(port_A,rows[rows_cnt],LOW); // give each row pin a low value
		for (int columns_cnt = 0; columns_cnt < 4; ++columns_cnt)
 23c:	0f 5f       	subi	r16, 0xFF	; 255
 23e:	1f 4f       	sbci	r17, 0xFF	; 255
 240:	04 30       	cpi	r16, 0x04	; 4
 242:	11 05       	cpc	r17, r1
 244:	64 f2       	brlt	.-104    	; 0x1de <Keypad_pressed+0x36>
				key = keypad[rows_cnt][columns_cnt]; // get the pressed key
				flag = 1; // a key was pressed
				break;
			}
		}
		DIO_write(port_A,rows[rows_cnt],HIGH); // return the pin to high value again
 246:	41 e0       	ldi	r20, 0x01	; 1
 248:	f7 01       	movw	r30, r14
 24a:	ec 58       	subi	r30, 0x8C	; 140
 24c:	ff 4f       	sbci	r31, 0xFF	; 255
 24e:	60 81       	ld	r22, Z
 250:	81 e4       	ldi	r24, 0x41	; 65
 252:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_write>
		if(flag)
 256:	d1 10       	cpse	r13, r1
 258:	08 c0       	rjmp	.+16     	; 0x26a <Keypad_pressed+0xc2>
uint8_t Keypad_pressed()
{
	uint8_t key = NOT_pressed; // variable for the pressed key
	uint8_t flag = 0; // Flag to indicate that a key was pressed or not
	uint8_t value; // variable for storing the value of the pin
	for(int rows_cnt = 0; rows_cnt < 4; ++rows_cnt)
 25a:	9f ef       	ldi	r25, 0xFF	; 255
 25c:	e9 1a       	sub	r14, r25
 25e:	f9 0a       	sbc	r15, r25
 260:	84 e0       	ldi	r24, 0x04	; 4
 262:	e8 16       	cp	r14, r24
 264:	f1 04       	cpc	r15, r1
 266:	0c f4       	brge	.+2      	; 0x26a <Keypad_pressed+0xc2>
 268:	af cf       	rjmp	.-162    	; 0x1c8 <Keypad_pressed+0x20>
		if(flag)
			break;
	}
	// return the pressed key
	return key;
 26a:	8c 2d       	mov	r24, r12
 26c:	0f 90       	pop	r0
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	1f 91       	pop	r17
 274:	0f 91       	pop	r16
 276:	ff 90       	pop	r15
 278:	ef 90       	pop	r14
 27a:	df 90       	pop	r13
 27c:	cf 90       	pop	r12
 27e:	08 95       	ret

00000280 <LCD_8_bit_sendCommand>:
	LCD_8_bit_sendCommand(0x10); // Move cursor to left
}

void LCD_8_bit_cursor_right()
{
	LCD_8_bit_sendCommand(0x14); // Move cursor to right
 280:	85 bb       	out	0x15, r24	; 21
 282:	82 b3       	in	r24, 0x12	; 18
 284:	8f 7d       	andi	r24, 0xDF	; 223
 286:	82 bb       	out	0x12, r24	; 18
 288:	82 b3       	in	r24, 0x12	; 18
 28a:	8f 7b       	andi	r24, 0xBF	; 191
 28c:	82 bb       	out	0x12, r24	; 18
 28e:	82 b3       	in	r24, 0x12	; 18
 290:	80 68       	ori	r24, 0x80	; 128
 292:	82 bb       	out	0x12, r24	; 18
 294:	89 ef       	ldi	r24, 0xF9	; 249
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <LCD_8_bit_sendCommand+0x18>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <LCD_8_bit_sendCommand+0x1e>
 29e:	00 00       	nop
 2a0:	82 b3       	in	r24, 0x12	; 18
 2a2:	8f 77       	andi	r24, 0x7F	; 127
 2a4:	82 bb       	out	0x12, r24	; 18
 2a6:	8d ee       	ldi	r24, 0xED	; 237
 2a8:	92 e0       	ldi	r25, 0x02	; 2
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <LCD_8_bit_sendCommand+0x2a>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <LCD_8_bit_sendCommand+0x30>
 2b0:	00 00       	nop
 2b2:	08 95       	ret

000002b4 <LCD_8_bit_sendChar>:
 2b4:	85 bb       	out	0x15, r24	; 21
 2b6:	82 b3       	in	r24, 0x12	; 18
 2b8:	80 62       	ori	r24, 0x20	; 32
 2ba:	82 bb       	out	0x12, r24	; 18
 2bc:	82 b3       	in	r24, 0x12	; 18
 2be:	8f 7b       	andi	r24, 0xBF	; 191
 2c0:	82 bb       	out	0x12, r24	; 18
 2c2:	82 b3       	in	r24, 0x12	; 18
 2c4:	80 68       	ori	r24, 0x80	; 128
 2c6:	82 bb       	out	0x12, r24	; 18
 2c8:	89 ef       	ldi	r24, 0xF9	; 249
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <LCD_8_bit_sendChar+0x18>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <LCD_8_bit_sendChar+0x1e>
 2d2:	00 00       	nop
 2d4:	82 b3       	in	r24, 0x12	; 18
 2d6:	8f 77       	andi	r24, 0x7F	; 127
 2d8:	82 bb       	out	0x12, r24	; 18
 2da:	8d ee       	ldi	r24, 0xED	; 237
 2dc:	92 e0       	ldi	r25, 0x02	; 2
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <LCD_8_bit_sendChar+0x2a>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <LCD_8_bit_sendChar+0x30>
 2e4:	00 00       	nop
 2e6:	08 95       	ret

000002e8 <LCD_8_bit_clear_all>:
}

void LCD_8_bit_clear_all()
{
	LCD_8_bit_sendCommand(0x01); // Clear Display
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	0e 94 40 01 	call	0x280	; 0x280 <LCD_8_bit_sendCommand>
	LCD_8_bit_sendCommand(0x80); // Cursor at home position
 2ee:	80 e8       	ldi	r24, 0x80	; 128
 2f0:	0e 94 40 01 	call	0x280	; 0x280 <LCD_8_bit_sendCommand>
 2f4:	08 95       	ret

000002f6 <LCD_8_bit_sendString>:
	LCD_8_bit_sendString(enter_pass_str); // Displaying option words
	LCD_8_bit_sendCommand(0xC0); // Cursor at 2nd line
}

void LCD_8_bit_sendString(uint8_t *string_data)
{
 2f6:	0f 93       	push	r16
 2f8:	1f 93       	push	r17
 2fa:	cf 93       	push	r28
 2fc:	8c 01       	movw	r16, r24
	for (uint8_t cnt = 0; *(string_data+cnt) != '\0'; ++cnt) // Loop for sending each char in the string to the LCD
 2fe:	c0 e0       	ldi	r28, 0x00	; 0
 300:	03 c0       	rjmp	.+6      	; 0x308 <LCD_8_bit_sendString+0x12>
		LCD_8_bit_sendChar(*(string_data+cnt)); // call the writing function on LCD
 302:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_8_bit_sendChar>
	LCD_8_bit_sendCommand(0xC0); // Cursor at 2nd line
}

void LCD_8_bit_sendString(uint8_t *string_data)
{
	for (uint8_t cnt = 0; *(string_data+cnt) != '\0'; ++cnt) // Loop for sending each char in the string to the LCD
 306:	cf 5f       	subi	r28, 0xFF	; 255
 308:	f8 01       	movw	r30, r16
 30a:	ec 0f       	add	r30, r28
 30c:	f1 1d       	adc	r31, r1
 30e:	80 81       	ld	r24, Z
 310:	81 11       	cpse	r24, r1
 312:	f7 cf       	rjmp	.-18     	; 0x302 <LCD_8_bit_sendString+0xc>
		LCD_8_bit_sendChar(*(string_data+cnt)); // call the writing function on LCD
 314:	cf 91       	pop	r28
 316:	1f 91       	pop	r17
 318:	0f 91       	pop	r16
 31a:	08 95       	ret

0000031c <LCD_8_bit_welcoming>:
	LCD_8_bit_sendCommand(0x80); // Cursor at home position
}

void LCD_8_bit_welcoming()
{
	LCD_8_bit_sendString(welcomeStr); // Displaying welcome words
 31c:	89 eb       	ldi	r24, 0xB9	; 185
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_8_bit_sendString>
	LCD_8_bit_sendCommand(0xC0); // Cursor at 2nd line
 324:	80 ec       	ldi	r24, 0xC0	; 192
 326:	0e 94 40 01 	call	0x280	; 0x280 <LCD_8_bit_sendCommand>
	LCD_8_bit_sendString(welcomeStr_2); // Displaying second welcome words
 32a:	88 ea       	ldi	r24, 0xA8	; 168
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_8_bit_sendString>
 332:	08 95       	ret

00000334 <LCD_8_bit_display_options>:
}

void LCD_8_bit_display_options()
{
	LCD_8_bit_sendString(option_1); // Displaying option words
 334:	89 e8       	ldi	r24, 0x89	; 137
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_8_bit_sendString>
	LCD_8_bit_sendCommand(0xC0); // Cursor at 2nd line
 33c:	80 ec       	ldi	r24, 0xC0	; 192
 33e:	0e 94 40 01 	call	0x280	; 0x280 <LCD_8_bit_sendCommand>
	LCD_8_bit_sendString(option_2); // Displaying second option words
 342:	88 e7       	ldi	r24, 0x78	; 120
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_8_bit_sendString>
 34a:	08 95       	ret

0000034c <LCD_8_bit_enter_pass>:
}

void LCD_8_bit_enter_pass()
{
	LCD_8_bit_sendString(enter_pass_str); // Displaying option words
 34c:	89 e9       	ldi	r24, 0x99	; 153
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_8_bit_sendString>
	LCD_8_bit_sendCommand(0xC0); // Cursor at 2nd line
 354:	80 ec       	ldi	r24, 0xC0	; 192
 356:	0e 94 40 01 	call	0x280	; 0x280 <LCD_8_bit_sendCommand>
 35a:	08 95       	ret

0000035c <LCD_8_bit_init>:
uint8_t option_2[] = "2.Alter Password";
uint8_t password_checker = Password_was_not_entered;

void LCD_8_bit_init()
{
	LCD_commandData_dir = 0xFF; // Make LCD command port direction as o/p
 35c:	8f ef       	ldi	r24, 0xFF	; 255
 35e:	84 bb       	out	0x14, r24	; 20
	// Make LCD control pins in the MCU direction as o/p
	DIO_init(Control_PINS_port,RS_PIN,OUT);
 360:	41 e0       	ldi	r20, 0x01	; 1
 362:	65 e0       	ldi	r22, 0x05	; 5
 364:	84 e4       	ldi	r24, 0x44	; 68
 366:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <DIO_init>
	DIO_init(Control_PINS_port,RW_PIN,OUT);
 36a:	41 e0       	ldi	r20, 0x01	; 1
 36c:	66 e0       	ldi	r22, 0x06	; 6
 36e:	84 e4       	ldi	r24, 0x44	; 68
 370:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <DIO_init>
	DIO_init(Control_PINS_port,E_PIN,OUT);
 374:	41 e0       	ldi	r20, 0x01	; 1
 376:	67 e0       	ldi	r22, 0x07	; 7
 378:	84 e4       	ldi	r24, 0x44	; 68
 37a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <DIO_init>
 37e:	87 e8       	ldi	r24, 0x87	; 135
 380:	93 e1       	ldi	r25, 0x13	; 19
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <LCD_8_bit_init+0x26>
 386:	00 c0       	rjmp	.+0      	; 0x388 <LCD_8_bit_init+0x2c>
 388:	00 00       	nop
	// LCD power on delay
	_delay_ms(20);
	LCD_8_bit_sendCommand(0x38); // Initialization of 16x2 LCD in 8 bit mode
 38a:	88 e3       	ldi	r24, 0x38	; 56
 38c:	0e 94 40 01 	call	0x280	; 0x280 <LCD_8_bit_sendCommand>
	LCD_8_bit_sendCommand(0x0E); // Display on and cursor blinking
 390:	8e e0       	ldi	r24, 0x0E	; 14
 392:	0e 94 40 01 	call	0x280	; 0x280 <LCD_8_bit_sendCommand>
	LCD_8_bit_sendCommand(0x06); // Auto increment for the cursor
 396:	86 e0       	ldi	r24, 0x06	; 6
 398:	0e 94 40 01 	call	0x280	; 0x280 <LCD_8_bit_sendCommand>
	LCD_8_bit_sendCommand(0x01); // Clear Display
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	0e 94 40 01 	call	0x280	; 0x280 <LCD_8_bit_sendCommand>
	LCD_8_bit_sendCommand(0x80); // Cursor at home position
 3a2:	80 e8       	ldi	r24, 0x80	; 128
 3a4:	0e 94 40 01 	call	0x280	; 0x280 <LCD_8_bit_sendCommand>
	LCD_8_bit_welcoming(); // Displaying welcoming words
 3a8:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_8_bit_welcoming>
 3ac:	9f e3       	ldi	r25, 0x3F	; 63
 3ae:	2d e0       	ldi	r18, 0x0D	; 13
 3b0:	83 e0       	ldi	r24, 0x03	; 3
 3b2:	91 50       	subi	r25, 0x01	; 1
 3b4:	20 40       	sbci	r18, 0x00	; 0
 3b6:	80 40       	sbci	r24, 0x00	; 0
 3b8:	e1 f7       	brne	.-8      	; 0x3b2 <LCD_8_bit_init+0x56>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <LCD_8_bit_init+0x60>
 3bc:	00 00       	nop
	_delay_ms(1000); // wait for 1 sec
	LCD_8_bit_clear_all(); // Clear every char on LCD
 3be:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_8_bit_clear_all>
	
	if(password_checker == Password_was_not_entered)
 3c2:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <password_checker>
 3c6:	81 11       	cpse	r24, r1
 3c8:	03 c0       	rjmp	.+6      	; 0x3d0 <LCD_8_bit_init+0x74>
		LCD_8_bit_enter_pass();
 3ca:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_8_bit_enter_pass>
 3ce:	08 95       	ret
	else
		LCD_8_bit_display_options();
 3d0:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_8_bit_display_options>
 3d4:	08 95       	ret

000003d6 <main>:

#include "APP/APP_1.h"

int main(void)
{
	app_init();
 3d6:	0e 94 49 00 	call	0x92	; 0x92 <app_init>
	app_start();
 3da:	0e 94 52 00 	call	0xa4	; 0xa4 <app_start>
}
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	08 95       	ret

000003e4 <DIO_init>:
		case port_C:
			tgl_pin(PORTC,pinnum); // toggle pin number (pinnum) in port C
		break;
		
		case port_D:
			tgl_pin(PORTD,pinnum); // toggle pin number (pinnum) in port D
 3e4:	82 34       	cpi	r24, 0x42	; 66
 3e6:	31 f1       	breq	.+76     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 3e8:	18 f4       	brcc	.+6      	; 0x3f0 <DIO_init+0xc>
 3ea:	81 34       	cpi	r24, 0x41	; 65
 3ec:	39 f0       	breq	.+14     	; 0x3fc <DIO_init+0x18>
 3ee:	08 95       	ret
 3f0:	83 34       	cpi	r24, 0x43	; 67
 3f2:	e1 f1       	breq	.+120    	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 3f4:	84 34       	cpi	r24, 0x44	; 68
 3f6:	09 f4       	brne	.+2      	; 0x3fa <DIO_init+0x16>
 3f8:	54 c0       	rjmp	.+168    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 3fa:	08 95       	ret
 3fc:	41 11       	cpse	r20, r1
 3fe:	0c c0       	rjmp	.+24     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 400:	2a b3       	in	r18, 0x1a	; 26
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	02 c0       	rjmp	.+4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	6a 95       	dec	r22
 40e:	e2 f7       	brpl	.-8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 410:	80 95       	com	r24
 412:	82 23       	and	r24, r18
 414:	8a bb       	out	0x1a, r24	; 26
 416:	08 95       	ret
 418:	41 30       	cpi	r20, 0x01	; 1
 41a:	09 f0       	breq	.+2      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 41c:	5c c0       	rjmp	.+184    	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 41e:	2a b3       	in	r18, 0x1a	; 26
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	02 c0       	rjmp	.+4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	6a 95       	dec	r22
 42c:	e2 f7       	brpl	.-8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 42e:	82 2b       	or	r24, r18
 430:	8a bb       	out	0x1a, r24	; 26
 432:	08 95       	ret
 434:	41 11       	cpse	r20, r1
 436:	0c c0       	rjmp	.+24     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 438:	27 b3       	in	r18, 0x17	; 23
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	02 c0       	rjmp	.+4      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	6a 95       	dec	r22
 446:	e2 f7       	brpl	.-8      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 448:	80 95       	com	r24
 44a:	82 23       	and	r24, r18
 44c:	87 bb       	out	0x17, r24	; 23
 44e:	08 95       	ret
 450:	41 30       	cpi	r20, 0x01	; 1
 452:	09 f0       	breq	.+2      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 454:	40 c0       	rjmp	.+128    	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 456:	27 b3       	in	r18, 0x17	; 23
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	02 c0       	rjmp	.+4      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 45e:	88 0f       	add	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	6a 95       	dec	r22
 464:	e2 f7       	brpl	.-8      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 466:	82 2b       	or	r24, r18
 468:	87 bb       	out	0x17, r24	; 23
 46a:	08 95       	ret
 46c:	41 11       	cpse	r20, r1
 46e:	0c c0       	rjmp	.+24     	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 470:	24 b3       	in	r18, 0x14	; 20
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	02 c0       	rjmp	.+4      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 478:	88 0f       	add	r24, r24
 47a:	99 1f       	adc	r25, r25
 47c:	6a 95       	dec	r22
 47e:	e2 f7       	brpl	.-8      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 480:	80 95       	com	r24
 482:	82 23       	and	r24, r18
 484:	84 bb       	out	0x14, r24	; 20
 486:	08 95       	ret
 488:	41 30       	cpi	r20, 0x01	; 1
 48a:	29 f5       	brne	.+74     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 48c:	24 b3       	in	r18, 0x14	; 20
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	02 c0       	rjmp	.+4      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 494:	88 0f       	add	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	6a 95       	dec	r22
 49a:	e2 f7       	brpl	.-8      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 49c:	82 2b       	or	r24, r18
 49e:	84 bb       	out	0x14, r24	; 20
 4a0:	08 95       	ret
 4a2:	41 11       	cpse	r20, r1
 4a4:	0c c0       	rjmp	.+24     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4a6:	21 b3       	in	r18, 0x11	; 17
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	6a 95       	dec	r22
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 4b6:	80 95       	com	r24
 4b8:	82 23       	and	r24, r18
 4ba:	81 bb       	out	0x11, r24	; 17
 4bc:	08 95       	ret
 4be:	41 30       	cpi	r20, 0x01	; 1
 4c0:	51 f4       	brne	.+20     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 4c2:	21 b3       	in	r18, 0x11	; 17
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	6a 95       	dec	r22
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 4d2:	82 2b       	or	r24, r18
 4d4:	81 bb       	out	0x11, r24	; 17
 4d6:	08 95       	ret

000004d8 <DIO_write>:
 4d8:	82 34       	cpi	r24, 0x42	; 66
 4da:	31 f1       	breq	.+76     	; 0x528 <DIO_write+0x50>
 4dc:	18 f4       	brcc	.+6      	; 0x4e4 <DIO_write+0xc>
 4de:	81 34       	cpi	r24, 0x41	; 65
 4e0:	39 f0       	breq	.+14     	; 0x4f0 <DIO_write+0x18>
 4e2:	08 95       	ret
 4e4:	83 34       	cpi	r24, 0x43	; 67
 4e6:	e1 f1       	breq	.+120    	; 0x560 <DIO_write+0x88>
 4e8:	84 34       	cpi	r24, 0x44	; 68
 4ea:	09 f4       	brne	.+2      	; 0x4ee <DIO_write+0x16>
 4ec:	54 c0       	rjmp	.+168    	; 0x596 <DIO_write+0xbe>
 4ee:	08 95       	ret
 4f0:	41 11       	cpse	r20, r1
 4f2:	0c c0       	rjmp	.+24     	; 0x50c <DIO_write+0x34>
 4f4:	2b b3       	in	r18, 0x1b	; 27
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <DIO_write+0x28>
 4fc:	88 0f       	add	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	6a 95       	dec	r22
 502:	e2 f7       	brpl	.-8      	; 0x4fc <DIO_write+0x24>
 504:	80 95       	com	r24
 506:	82 23       	and	r24, r18
 508:	8b bb       	out	0x1b, r24	; 27
 50a:	08 95       	ret
 50c:	41 30       	cpi	r20, 0x01	; 1
 50e:	09 f0       	breq	.+2      	; 0x512 <DIO_write+0x3a>
 510:	5c c0       	rjmp	.+184    	; 0x5ca <DIO_write+0xf2>
 512:	2b b3       	in	r18, 0x1b	; 27
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	02 c0       	rjmp	.+4      	; 0x51e <DIO_write+0x46>
 51a:	88 0f       	add	r24, r24
 51c:	99 1f       	adc	r25, r25
 51e:	6a 95       	dec	r22
 520:	e2 f7       	brpl	.-8      	; 0x51a <DIO_write+0x42>
 522:	82 2b       	or	r24, r18
 524:	8b bb       	out	0x1b, r24	; 27
 526:	08 95       	ret
 528:	41 11       	cpse	r20, r1
 52a:	0c c0       	rjmp	.+24     	; 0x544 <DIO_write+0x6c>
 52c:	28 b3       	in	r18, 0x18	; 24
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	02 c0       	rjmp	.+4      	; 0x538 <DIO_write+0x60>
 534:	88 0f       	add	r24, r24
 536:	99 1f       	adc	r25, r25
 538:	6a 95       	dec	r22
 53a:	e2 f7       	brpl	.-8      	; 0x534 <DIO_write+0x5c>
 53c:	80 95       	com	r24
 53e:	82 23       	and	r24, r18
 540:	88 bb       	out	0x18, r24	; 24
 542:	08 95       	ret
 544:	41 30       	cpi	r20, 0x01	; 1
 546:	09 f0       	breq	.+2      	; 0x54a <DIO_write+0x72>
 548:	40 c0       	rjmp	.+128    	; 0x5ca <DIO_write+0xf2>
 54a:	28 b3       	in	r18, 0x18	; 24
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	02 c0       	rjmp	.+4      	; 0x556 <DIO_write+0x7e>
 552:	88 0f       	add	r24, r24
 554:	99 1f       	adc	r25, r25
 556:	6a 95       	dec	r22
 558:	e2 f7       	brpl	.-8      	; 0x552 <DIO_write+0x7a>
 55a:	82 2b       	or	r24, r18
 55c:	88 bb       	out	0x18, r24	; 24
 55e:	08 95       	ret
 560:	41 11       	cpse	r20, r1
 562:	0c c0       	rjmp	.+24     	; 0x57c <DIO_write+0xa4>
 564:	25 b3       	in	r18, 0x15	; 21
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	02 c0       	rjmp	.+4      	; 0x570 <DIO_write+0x98>
 56c:	88 0f       	add	r24, r24
 56e:	99 1f       	adc	r25, r25
 570:	6a 95       	dec	r22
 572:	e2 f7       	brpl	.-8      	; 0x56c <DIO_write+0x94>
 574:	80 95       	com	r24
 576:	82 23       	and	r24, r18
 578:	85 bb       	out	0x15, r24	; 21
 57a:	08 95       	ret
 57c:	41 30       	cpi	r20, 0x01	; 1
 57e:	29 f5       	brne	.+74     	; 0x5ca <DIO_write+0xf2>
 580:	25 b3       	in	r18, 0x15	; 21
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	02 c0       	rjmp	.+4      	; 0x58c <DIO_write+0xb4>
 588:	88 0f       	add	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	6a 95       	dec	r22
 58e:	e2 f7       	brpl	.-8      	; 0x588 <DIO_write+0xb0>
 590:	82 2b       	or	r24, r18
 592:	85 bb       	out	0x15, r24	; 21
 594:	08 95       	ret
 596:	41 11       	cpse	r20, r1
 598:	0c c0       	rjmp	.+24     	; 0x5b2 <DIO_write+0xda>
 59a:	22 b3       	in	r18, 0x12	; 18
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <DIO_write+0xce>
 5a2:	88 0f       	add	r24, r24
 5a4:	99 1f       	adc	r25, r25
 5a6:	6a 95       	dec	r22
 5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <DIO_write+0xca>
 5aa:	80 95       	com	r24
 5ac:	82 23       	and	r24, r18
 5ae:	82 bb       	out	0x12, r24	; 18
 5b0:	08 95       	ret
 5b2:	41 30       	cpi	r20, 0x01	; 1
 5b4:	51 f4       	brne	.+20     	; 0x5ca <DIO_write+0xf2>
 5b6:	22 b3       	in	r18, 0x12	; 18
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <DIO_write+0xea>
 5be:	88 0f       	add	r24, r24
 5c0:	99 1f       	adc	r25, r25
 5c2:	6a 95       	dec	r22
 5c4:	e2 f7       	brpl	.-8      	; 0x5be <DIO_write+0xe6>
 5c6:	82 2b       	or	r24, r18
 5c8:	82 bb       	out	0x12, r24	; 18
 5ca:	08 95       	ret

000005cc <DIO_read>:
	}
}

void DIO_read(uint8_t portnum,uint8_t pinnum, uint8_t *value)
{
	switch(portnum)
 5cc:	82 34       	cpi	r24, 0x42	; 66
 5ce:	01 f1       	breq	.+64     	; 0x610 <DIO_read+0x44>
 5d0:	18 f4       	brcc	.+6      	; 0x5d8 <DIO_read+0xc>
 5d2:	81 34       	cpi	r24, 0x41	; 65
 5d4:	39 f0       	breq	.+14     	; 0x5e4 <DIO_read+0x18>
 5d6:	08 95       	ret
 5d8:	83 34       	cpi	r24, 0x43	; 67
 5da:	81 f1       	breq	.+96     	; 0x63c <DIO_read+0x70>
 5dc:	84 34       	cpi	r24, 0x44	; 68
 5de:	09 f4       	brne	.+2      	; 0x5e2 <DIO_read+0x16>
 5e0:	43 c0       	rjmp	.+134    	; 0x668 <DIO_read+0x9c>
 5e2:	08 95       	ret
	{
		case port_A:
			*value = get_pin(PINA,pinnum); // save the value of pin number (pinnum) in port A in a variable
 5e4:	79 b3       	in	r23, 0x19	; 25
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	9c 01       	movw	r18, r24
 5ec:	06 2e       	mov	r0, r22
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <DIO_read+0x28>
 5f0:	22 0f       	add	r18, r18
 5f2:	33 1f       	adc	r19, r19
 5f4:	0a 94       	dec	r0
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <DIO_read+0x24>
 5f8:	87 2f       	mov	r24, r23
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	82 23       	and	r24, r18
 5fe:	93 23       	and	r25, r19
 600:	02 c0       	rjmp	.+4      	; 0x606 <DIO_read+0x3a>
 602:	95 95       	asr	r25
 604:	87 95       	ror	r24
 606:	6a 95       	dec	r22
 608:	e2 f7       	brpl	.-8      	; 0x602 <DIO_read+0x36>
 60a:	fa 01       	movw	r30, r20
 60c:	80 83       	st	Z, r24
		break;
 60e:	08 95       	ret
		
		case port_B:
			*value = get_pin(PINB,pinnum); // save the value of pin number (pinnum) in port B in a variable
 610:	76 b3       	in	r23, 0x16	; 22
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	9c 01       	movw	r18, r24
 618:	06 2e       	mov	r0, r22
 61a:	02 c0       	rjmp	.+4      	; 0x620 <DIO_read+0x54>
 61c:	22 0f       	add	r18, r18
 61e:	33 1f       	adc	r19, r19
 620:	0a 94       	dec	r0
 622:	e2 f7       	brpl	.-8      	; 0x61c <DIO_read+0x50>
 624:	87 2f       	mov	r24, r23
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	82 23       	and	r24, r18
 62a:	93 23       	and	r25, r19
 62c:	02 c0       	rjmp	.+4      	; 0x632 <DIO_read+0x66>
 62e:	95 95       	asr	r25
 630:	87 95       	ror	r24
 632:	6a 95       	dec	r22
 634:	e2 f7       	brpl	.-8      	; 0x62e <DIO_read+0x62>
 636:	fa 01       	movw	r30, r20
 638:	80 83       	st	Z, r24
		break;
 63a:	08 95       	ret
		
		case port_C:
			*value = get_pin(PINC,pinnum); // save the value of pin number (pinnum) in port C in a variable
 63c:	73 b3       	in	r23, 0x13	; 19
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	9c 01       	movw	r18, r24
 644:	06 2e       	mov	r0, r22
 646:	02 c0       	rjmp	.+4      	; 0x64c <DIO_read+0x80>
 648:	22 0f       	add	r18, r18
 64a:	33 1f       	adc	r19, r19
 64c:	0a 94       	dec	r0
 64e:	e2 f7       	brpl	.-8      	; 0x648 <DIO_read+0x7c>
 650:	87 2f       	mov	r24, r23
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	82 23       	and	r24, r18
 656:	93 23       	and	r25, r19
 658:	02 c0       	rjmp	.+4      	; 0x65e <DIO_read+0x92>
 65a:	95 95       	asr	r25
 65c:	87 95       	ror	r24
 65e:	6a 95       	dec	r22
 660:	e2 f7       	brpl	.-8      	; 0x65a <DIO_read+0x8e>
 662:	fa 01       	movw	r30, r20
 664:	80 83       	st	Z, r24
		break;
 666:	08 95       	ret
		
		case port_D:
			*value = get_pin(PIND,pinnum); // save the value of pin number (pinnum) in port D in a variable
 668:	70 b3       	in	r23, 0x10	; 16
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	9c 01       	movw	r18, r24
 670:	06 2e       	mov	r0, r22
 672:	02 c0       	rjmp	.+4      	; 0x678 <DIO_read+0xac>
 674:	22 0f       	add	r18, r18
 676:	33 1f       	adc	r19, r19
 678:	0a 94       	dec	r0
 67a:	e2 f7       	brpl	.-8      	; 0x674 <DIO_read+0xa8>
 67c:	87 2f       	mov	r24, r23
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	82 23       	and	r24, r18
 682:	93 23       	and	r25, r19
 684:	02 c0       	rjmp	.+4      	; 0x68a <DIO_read+0xbe>
 686:	95 95       	asr	r25
 688:	87 95       	ror	r24
 68a:	6a 95       	dec	r22
 68c:	e2 f7       	brpl	.-8      	; 0x686 <DIO_read+0xba>
 68e:	fa 01       	movw	r30, r20
 690:	80 83       	st	Z, r24
 692:	08 95       	ret

00000694 <UART_set_BAUD>:
	// Set frame format
	UART_set_frame(Data_bits,Stop_bits);
}
void UART_set_BAUD(uint16_t baud)
{
	UBRRH = (uint8_t)(baud >> 8); // Higher nibble 
 694:	90 bd       	out	0x20, r25	; 32
	UBRRL = (uint8_t)baud; // lower nibble 
 696:	89 b9       	out	0x09, r24	; 9
 698:	08 95       	ret

0000069a <UART_set_frame>:
}
void UART_set_frame(uint8_t bitnum, uint8_t stopbits)
{
	switch(bitnum)
 69a:	87 30       	cpi	r24, 0x07	; 7
 69c:	f9 f0       	breq	.+62     	; 0x6dc <UART_set_frame+0x42>
 69e:	28 f4       	brcc	.+10     	; 0x6aa <UART_set_frame+0x10>
 6a0:	85 30       	cpi	r24, 0x05	; 5
 6a2:	41 f0       	breq	.+16     	; 0x6b4 <UART_set_frame+0x1a>
 6a4:	86 30       	cpi	r24, 0x06	; 6
 6a6:	81 f0       	breq	.+32     	; 0x6c8 <UART_set_frame+0x2e>
 6a8:	36 c0       	rjmp	.+108    	; 0x716 <UART_set_frame+0x7c>
 6aa:	88 30       	cpi	r24, 0x08	; 8
 6ac:	09 f1       	breq	.+66     	; 0x6f0 <UART_set_frame+0x56>
 6ae:	89 30       	cpi	r24, 0x09	; 9
 6b0:	49 f1       	breq	.+82     	; 0x704 <UART_set_frame+0x6a>
 6b2:	31 c0       	rjmp	.+98     	; 0x716 <UART_set_frame+0x7c>
	{
		// 5 bits character size
		case 5:
			clr_pin(UCSRC,UCSZ0);
 6b4:	80 b5       	in	r24, 0x20	; 32
 6b6:	8d 7f       	andi	r24, 0xFD	; 253
 6b8:	80 bd       	out	0x20, r24	; 32
			clr_pin(UCSRC,UCSZ1);
 6ba:	80 b5       	in	r24, 0x20	; 32
 6bc:	8b 7f       	andi	r24, 0xFB	; 251
 6be:	80 bd       	out	0x20, r24	; 32
			clr_pin(UCSRB,UCSZ2);
 6c0:	8a b1       	in	r24, 0x0a	; 10
 6c2:	8b 7f       	andi	r24, 0xFB	; 251
 6c4:	8a b9       	out	0x0a, r24	; 10
		break;
 6c6:	27 c0       	rjmp	.+78     	; 0x716 <UART_set_frame+0x7c>
		// 6 bits character size
		case 6:
			set_pin(UCSRC,UCSZ0);
 6c8:	80 b5       	in	r24, 0x20	; 32
 6ca:	82 60       	ori	r24, 0x02	; 2
 6cc:	80 bd       	out	0x20, r24	; 32
			clr_pin(UCSRC,UCSZ1);
 6ce:	80 b5       	in	r24, 0x20	; 32
 6d0:	8b 7f       	andi	r24, 0xFB	; 251
 6d2:	80 bd       	out	0x20, r24	; 32
			clr_pin(UCSRB,UCSZ2);
 6d4:	8a b1       	in	r24, 0x0a	; 10
 6d6:	8b 7f       	andi	r24, 0xFB	; 251
 6d8:	8a b9       	out	0x0a, r24	; 10
		break;
 6da:	1d c0       	rjmp	.+58     	; 0x716 <UART_set_frame+0x7c>
		// 7 bits character size
		case 7:
			clr_pin(UCSRC,UCSZ0);
 6dc:	80 b5       	in	r24, 0x20	; 32
 6de:	8d 7f       	andi	r24, 0xFD	; 253
 6e0:	80 bd       	out	0x20, r24	; 32
			set_pin(UCSRC,UCSZ1);
 6e2:	80 b5       	in	r24, 0x20	; 32
 6e4:	84 60       	ori	r24, 0x04	; 4
 6e6:	80 bd       	out	0x20, r24	; 32
			clr_pin(UCSRB,UCSZ2);
 6e8:	8a b1       	in	r24, 0x0a	; 10
 6ea:	8b 7f       	andi	r24, 0xFB	; 251
 6ec:	8a b9       	out	0x0a, r24	; 10
		break;
 6ee:	13 c0       	rjmp	.+38     	; 0x716 <UART_set_frame+0x7c>
		// 8 bits character size
		case 8:
			set_pin(UCSRC,UCSZ0);
 6f0:	80 b5       	in	r24, 0x20	; 32
 6f2:	82 60       	ori	r24, 0x02	; 2
 6f4:	80 bd       	out	0x20, r24	; 32
			set_pin(UCSRC,UCSZ1);
 6f6:	80 b5       	in	r24, 0x20	; 32
 6f8:	84 60       	ori	r24, 0x04	; 4
 6fa:	80 bd       	out	0x20, r24	; 32
			clr_pin(UCSRB,UCSZ2);
 6fc:	8a b1       	in	r24, 0x0a	; 10
 6fe:	8b 7f       	andi	r24, 0xFB	; 251
 700:	8a b9       	out	0x0a, r24	; 10
		break;
 702:	09 c0       	rjmp	.+18     	; 0x716 <UART_set_frame+0x7c>
		// 9 bits character size
		case 9:
			set_pin(UCSRC,UCSZ0);
 704:	80 b5       	in	r24, 0x20	; 32
 706:	82 60       	ori	r24, 0x02	; 2
 708:	80 bd       	out	0x20, r24	; 32
			set_pin(UCSRC,UCSZ1);
 70a:	80 b5       	in	r24, 0x20	; 32
 70c:	84 60       	ori	r24, 0x04	; 4
 70e:	80 bd       	out	0x20, r24	; 32
			set_pin(UCSRB,UCSZ2);
 710:	8a b1       	in	r24, 0x0a	; 10
 712:	84 60       	ori	r24, 0x04	; 4
 714:	8a b9       	out	0x0a, r24	; 10
		default:
		{
			// error handling
		}
	}
	switch(stopbits)
 716:	61 30       	cpi	r22, 0x01	; 1
 718:	19 f0       	breq	.+6      	; 0x720 <UART_set_frame+0x86>
 71a:	62 30       	cpi	r22, 0x02	; 2
 71c:	29 f0       	breq	.+10     	; 0x728 <UART_set_frame+0x8e>
 71e:	08 95       	ret
	{
		// 1 stop bit
		case 1:
			clr_pin(UCSRC,USBS);
 720:	80 b5       	in	r24, 0x20	; 32
 722:	87 7f       	andi	r24, 0xF7	; 247
 724:	80 bd       	out	0x20, r24	; 32
		break;
 726:	08 95       	ret
		// 2 stop bit
		case 2:
			set_pin(UCSRC,USBS);
 728:	80 b5       	in	r24, 0x20	; 32
 72a:	88 60       	ori	r24, 0x08	; 8
 72c:	80 bd       	out	0x20, r24	; 32
 72e:	08 95       	ret

00000730 <UART_init>:
#include "UART_1.h"

void UART_init()
{
	// Set baud rate
	UART_set_BAUD(BAUD_rate);
 730:	83 e3       	ldi	r24, 0x33	; 51
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	0e 94 4a 03 	call	0x694	; 0x694 <UART_set_BAUD>
	
	// Enable receiver and transmitter
	set_pin(UCSRB,RXEN);
 738:	8a b1       	in	r24, 0x0a	; 10
 73a:	80 61       	ori	r24, 0x10	; 16
 73c:	8a b9       	out	0x0a, r24	; 10
	set_pin(UCSRB,TXEN);
 73e:	8a b1       	in	r24, 0x0a	; 10
 740:	88 60       	ori	r24, 0x08	; 8
 742:	8a b9       	out	0x0a, r24	; 10
	
	// Set frame format
	UART_set_frame(Data_bits,Stop_bits);
 744:	61 e0       	ldi	r22, 0x01	; 1
 746:	88 e0       	ldi	r24, 0x08	; 8
 748:	0e 94 4d 03 	call	0x69a	; 0x69a <UART_set_frame>
 74c:	08 95       	ret

0000074e <UART_transmit>:
}

void UART_transmit(uint8_t data)
{
	// Wait for empty transmit buffer
	while ( !( UCSRA & (1 << UDRE)) );
 74e:	5d 9b       	sbis	0x0b, 5	; 11
 750:	fe cf       	rjmp	.-4      	; 0x74e <UART_transmit>
	
	// Put data into buffer, sends the data
	UDR = data;
 752:	8c b9       	out	0x0c, r24	; 12
 754:	08 95       	ret

00000756 <UART_transmitString>:
}

void UART_transmitString(uint8_t *string_data)
{
 756:	0f 93       	push	r16
 758:	1f 93       	push	r17
 75a:	cf 93       	push	r28
 75c:	8c 01       	movw	r16, r24
	for(uint8_t cnt=0; *(string_data + cnt) != '\0'; cnt++)
 75e:	c0 e0       	ldi	r28, 0x00	; 0
 760:	03 c0       	rjmp	.+6      	; 0x768 <UART_transmitString+0x12>
		UART_transmit(*(string_data + cnt));
 762:	0e 94 a7 03 	call	0x74e	; 0x74e <UART_transmit>
	UDR = data;
}

void UART_transmitString(uint8_t *string_data)
{
	for(uint8_t cnt=0; *(string_data + cnt) != '\0'; cnt++)
 766:	cf 5f       	subi	r28, 0xFF	; 255
 768:	f8 01       	movw	r30, r16
 76a:	ec 0f       	add	r30, r28
 76c:	f1 1d       	adc	r31, r1
 76e:	80 81       	ld	r24, Z
 770:	81 11       	cpse	r24, r1
 772:	f7 cf       	rjmp	.-18     	; 0x762 <UART_transmitString+0xc>
		UART_transmit(*(string_data + cnt));
	UART_transmit('\0');
 774:	0e 94 a7 03 	call	0x74e	; 0x74e <UART_transmit>
}
 778:	cf 91       	pop	r28
 77a:	1f 91       	pop	r17
 77c:	0f 91       	pop	r16
 77e:	08 95       	ret

00000780 <_exit>:
 780:	f8 94       	cli

00000782 <__stop_program>:
 782:	ff cf       	rjmp	.-2      	; 0x782 <__stop_program>
