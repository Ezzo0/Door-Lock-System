
MCU_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007a3  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067c  00000000  00000000  000009a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000038d  00000000  00000000  00001023  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  000013b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036a  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  00001792  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001822  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
uint16_t data;


int main(void)
{
    UART_init();
  7c:	0e 94 5c 00 	call	0xb8	; 0xb8 <UART_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	2f e3       	ldi	r18, 0x3F	; 63
  82:	8d e0       	ldi	r24, 0x0D	; 13
  84:	93 e0       	ldi	r25, 0x03	; 3
  86:	21 50       	subi	r18, 0x01	; 1
  88:	80 40       	sbci	r24, 0x00	; 0
  8a:	90 40       	sbci	r25, 0x00	; 0
  8c:	e1 f7       	brne	.-8      	; 0x86 <main+0xa>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <main+0x14>
  90:	00 00       	nop
    while (1) 
    {
		_delay_ms(1000);
		UART_transmit(1);
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	0e 94 70 00 	call	0xe0	; 0xe0 <UART_transmit>
  98:	2f e3       	ldi	r18, 0x3F	; 63
  9a:	8d e0       	ldi	r24, 0x0D	; 13
  9c:	93 e0       	ldi	r25, 0x03	; 3
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	80 40       	sbci	r24, 0x00	; 0
  a2:	90 40       	sbci	r25, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <main+0x22>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x2c>
  a8:	00 00       	nop
		_delay_ms(1000);
		UART_transmit(0);
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	0e 94 70 00 	call	0xe0	; 0xe0 <UART_transmit>
  b0:	e7 cf       	rjmp	.-50     	; 0x80 <main+0x4>

000000b2 <UART_set_baud_rate>:
	
}

void UART_recieve(){
	while(get_pin(UCSRA, 7) == 0);
	data = UDR;
  b2:	90 bd       	out	0x20, r25	; 32
  b4:	89 b9       	out	0x09, r24	; 9
  b6:	08 95       	ret

000000b8 <UART_init>:
  b8:	83 e3       	ldi	r24, 0x33	; 51
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 59 00 	call	0xb2	; 0xb2 <UART_set_baud_rate>
  c0:	8a b1       	in	r24, 0x0a	; 10
  c2:	88 60       	ori	r24, 0x08	; 8
  c4:	8a b9       	out	0x0a, r24	; 10
  c6:	8a b1       	in	r24, 0x0a	; 10
  c8:	80 61       	ori	r24, 0x10	; 16
  ca:	8a b9       	out	0x0a, r24	; 10
  cc:	80 b5       	in	r24, 0x20	; 32
  ce:	80 68       	ori	r24, 0x80	; 128
  d0:	80 bd       	out	0x20, r24	; 32
  d2:	80 b5       	in	r24, 0x20	; 32
  d4:	82 60       	ori	r24, 0x02	; 2
  d6:	80 bd       	out	0x20, r24	; 32
  d8:	80 b5       	in	r24, 0x20	; 32
  da:	84 60       	ori	r24, 0x04	; 4
  dc:	80 bd       	out	0x20, r24	; 32
  de:	08 95       	ret

000000e0 <UART_transmit>:
}


void UART_transmit(uint8_t d){
	while(get_pin(UCSRA, 5) == 0);
  e0:	5d 9b       	sbis	0x0b, 5	; 11
  e2:	fe cf       	rjmp	.-4      	; 0xe0 <UART_transmit>
	UDR = d;
  e4:	8c b9       	out	0x0c, r24	; 12
  e6:	08 95       	ret

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>
