
MCU_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000988  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ca  00800060  00000988  00000a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  0080012a  0080012a  00000ae6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ae6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b97  00000000  00000000  00000d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b8b  00000000  00000000  000028b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001072  00000000  00000000  0000343e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000031c  00000000  00000000  000044b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000077b  00000000  00000000  000047cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009dc  00000000  00000000  00004f47  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00005923  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e8       	ldi	r30, 0x88	; 136
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 32       	cpi	r26, 0x2A	; 42
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	aa e2       	ldi	r26, 0x2A	; 42
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 34       	cpi	r26, 0x41	; 65
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <main>
  8a:	0c 94 c2 04 	jmp	0x984	; 0x984 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_init>:
uint8_t matched_password = Matched;
uint8_t wrong_password = 0;

void app_init()
{
	Keypad_init();
  92:	0e 94 71 01 	call	0x2e2	; 0x2e2 <Keypad_init>
	LCD_8_bit_init();
  96:	0e 94 62 02 	call	0x4c4	; 0x4c4 <LCD_8_bit_init>
	UART_init();
  9a:	0e 94 96 04 	call	0x92c	; 0x92c <UART_init>
  9e:	08 95       	ret

000000a0 <reset_password_array>:
}

void reset_password_array(uint8_t *array)
{
  a0:	9c 01       	movw	r18, r24
	for(uint8_t i = 0; i < 17; ++i)
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	05 c0       	rjmp	.+10     	; 0xb0 <reset_password_array+0x10>
	{
		array[i] = '\0';
  a6:	f9 01       	movw	r30, r18
  a8:	e9 0f       	add	r30, r25
  aa:	f1 1d       	adc	r31, r1
  ac:	10 82       	st	Z, r1
	UART_init();
}

void reset_password_array(uint8_t *array)
{
	for(uint8_t i = 0; i < 17; ++i)
  ae:	9f 5f       	subi	r25, 0xFF	; 255
  b0:	91 31       	cpi	r25, 0x11	; 17
  b2:	c8 f3       	brcs	.-14     	; 0xa6 <reset_password_array+0x6>
	{
		array[i] = '\0';
	}
	cnt = 0;
  b4:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <cnt>
  b8:	08 95       	ret

000000ba <firstOption>:

void firstOption()
{
	while (1)
	{
		keypadInput = Keypad_pressed();
  ba:	0e 94 9c 01 	call	0x338	; 0x338 <Keypad_pressed>
  be:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <keypadInput>
		
		if(keypadInput == '=')
  c2:	8d 33       	cpi	r24, 0x3D	; 61
  c4:	a1 f5       	brne	.+104    	; 0x12e <firstOption+0x74>
		{
			if(cnt >= 4)
  c6:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <cnt>
  ca:	84 30       	cpi	r24, 0x04	; 4
  cc:	d0 f0       	brcs	.+52     	; 0x102 <firstOption+0x48>
			{
				UART_transmitString(password);
  ce:	8e e2       	ldi	r24, 0x2E	; 46
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0e 94 a9 04 	call	0x952	; 0x952 <UART_transmitString>
				LCD_8_bit_clear_all();
  d6:	0e 94 3c 02 	call	0x478	; 0x478 <LCD_8_bit_clear_all>
				LCD_8_bit_loading();
  da:	0e 94 c3 02 	call	0x586	; 0x586 <LCD_8_bit_loading>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	2f e3       	ldi	r18, 0x3F	; 63
  e0:	8d e0       	ldi	r24, 0x0D	; 13
  e2:	93 e0       	ldi	r25, 0x03	; 3
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <firstOption+0x2a>
  ec:	00 c0       	rjmp	.+0      	; 0xee <firstOption+0x34>
  ee:	00 00       	nop
				_delay_ms(1000);
				reset_password_array(password);
  f0:	8e e2       	ldi	r24, 0x2E	; 46
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	0e 94 50 00 	call	0xa0	; 0xa0 <reset_password_array>
					++cnt;
				}
			}
		}
	}
	if(password_checker == Password_was_entered)
  f8:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <password_checker>
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	f1 f5       	brne	.+124    	; 0x17c <firstOption+0xc2>
 100:	39 c0       	rjmp	.+114    	; 0x174 <firstOption+0xba>
				reset_password_array(password);
				break;
			}
			else
			{
				LCD_8_bit_clear_all();
 102:	0e 94 3c 02 	call	0x478	; 0x478 <LCD_8_bit_clear_all>
				LCD_8_bit_4_chars_needed();
 106:	0e 94 b2 02 	call	0x564	; 0x564 <LCD_8_bit_4_chars_needed>
 10a:	2f e7       	ldi	r18, 0x7F	; 127
 10c:	8a e1       	ldi	r24, 0x1A	; 26
 10e:	96 e0       	ldi	r25, 0x06	; 6
 110:	21 50       	subi	r18, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <firstOption+0x56>
 118:	00 c0       	rjmp	.+0      	; 0x11a <firstOption+0x60>
 11a:	00 00       	nop
				_delay_ms(2000);
				reset_password_array(password);
 11c:	8e e2       	ldi	r24, 0x2E	; 46
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	0e 94 50 00 	call	0xa0	; 0xa0 <reset_password_array>
				LCD_8_bit_clear_all();
 124:	0e 94 3c 02 	call	0x478	; 0x478 <LCD_8_bit_clear_all>
				LCD_8_bit_enter_pass();
 128:	0e 94 a2 02 	call	0x544	; 0x544 <LCD_8_bit_enter_pass>
 12c:	c6 cf       	rjmp	.-116    	; 0xba <firstOption>
			}
		}
		else if(keypadInput == 'c')
 12e:	83 36       	cpi	r24, 0x63	; 99
 130:	49 f4       	brne	.+18     	; 0x144 <firstOption+0x8a>
		{
			LCD_8_bit_clear_all();
 132:	0e 94 3c 02 	call	0x478	; 0x478 <LCD_8_bit_clear_all>
			LCD_8_bit_enter_pass();
 136:	0e 94 a2 02 	call	0x544	; 0x544 <LCD_8_bit_enter_pass>
			reset_password_array(password);
 13a:	8e e2       	ldi	r24, 0x2E	; 46
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	0e 94 50 00 	call	0xa0	; 0xa0 <reset_password_array>
 142:	bb cf       	rjmp	.-138    	; 0xba <firstOption>
		}
		else
		{
			if(keypadInput != NOT_pressed)
 144:	88 23       	and	r24, r24
 146:	09 f4       	brne	.+2      	; 0x14a <firstOption+0x90>
 148:	b8 cf       	rjmp	.-144    	; 0xba <firstOption>
			{
				if(cnt < 16)
 14a:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <cnt>
 14e:	80 31       	cpi	r24, 0x10	; 16
 150:	08 f0       	brcs	.+2      	; 0x154 <firstOption+0x9a>
 152:	b3 cf       	rjmp	.-154    	; 0xba <firstOption>
				{
					LCD_8_bit_sendChar('*');
 154:	8a e2       	ldi	r24, 0x2A	; 42
 156:	0e 94 22 02 	call	0x444	; 0x444 <LCD_8_bit_sendChar>
					password[cnt] = keypadInput;
 15a:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <cnt>
 15e:	e8 2f       	mov	r30, r24
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	e2 5d       	subi	r30, 0xD2	; 210
 164:	fe 4f       	sbci	r31, 0xFE	; 254
 166:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <keypadInput>
 16a:	90 83       	st	Z, r25
					++cnt;
 16c:	8f 5f       	subi	r24, 0xFF	; 255
 16e:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <cnt>
 172:	a3 cf       	rjmp	.-186    	; 0xba <firstOption>
				}
			}
		}
	}
	if(password_checker == Password_was_entered)
		matched_password = UART_receive();
 174:	0e 94 be 04 	call	0x97c	; 0x97c <UART_receive>
 178:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 17c:	08 95       	ret

0000017e <secondOption>:
}

void secondOption()
{
	firstOption();
 17e:	0e 94 5d 00 	call	0xba	; 0xba <firstOption>
	if(matched_password == Matched)
 182:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	69 f4       	brne	.+26     	; 0x1a4 <secondOption+0x26>
	{
		LCD_8_bit_clear_all();
 18a:	0e 94 3c 02 	call	0x478	; 0x478 <LCD_8_bit_clear_all>
		LCD_8_bit_enter_new_pass();
 18e:	0e 94 aa 02 	call	0x554	; 0x554 <LCD_8_bit_enter_new_pass>
		firstOption();
 192:	0e 94 5d 00 	call	0xba	; 0xba <firstOption>
		choosed_option = Not_choosed;
 196:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <choosed_option>
		option = Not_choosed;
 19a:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <option>
		wrong_password = 0;
 19e:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end>
 1a2:	08 95       	ret
	}
	else
	{
		++wrong_password;
 1a4:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 1a8:	8f 5f       	subi	r24, 0xFF	; 255
 1aa:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
		UART_transmit(wrong_password);
 1ae:	0e 94 a5 04 	call	0x94a	; 0x94a <UART_transmit>
		LCD_8_bit_clear_all();
 1b2:	0e 94 3c 02 	call	0x478	; 0x478 <LCD_8_bit_clear_all>
		LCD_8_bit_wrong_pass();
 1b6:	0e 94 be 02 	call	0x57c	; 0x57c <LCD_8_bit_wrong_pass>
 1ba:	2f e7       	ldi	r18, 0x7F	; 127
 1bc:	8a e1       	ldi	r24, 0x1A	; 26
 1be:	96 e0       	ldi	r25, 0x06	; 6
 1c0:	21 50       	subi	r18, 0x01	; 1
 1c2:	80 40       	sbci	r24, 0x00	; 0
 1c4:	90 40       	sbci	r25, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <secondOption+0x42>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <secondOption+0x4c>
 1ca:	00 00       	nop
		_delay_ms(2000);
		LCD_8_bit_clear_all();
 1cc:	0e 94 3c 02 	call	0x478	; 0x478 <LCD_8_bit_clear_all>
		LCD_8_bit_enter_pass();
 1d0:	0e 94 a2 02 	call	0x544	; 0x544 <LCD_8_bit_enter_pass>
 1d4:	08 95       	ret

000001d6 <app_start>:

void app_start()
{	
	while(1)
	{
		password_checker = int_eeprom_r(0x00);
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	0e 94 3e 04 	call	0x87c	; 0x87c <int_eeprom_r>
 1dc:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <password_checker>
		UART_transmit(password_checker);
 1e0:	0e 94 a5 04 	call	0x94a	; 0x94a <UART_transmit>
		if(password_checker == Password_was_not_entered)
 1e4:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <password_checker>
 1e8:	8f 3f       	cpi	r24, 0xFF	; 255
 1ea:	49 f4       	brne	.+18     	; 0x1fe <app_start+0x28>
		{
			LCD_8_bit_enter_new_pass();
 1ec:	0e 94 aa 02 	call	0x554	; 0x554 <LCD_8_bit_enter_new_pass>
			firstOption();
 1f0:	0e 94 5d 00 	call	0xba	; 0xba <firstOption>
			int_eeprom_w(0x00,1);
 1f4:	61 e0       	ldi	r22, 0x01	; 1
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	0e 94 31 04 	call	0x862	; 0x862 <int_eeprom_w>
 1fc:	ec cf       	rjmp	.-40     	; 0x1d6 <app_start>
		}
		
		else if(password_checker == Password_was_entered)
 1fe:	81 30       	cpi	r24, 0x01	; 1
 200:	51 f7       	brne	.-44     	; 0x1d6 <app_start>
		{
			
			if(choosed_option == Not_choosed)
 202:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <choosed_option>
 206:	81 11       	cpse	r24, r1
 208:	19 c0       	rjmp	.+50     	; 0x23c <app_start+0x66>
			{
				LCD_8_bit_clear_all();
 20a:	0e 94 3c 02 	call	0x478	; 0x478 <LCD_8_bit_clear_all>
				LCD_8_bit_display_options();
 20e:	0e 94 96 02 	call	0x52c	; 0x52c <LCD_8_bit_display_options>
				option = Keypad_pressed();
 212:	0e 94 9c 01 	call	0x338	; 0x338 <Keypad_pressed>
 216:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <option>
				while(option != First_option && option != Second_option)
 21a:	04 c0       	rjmp	.+8      	; 0x224 <app_start+0x4e>
					option = Keypad_pressed();
 21c:	0e 94 9c 01 	call	0x338	; 0x338 <Keypad_pressed>
 220:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <option>
			if(choosed_option == Not_choosed)
			{
				LCD_8_bit_clear_all();
				LCD_8_bit_display_options();
				option = Keypad_pressed();
				while(option != First_option && option != Second_option)
 224:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <option>
 228:	81 53       	subi	r24, 0x31	; 49
 22a:	82 30       	cpi	r24, 0x02	; 2
 22c:	b8 f7       	brcc	.-18     	; 0x21c <app_start+0x46>
					option = Keypad_pressed();
				
				LCD_8_bit_clear_all();
 22e:	0e 94 3c 02 	call	0x478	; 0x478 <LCD_8_bit_clear_all>
				LCD_8_bit_enter_pass();
 232:	0e 94 a2 02 	call	0x544	; 0x544 <LCD_8_bit_enter_pass>
				choosed_option = Choosed;
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <choosed_option>
			}
			
			UART_transmit(choosed_option);
 23c:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <choosed_option>
 240:	0e 94 a5 04 	call	0x94a	; 0x94a <UART_transmit>
			if(option == First_option)
 244:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <option>
 248:	81 33       	cpi	r24, 0x31	; 49
 24a:	09 f0       	breq	.+2      	; 0x24e <app_start+0x78>
 24c:	42 c0       	rjmp	.+132    	; 0x2d2 <app_start+0xfc>
			{
				UART_transmit(option);
 24e:	0e 94 a5 04 	call	0x94a	; 0x94a <UART_transmit>
				firstOption();
 252:	0e 94 5d 00 	call	0xba	; 0xba <firstOption>
				if(matched_password == Matched)
 256:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	09 f5       	brne	.+66     	; 0x2a0 <app_start+0xca>
				{
					LCD_8_bit_clear_all();
 25e:	0e 94 3c 02 	call	0x478	; 0x478 <LCD_8_bit_clear_all>
					LCD_8_bit_opening();
 262:	0e 94 c8 02 	call	0x590	; 0x590 <LCD_8_bit_opening>
 266:	2f eb       	ldi	r18, 0xBF	; 191
 268:	87 e2       	ldi	r24, 0x27	; 39
 26a:	99 e0       	ldi	r25, 0x09	; 9
 26c:	21 50       	subi	r18, 0x01	; 1
 26e:	80 40       	sbci	r24, 0x00	; 0
 270:	90 40       	sbci	r25, 0x00	; 0
 272:	e1 f7       	brne	.-8      	; 0x26c <app_start+0x96>
 274:	00 c0       	rjmp	.+0      	; 0x276 <app_start+0xa0>
 276:	00 00       	nop
					_delay_ms(3000);
					LCD_8_bit_clear_all();
 278:	0e 94 3c 02 	call	0x478	; 0x478 <LCD_8_bit_clear_all>
					LCD_8_bit_closing();
 27c:	0e 94 cd 02 	call	0x59a	; 0x59a <LCD_8_bit_closing>
 280:	2f e7       	ldi	r18, 0x7F	; 127
 282:	8a e1       	ldi	r24, 0x1A	; 26
 284:	96 e0       	ldi	r25, 0x06	; 6
 286:	21 50       	subi	r18, 0x01	; 1
 288:	80 40       	sbci	r24, 0x00	; 0
 28a:	90 40       	sbci	r25, 0x00	; 0
 28c:	e1 f7       	brne	.-8      	; 0x286 <app_start+0xb0>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <app_start+0xba>
 290:	00 00       	nop
					_delay_ms(2000);
					choosed_option = Not_choosed;
 292:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <choosed_option>
					option = Not_choosed;
 296:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <option>
					wrong_password = 0;
 29a:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end>
 29e:	9b cf       	rjmp	.-202    	; 0x1d6 <app_start>
				}
				else
				{
					++wrong_password;
 2a0:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 2a4:	8f 5f       	subi	r24, 0xFF	; 255
 2a6:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
					UART_transmit(wrong_password);
 2aa:	0e 94 a5 04 	call	0x94a	; 0x94a <UART_transmit>
					LCD_8_bit_clear_all();
 2ae:	0e 94 3c 02 	call	0x478	; 0x478 <LCD_8_bit_clear_all>
					LCD_8_bit_wrong_pass();
 2b2:	0e 94 be 02 	call	0x57c	; 0x57c <LCD_8_bit_wrong_pass>
 2b6:	2f e7       	ldi	r18, 0x7F	; 127
 2b8:	8a e1       	ldi	r24, 0x1A	; 26
 2ba:	96 e0       	ldi	r25, 0x06	; 6
 2bc:	21 50       	subi	r18, 0x01	; 1
 2be:	80 40       	sbci	r24, 0x00	; 0
 2c0:	90 40       	sbci	r25, 0x00	; 0
 2c2:	e1 f7       	brne	.-8      	; 0x2bc <app_start+0xe6>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <app_start+0xf0>
 2c6:	00 00       	nop
					_delay_ms(2000);
					LCD_8_bit_clear_all();
 2c8:	0e 94 3c 02 	call	0x478	; 0x478 <LCD_8_bit_clear_all>
					LCD_8_bit_enter_pass();
 2cc:	0e 94 a2 02 	call	0x544	; 0x544 <LCD_8_bit_enter_pass>
 2d0:	82 cf       	rjmp	.-252    	; 0x1d6 <app_start>
				}
			}
			
			else if(option == Second_option)
 2d2:	82 33       	cpi	r24, 0x32	; 50
 2d4:	09 f0       	breq	.+2      	; 0x2d8 <app_start+0x102>
 2d6:	7f cf       	rjmp	.-258    	; 0x1d6 <app_start>
			{
				UART_transmit(option);
 2d8:	0e 94 a5 04 	call	0x94a	; 0x94a <UART_transmit>
				secondOption();
 2dc:	0e 94 bf 00 	call	0x17e	; 0x17e <secondOption>
 2e0:	7a cf       	rjmp	.-268    	; 0x1d6 <app_start>

000002e2 <Keypad_init>:
						 {'c','0','=','+'}};

void Keypad_init()
{
	// Initialization of rows
	DIO_init(port_A,PIN_4,OUT);
 2e2:	41 e0       	ldi	r20, 0x01	; 1
 2e4:	64 e0       	ldi	r22, 0x04	; 4
 2e6:	81 e4       	ldi	r24, 0x41	; 65
 2e8:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <DIO_init>
	DIO_init(port_A,PIN_5,OUT);
 2ec:	41 e0       	ldi	r20, 0x01	; 1
 2ee:	65 e0       	ldi	r22, 0x05	; 5
 2f0:	81 e4       	ldi	r24, 0x41	; 65
 2f2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <DIO_init>
	DIO_init(port_A,PIN_6,OUT);
 2f6:	41 e0       	ldi	r20, 0x01	; 1
 2f8:	66 e0       	ldi	r22, 0x06	; 6
 2fa:	81 e4       	ldi	r24, 0x41	; 65
 2fc:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <DIO_init>
	DIO_init(port_A,PIN_7,OUT);
 300:	41 e0       	ldi	r20, 0x01	; 1
 302:	67 e0       	ldi	r22, 0x07	; 7
 304:	81 e4       	ldi	r24, 0x41	; 65
 306:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <DIO_init>
	
	// Initialization of columns
	DIO_init(port_A,PIN_0,IN);
 30a:	40 e0       	ldi	r20, 0x00	; 0
 30c:	60 e0       	ldi	r22, 0x00	; 0
 30e:	81 e4       	ldi	r24, 0x41	; 65
 310:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <DIO_init>
	DIO_init(port_A,PIN_1,IN);
 314:	40 e0       	ldi	r20, 0x00	; 0
 316:	61 e0       	ldi	r22, 0x01	; 1
 318:	81 e4       	ldi	r24, 0x41	; 65
 31a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <DIO_init>
	DIO_init(port_A,PIN_2,IN);
 31e:	40 e0       	ldi	r20, 0x00	; 0
 320:	62 e0       	ldi	r22, 0x02	; 2
 322:	81 e4       	ldi	r24, 0x41	; 65
 324:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <DIO_init>
	DIO_init(port_A,PIN_3,IN);
 328:	40 e0       	ldi	r20, 0x00	; 0
 32a:	63 e0       	ldi	r22, 0x03	; 3
 32c:	81 e4       	ldi	r24, 0x41	; 65
 32e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <DIO_init>
	
	// give logic one to all the keypad pins
	PORTA = 0xFF;
 332:	8f ef       	ldi	r24, 0xFF	; 255
 334:	8b bb       	out	0x1b, r24	; 27
 336:	08 95       	ret

00000338 <Keypad_pressed>:
}

uint8_t Keypad_pressed()
{
 338:	cf 92       	push	r12
 33a:	df 92       	push	r13
 33c:	ef 92       	push	r14
 33e:	ff 92       	push	r15
 340:	0f 93       	push	r16
 342:	1f 93       	push	r17
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	1f 92       	push	r1
 34a:	cd b7       	in	r28, 0x3d	; 61
 34c:	de b7       	in	r29, 0x3e	; 62
	uint8_t key = NOT_pressed; // variable for the pressed key
	uint8_t flag = 0; // Flag to indicate that a key was pressed or not
	uint8_t value; // variable for storing the value of the pin
	for(int rows_cnt = 0; rows_cnt < 4; ++rows_cnt)
 34e:	e1 2c       	mov	r14, r1
 350:	f1 2c       	mov	r15, r1
}

uint8_t Keypad_pressed()
{
	uint8_t key = NOT_pressed; // variable for the pressed key
	uint8_t flag = 0; // Flag to indicate that a key was pressed or not
 352:	d1 2c       	mov	r13, r1
	PORTA = 0xFF;
}

uint8_t Keypad_pressed()
{
	uint8_t key = NOT_pressed; // variable for the pressed key
 354:	c1 2c       	mov	r12, r1
	uint8_t flag = 0; // Flag to indicate that a key was pressed or not
	uint8_t value; // variable for storing the value of the pin
	for(int rows_cnt = 0; rows_cnt < 4; ++rows_cnt)
 356:	4c c0       	rjmp	.+152    	; 0x3f0 <Keypad_pressed+0xb8>
	{
		DIO_write(port_A,rows[rows_cnt],LOW); // give each row pin a low value
 358:	40 e0       	ldi	r20, 0x00	; 0
 35a:	f7 01       	movw	r30, r14
 35c:	eb 58       	subi	r30, 0x8B	; 139
 35e:	ff 4f       	sbci	r31, 0xFF	; 255
 360:	60 81       	ld	r22, Z
 362:	81 e4       	ldi	r24, 0x41	; 65
 364:	0e 94 53 03 	call	0x6a6	; 0x6a6 <DIO_write>
		for (int columns_cnt = 0; columns_cnt < 4; ++columns_cnt)
 368:	00 e0       	ldi	r16, 0x00	; 0
 36a:	10 e0       	ldi	r17, 0x00	; 0
 36c:	31 c0       	rjmp	.+98     	; 0x3d0 <Keypad_pressed+0x98>
		{
			DIO_read(port_A,columns[columns_cnt],&value);
 36e:	ae 01       	movw	r20, r28
 370:	4f 5f       	subi	r20, 0xFF	; 255
 372:	5f 4f       	sbci	r21, 0xFF	; 255
 374:	f8 01       	movw	r30, r16
 376:	ef 58       	subi	r30, 0x8F	; 143
 378:	ff 4f       	sbci	r31, 0xFF	; 255
 37a:	60 81       	ld	r22, Z
 37c:	81 e4       	ldi	r24, 0x41	; 65
 37e:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_read>
			if(value == LOW)
 382:	89 81       	ldd	r24, Y+1	; 0x01
 384:	81 11       	cpse	r24, r1
 386:	22 c0       	rjmp	.+68     	; 0x3cc <Keypad_pressed+0x94>
 388:	87 e8       	ldi	r24, 0x87	; 135
 38a:	93 e1       	ldi	r25, 0x13	; 19
 38c:	01 97       	sbiw	r24, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <Keypad_pressed+0x54>
 390:	00 c0       	rjmp	.+0      	; 0x392 <Keypad_pressed+0x5a>
 392:	00 00       	nop
 394:	0a c0       	rjmp	.+20     	; 0x3aa <Keypad_pressed+0x72>
			{
				_delay_ms(20); // for solving the bouncing problem
				
				// Busy wait for long press
				while(value == LOW)
					DIO_read(port_A,columns[columns_cnt],&value);
 396:	ae 01       	movw	r20, r28
 398:	4f 5f       	subi	r20, 0xFF	; 255
 39a:	5f 4f       	sbci	r21, 0xFF	; 255
 39c:	f8 01       	movw	r30, r16
 39e:	ef 58       	subi	r30, 0x8F	; 143
 3a0:	ff 4f       	sbci	r31, 0xFF	; 255
 3a2:	60 81       	ld	r22, Z
 3a4:	81 e4       	ldi	r24, 0x41	; 65
 3a6:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_read>
			if(value == LOW)
			{
				_delay_ms(20); // for solving the bouncing problem
				
				// Busy wait for long press
				while(value == LOW)
 3aa:	89 81       	ldd	r24, Y+1	; 0x01
 3ac:	88 23       	and	r24, r24
 3ae:	99 f3       	breq	.-26     	; 0x396 <Keypad_pressed+0x5e>
					DIO_read(port_A,columns[columns_cnt],&value);
				
				key = keypad[rows_cnt][columns_cnt]; // get the pressed key
 3b0:	c7 01       	movw	r24, r14
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	8f 59       	subi	r24, 0x9F	; 159
 3bc:	9f 4f       	sbci	r25, 0xFF	; 255
 3be:	fc 01       	movw	r30, r24
 3c0:	e0 0f       	add	r30, r16
 3c2:	f1 1f       	adc	r31, r17
 3c4:	c0 80       	ld	r12, Z
				flag = 1; // a key was pressed
 3c6:	dd 24       	eor	r13, r13
 3c8:	d3 94       	inc	r13
				break;
 3ca:	05 c0       	rjmp	.+10     	; 0x3d6 <Keypad_pressed+0x9e>
	uint8_t flag = 0; // Flag to indicate that a key was pressed or not
	uint8_t value; // variable for storing the value of the pin
	for(int rows_cnt = 0; rows_cnt < 4; ++rows_cnt)
	{
		DIO_write(port_A,rows[rows_cnt],LOW); // give each row pin a low value
		for (int columns_cnt = 0; columns_cnt < 4; ++columns_cnt)
 3cc:	0f 5f       	subi	r16, 0xFF	; 255
 3ce:	1f 4f       	sbci	r17, 0xFF	; 255
 3d0:	04 30       	cpi	r16, 0x04	; 4
 3d2:	11 05       	cpc	r17, r1
 3d4:	64 f2       	brlt	.-104    	; 0x36e <Keypad_pressed+0x36>
				key = keypad[rows_cnt][columns_cnt]; // get the pressed key
				flag = 1; // a key was pressed
				break;
			}
		}
		DIO_write(port_A,rows[rows_cnt],HIGH); // return the pin to high value again
 3d6:	41 e0       	ldi	r20, 0x01	; 1
 3d8:	f7 01       	movw	r30, r14
 3da:	eb 58       	subi	r30, 0x8B	; 139
 3dc:	ff 4f       	sbci	r31, 0xFF	; 255
 3de:	60 81       	ld	r22, Z
 3e0:	81 e4       	ldi	r24, 0x41	; 65
 3e2:	0e 94 53 03 	call	0x6a6	; 0x6a6 <DIO_write>
		if(flag)
 3e6:	d1 10       	cpse	r13, r1
 3e8:	08 c0       	rjmp	.+16     	; 0x3fa <Keypad_pressed+0xc2>
uint8_t Keypad_pressed()
{
	uint8_t key = NOT_pressed; // variable for the pressed key
	uint8_t flag = 0; // Flag to indicate that a key was pressed or not
	uint8_t value; // variable for storing the value of the pin
	for(int rows_cnt = 0; rows_cnt < 4; ++rows_cnt)
 3ea:	9f ef       	ldi	r25, 0xFF	; 255
 3ec:	e9 1a       	sub	r14, r25
 3ee:	f9 0a       	sbc	r15, r25
 3f0:	84 e0       	ldi	r24, 0x04	; 4
 3f2:	e8 16       	cp	r14, r24
 3f4:	f1 04       	cpc	r15, r1
 3f6:	0c f4       	brge	.+2      	; 0x3fa <Keypad_pressed+0xc2>
 3f8:	af cf       	rjmp	.-162    	; 0x358 <Keypad_pressed+0x20>
		if(flag)
			break;
	}
	// return the pressed key
	return key;
 3fa:	8c 2d       	mov	r24, r12
 3fc:	0f 90       	pop	r0
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	1f 91       	pop	r17
 404:	0f 91       	pop	r16
 406:	ff 90       	pop	r15
 408:	ef 90       	pop	r14
 40a:	df 90       	pop	r13
 40c:	cf 90       	pop	r12
 40e:	08 95       	ret

00000410 <LCD_8_bit_sendCommand>:
	LCD_8_bit_sendCommand(0x10); // Move cursor to left
}

void LCD_8_bit_cursor_right()
{
	LCD_8_bit_sendCommand(0x14); // Move cursor to right
 410:	85 bb       	out	0x15, r24	; 21
 412:	82 b3       	in	r24, 0x12	; 18
 414:	8f 7d       	andi	r24, 0xDF	; 223
 416:	82 bb       	out	0x12, r24	; 18
 418:	82 b3       	in	r24, 0x12	; 18
 41a:	8f 7b       	andi	r24, 0xBF	; 191
 41c:	82 bb       	out	0x12, r24	; 18
 41e:	82 b3       	in	r24, 0x12	; 18
 420:	80 68       	ori	r24, 0x80	; 128
 422:	82 bb       	out	0x12, r24	; 18
 424:	89 ef       	ldi	r24, 0xF9	; 249
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	01 97       	sbiw	r24, 0x01	; 1
 42a:	f1 f7       	brne	.-4      	; 0x428 <LCD_8_bit_sendCommand+0x18>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <LCD_8_bit_sendCommand+0x1e>
 42e:	00 00       	nop
 430:	82 b3       	in	r24, 0x12	; 18
 432:	8f 77       	andi	r24, 0x7F	; 127
 434:	82 bb       	out	0x12, r24	; 18
 436:	8d ee       	ldi	r24, 0xED	; 237
 438:	92 e0       	ldi	r25, 0x02	; 2
 43a:	01 97       	sbiw	r24, 0x01	; 1
 43c:	f1 f7       	brne	.-4      	; 0x43a <LCD_8_bit_sendCommand+0x2a>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <LCD_8_bit_sendCommand+0x30>
 440:	00 00       	nop
 442:	08 95       	ret

00000444 <LCD_8_bit_sendChar>:
 444:	85 bb       	out	0x15, r24	; 21
 446:	82 b3       	in	r24, 0x12	; 18
 448:	80 62       	ori	r24, 0x20	; 32
 44a:	82 bb       	out	0x12, r24	; 18
 44c:	82 b3       	in	r24, 0x12	; 18
 44e:	8f 7b       	andi	r24, 0xBF	; 191
 450:	82 bb       	out	0x12, r24	; 18
 452:	82 b3       	in	r24, 0x12	; 18
 454:	80 68       	ori	r24, 0x80	; 128
 456:	82 bb       	out	0x12, r24	; 18
 458:	89 ef       	ldi	r24, 0xF9	; 249
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	01 97       	sbiw	r24, 0x01	; 1
 45e:	f1 f7       	brne	.-4      	; 0x45c <LCD_8_bit_sendChar+0x18>
 460:	00 c0       	rjmp	.+0      	; 0x462 <LCD_8_bit_sendChar+0x1e>
 462:	00 00       	nop
 464:	82 b3       	in	r24, 0x12	; 18
 466:	8f 77       	andi	r24, 0x7F	; 127
 468:	82 bb       	out	0x12, r24	; 18
 46a:	8d ee       	ldi	r24, 0xED	; 237
 46c:	92 e0       	ldi	r25, 0x02	; 2
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	f1 f7       	brne	.-4      	; 0x46e <LCD_8_bit_sendChar+0x2a>
 472:	00 c0       	rjmp	.+0      	; 0x474 <LCD_8_bit_sendChar+0x30>
 474:	00 00       	nop
 476:	08 95       	ret

00000478 <LCD_8_bit_clear_all>:
}

void LCD_8_bit_clear_all()
{
	LCD_8_bit_sendCommand(0x01); // Clear Display
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	0e 94 08 02 	call	0x410	; 0x410 <LCD_8_bit_sendCommand>
	LCD_8_bit_sendCommand(0x80); // Cursor at home position
 47e:	80 e8       	ldi	r24, 0x80	; 128
 480:	0e 94 08 02 	call	0x410	; 0x410 <LCD_8_bit_sendCommand>
 484:	08 95       	ret

00000486 <LCD_8_bit_sendString>:
{
	LCD_8_bit_sendString(closing_door); // Displaying closing words
}

void LCD_8_bit_sendString(uint8_t *string_data)
{
 486:	0f 93       	push	r16
 488:	1f 93       	push	r17
 48a:	cf 93       	push	r28
 48c:	8c 01       	movw	r16, r24
	for (uint8_t cnt = 0; *(string_data+cnt) != '\0'; ++cnt) // Loop for sending each char in the string to the LCD
 48e:	c0 e0       	ldi	r28, 0x00	; 0
 490:	03 c0       	rjmp	.+6      	; 0x498 <LCD_8_bit_sendString+0x12>
		LCD_8_bit_sendChar(*(string_data+cnt)); // call the writing function on LCD
 492:	0e 94 22 02 	call	0x444	; 0x444 <LCD_8_bit_sendChar>
	LCD_8_bit_sendString(closing_door); // Displaying closing words
}

void LCD_8_bit_sendString(uint8_t *string_data)
{
	for (uint8_t cnt = 0; *(string_data+cnt) != '\0'; ++cnt) // Loop for sending each char in the string to the LCD
 496:	cf 5f       	subi	r28, 0xFF	; 255
 498:	f8 01       	movw	r30, r16
 49a:	ec 0f       	add	r30, r28
 49c:	f1 1d       	adc	r31, r1
 49e:	80 81       	ld	r24, Z
 4a0:	81 11       	cpse	r24, r1
 4a2:	f7 cf       	rjmp	.-18     	; 0x492 <LCD_8_bit_sendString+0xc>
		LCD_8_bit_sendChar(*(string_data+cnt)); // call the writing function on LCD
 4a4:	cf 91       	pop	r28
 4a6:	1f 91       	pop	r17
 4a8:	0f 91       	pop	r16
 4aa:	08 95       	ret

000004ac <LCD_8_bit_welcoming>:
	LCD_8_bit_sendCommand(0x80); // Cursor at home position
}

void LCD_8_bit_welcoming()
{
	LCD_8_bit_sendString(welcomeStr); // Displaying welcome words
 4ac:	8f e1       	ldi	r24, 0x1F	; 31
 4ae:	91 e0       	ldi	r25, 0x01	; 1
 4b0:	0e 94 43 02 	call	0x486	; 0x486 <LCD_8_bit_sendString>
	LCD_8_bit_sendCommand(0xC0); // Cursor at 2nd line
 4b4:	80 ec       	ldi	r24, 0xC0	; 192
 4b6:	0e 94 08 02 	call	0x410	; 0x410 <LCD_8_bit_sendCommand>
	LCD_8_bit_sendString(welcomeStr_2); // Displaying second welcome words
 4ba:	8e e0       	ldi	r24, 0x0E	; 14
 4bc:	91 e0       	ldi	r25, 0x01	; 1
 4be:	0e 94 43 02 	call	0x486	; 0x486 <LCD_8_bit_sendString>
 4c2:	08 95       	ret

000004c4 <LCD_8_bit_init>:
uint8_t opening_door[] = "Opening The DOOR";
uint8_t closing_door[] = "Closing The DOOR";

void LCD_8_bit_init()
{
	LCD_commandData_dir = 0xFF; // Make LCD command port direction as o/p
 4c4:	8f ef       	ldi	r24, 0xFF	; 255
 4c6:	84 bb       	out	0x14, r24	; 20
	// Make LCD control pins in the MCU direction as o/p
	DIO_init(Control_PINS_port,RS_PIN,OUT);
 4c8:	41 e0       	ldi	r20, 0x01	; 1
 4ca:	65 e0       	ldi	r22, 0x05	; 5
 4cc:	84 e4       	ldi	r24, 0x44	; 68
 4ce:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <DIO_init>
	DIO_init(Control_PINS_port,RW_PIN,OUT);
 4d2:	41 e0       	ldi	r20, 0x01	; 1
 4d4:	66 e0       	ldi	r22, 0x06	; 6
 4d6:	84 e4       	ldi	r24, 0x44	; 68
 4d8:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <DIO_init>
	DIO_init(Control_PINS_port,E_PIN,OUT);
 4dc:	41 e0       	ldi	r20, 0x01	; 1
 4de:	67 e0       	ldi	r22, 0x07	; 7
 4e0:	84 e4       	ldi	r24, 0x44	; 68
 4e2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <DIO_init>
 4e6:	87 e8       	ldi	r24, 0x87	; 135
 4e8:	93 e1       	ldi	r25, 0x13	; 19
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <LCD_8_bit_init+0x26>
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <LCD_8_bit_init+0x2c>
 4f0:	00 00       	nop
	// LCD power on delay
	_delay_ms(20);
	LCD_8_bit_sendCommand(0x38); // Initialization of 16x2 LCD in 8 bit mode
 4f2:	88 e3       	ldi	r24, 0x38	; 56
 4f4:	0e 94 08 02 	call	0x410	; 0x410 <LCD_8_bit_sendCommand>
	LCD_8_bit_sendCommand(0x0E); // Display on and cursor blinking
 4f8:	8e e0       	ldi	r24, 0x0E	; 14
 4fa:	0e 94 08 02 	call	0x410	; 0x410 <LCD_8_bit_sendCommand>
	LCD_8_bit_sendCommand(0x06); // Auto increment for the cursor
 4fe:	86 e0       	ldi	r24, 0x06	; 6
 500:	0e 94 08 02 	call	0x410	; 0x410 <LCD_8_bit_sendCommand>
	LCD_8_bit_sendCommand(0x01); // Clear Display
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	0e 94 08 02 	call	0x410	; 0x410 <LCD_8_bit_sendCommand>
	LCD_8_bit_sendCommand(0x80); // Cursor at home position
 50a:	80 e8       	ldi	r24, 0x80	; 128
 50c:	0e 94 08 02 	call	0x410	; 0x410 <LCD_8_bit_sendCommand>
	LCD_8_bit_welcoming(); // Displaying welcoming words
 510:	0e 94 56 02 	call	0x4ac	; 0x4ac <LCD_8_bit_welcoming>
 514:	9f e3       	ldi	r25, 0x3F	; 63
 516:	2d e0       	ldi	r18, 0x0D	; 13
 518:	83 e0       	ldi	r24, 0x03	; 3
 51a:	91 50       	subi	r25, 0x01	; 1
 51c:	20 40       	sbci	r18, 0x00	; 0
 51e:	80 40       	sbci	r24, 0x00	; 0
 520:	e1 f7       	brne	.-8      	; 0x51a <LCD_8_bit_init+0x56>
 522:	00 c0       	rjmp	.+0      	; 0x524 <LCD_8_bit_init+0x60>
 524:	00 00       	nop
	_delay_ms(1000); // wait for 1 sec
	LCD_8_bit_clear_all(); // Clear every char on LCD
 526:	0e 94 3c 02 	call	0x478	; 0x478 <LCD_8_bit_clear_all>
 52a:	08 95       	ret

0000052c <LCD_8_bit_display_options>:
	LCD_8_bit_sendString(welcomeStr_2); // Displaying second welcome words
}

void LCD_8_bit_display_options()
{
	LCD_8_bit_sendString(option_1); // Displaying option words
 52c:	80 ee       	ldi	r24, 0xE0	; 224
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	0e 94 43 02 	call	0x486	; 0x486 <LCD_8_bit_sendString>
	LCD_8_bit_sendCommand(0xC0); // Cursor at 2nd line
 534:	80 ec       	ldi	r24, 0xC0	; 192
 536:	0e 94 08 02 	call	0x410	; 0x410 <LCD_8_bit_sendCommand>
	LCD_8_bit_sendString(option_2); // Displaying second option words
 53a:	8f ec       	ldi	r24, 0xCF	; 207
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 43 02 	call	0x486	; 0x486 <LCD_8_bit_sendString>
 542:	08 95       	ret

00000544 <LCD_8_bit_enter_pass>:
}

void LCD_8_bit_enter_pass()
{
	LCD_8_bit_sendString(enter_pass_str); // Displaying option words
 544:	8f ef       	ldi	r24, 0xFF	; 255
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	0e 94 43 02 	call	0x486	; 0x486 <LCD_8_bit_sendString>
	LCD_8_bit_sendCommand(0xC0); // Cursor at 2nd line
 54c:	80 ec       	ldi	r24, 0xC0	; 192
 54e:	0e 94 08 02 	call	0x410	; 0x410 <LCD_8_bit_sendCommand>
 552:	08 95       	ret

00000554 <LCD_8_bit_enter_new_pass>:
}

void LCD_8_bit_enter_new_pass()
{
	LCD_8_bit_sendString(enter_new_pass_str); // Displaying option words
 554:	80 ef       	ldi	r24, 0xF0	; 240
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	0e 94 43 02 	call	0x486	; 0x486 <LCD_8_bit_sendString>
	LCD_8_bit_sendCommand(0xC0); // Cursor at 2nd line
 55c:	80 ec       	ldi	r24, 0xC0	; 192
 55e:	0e 94 08 02 	call	0x410	; 0x410 <LCD_8_bit_sendCommand>
 562:	08 95       	ret

00000564 <LCD_8_bit_4_chars_needed>:
}

void LCD_8_bit_4_chars_needed()
{
	LCD_8_bit_sendString(least_pass_1); // Displaying words 
 564:	80 ec       	ldi	r24, 0xC0	; 192
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	0e 94 43 02 	call	0x486	; 0x486 <LCD_8_bit_sendString>
	LCD_8_bit_sendCommand(0xC0); // Cursor at 2nd line
 56c:	80 ec       	ldi	r24, 0xC0	; 192
 56e:	0e 94 08 02 	call	0x410	; 0x410 <LCD_8_bit_sendCommand>
	LCD_8_bit_sendString(least_pass_2); // Displaying the rest of words
 572:	86 eb       	ldi	r24, 0xB6	; 182
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	0e 94 43 02 	call	0x486	; 0x486 <LCD_8_bit_sendString>
 57a:	08 95       	ret

0000057c <LCD_8_bit_wrong_pass>:
}

void LCD_8_bit_wrong_pass()
{
	LCD_8_bit_sendString(wrong_pass); // Displaying words 
 57c:	87 ea       	ldi	r24, 0xA7	; 167
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 43 02 	call	0x486	; 0x486 <LCD_8_bit_sendString>
 584:	08 95       	ret

00000586 <LCD_8_bit_loading>:
}

void LCD_8_bit_loading()
{
	LCD_8_bit_sendString(loading); // Displaying words 
 586:	8b e9       	ldi	r24, 0x9B	; 155
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	0e 94 43 02 	call	0x486	; 0x486 <LCD_8_bit_sendString>
 58e:	08 95       	ret

00000590 <LCD_8_bit_opening>:
}

void LCD_8_bit_opening()
{
	LCD_8_bit_sendString(opening_door); // Displaying opening words
 590:	8a e8       	ldi	r24, 0x8A	; 138
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	0e 94 43 02 	call	0x486	; 0x486 <LCD_8_bit_sendString>
 598:	08 95       	ret

0000059a <LCD_8_bit_closing>:
}

void LCD_8_bit_closing()
{
	LCD_8_bit_sendString(closing_door); // Displaying closing words
 59a:	89 e7       	ldi	r24, 0x79	; 121
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	0e 94 43 02 	call	0x486	; 0x486 <LCD_8_bit_sendString>
 5a2:	08 95       	ret

000005a4 <main>:

#include "APP/APP_1.h"

int main(void)
{
	app_init();
 5a4:	0e 94 49 00 	call	0x92	; 0x92 <app_init>
	app_start();
 5a8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <app_start>
}
 5ac:	80 e0       	ldi	r24, 0x00	; 0
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	08 95       	ret

000005b2 <DIO_init>:
		case port_C:
			tgl_pin(PORTC,pinnum); // toggle pin number (pinnum) in port C
		break;
		
		case port_D:
			tgl_pin(PORTD,pinnum); // toggle pin number (pinnum) in port D
 5b2:	82 34       	cpi	r24, 0x42	; 66
 5b4:	31 f1       	breq	.+76     	; 0x602 <DIO_init+0x50>
 5b6:	18 f4       	brcc	.+6      	; 0x5be <DIO_init+0xc>
 5b8:	81 34       	cpi	r24, 0x41	; 65
 5ba:	39 f0       	breq	.+14     	; 0x5ca <DIO_init+0x18>
 5bc:	08 95       	ret
 5be:	83 34       	cpi	r24, 0x43	; 67
 5c0:	e1 f1       	breq	.+120    	; 0x63a <DIO_init+0x88>
 5c2:	84 34       	cpi	r24, 0x44	; 68
 5c4:	09 f4       	brne	.+2      	; 0x5c8 <DIO_init+0x16>
 5c6:	54 c0       	rjmp	.+168    	; 0x670 <DIO_init+0xbe>
 5c8:	08 95       	ret
 5ca:	41 11       	cpse	r20, r1
 5cc:	0c c0       	rjmp	.+24     	; 0x5e6 <DIO_init+0x34>
 5ce:	2a b3       	in	r18, 0x1a	; 26
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <DIO_init+0x28>
 5d6:	88 0f       	add	r24, r24
 5d8:	99 1f       	adc	r25, r25
 5da:	6a 95       	dec	r22
 5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <DIO_init+0x24>
 5de:	80 95       	com	r24
 5e0:	82 23       	and	r24, r18
 5e2:	8a bb       	out	0x1a, r24	; 26
 5e4:	08 95       	ret
 5e6:	41 30       	cpi	r20, 0x01	; 1
 5e8:	09 f0       	breq	.+2      	; 0x5ec <DIO_init+0x3a>
 5ea:	5c c0       	rjmp	.+184    	; 0x6a4 <DIO_init+0xf2>
 5ec:	2a b3       	in	r18, 0x1a	; 26
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <DIO_init+0x46>
 5f4:	88 0f       	add	r24, r24
 5f6:	99 1f       	adc	r25, r25
 5f8:	6a 95       	dec	r22
 5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <DIO_init+0x42>
 5fc:	82 2b       	or	r24, r18
 5fe:	8a bb       	out	0x1a, r24	; 26
 600:	08 95       	ret
 602:	41 11       	cpse	r20, r1
 604:	0c c0       	rjmp	.+24     	; 0x61e <DIO_init+0x6c>
 606:	27 b3       	in	r18, 0x17	; 23
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	02 c0       	rjmp	.+4      	; 0x612 <DIO_init+0x60>
 60e:	88 0f       	add	r24, r24
 610:	99 1f       	adc	r25, r25
 612:	6a 95       	dec	r22
 614:	e2 f7       	brpl	.-8      	; 0x60e <DIO_init+0x5c>
 616:	80 95       	com	r24
 618:	82 23       	and	r24, r18
 61a:	87 bb       	out	0x17, r24	; 23
 61c:	08 95       	ret
 61e:	41 30       	cpi	r20, 0x01	; 1
 620:	09 f0       	breq	.+2      	; 0x624 <DIO_init+0x72>
 622:	40 c0       	rjmp	.+128    	; 0x6a4 <DIO_init+0xf2>
 624:	27 b3       	in	r18, 0x17	; 23
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	02 c0       	rjmp	.+4      	; 0x630 <DIO_init+0x7e>
 62c:	88 0f       	add	r24, r24
 62e:	99 1f       	adc	r25, r25
 630:	6a 95       	dec	r22
 632:	e2 f7       	brpl	.-8      	; 0x62c <DIO_init+0x7a>
 634:	82 2b       	or	r24, r18
 636:	87 bb       	out	0x17, r24	; 23
 638:	08 95       	ret
 63a:	41 11       	cpse	r20, r1
 63c:	0c c0       	rjmp	.+24     	; 0x656 <DIO_init+0xa4>
 63e:	24 b3       	in	r18, 0x14	; 20
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	02 c0       	rjmp	.+4      	; 0x64a <DIO_init+0x98>
 646:	88 0f       	add	r24, r24
 648:	99 1f       	adc	r25, r25
 64a:	6a 95       	dec	r22
 64c:	e2 f7       	brpl	.-8      	; 0x646 <DIO_init+0x94>
 64e:	80 95       	com	r24
 650:	82 23       	and	r24, r18
 652:	84 bb       	out	0x14, r24	; 20
 654:	08 95       	ret
 656:	41 30       	cpi	r20, 0x01	; 1
 658:	29 f5       	brne	.+74     	; 0x6a4 <DIO_init+0xf2>
 65a:	24 b3       	in	r18, 0x14	; 20
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	02 c0       	rjmp	.+4      	; 0x666 <DIO_init+0xb4>
 662:	88 0f       	add	r24, r24
 664:	99 1f       	adc	r25, r25
 666:	6a 95       	dec	r22
 668:	e2 f7       	brpl	.-8      	; 0x662 <DIO_init+0xb0>
 66a:	82 2b       	or	r24, r18
 66c:	84 bb       	out	0x14, r24	; 20
 66e:	08 95       	ret
 670:	41 11       	cpse	r20, r1
 672:	0c c0       	rjmp	.+24     	; 0x68c <DIO_init+0xda>
 674:	21 b3       	in	r18, 0x11	; 17
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	02 c0       	rjmp	.+4      	; 0x680 <DIO_init+0xce>
 67c:	88 0f       	add	r24, r24
 67e:	99 1f       	adc	r25, r25
 680:	6a 95       	dec	r22
 682:	e2 f7       	brpl	.-8      	; 0x67c <DIO_init+0xca>
 684:	80 95       	com	r24
 686:	82 23       	and	r24, r18
 688:	81 bb       	out	0x11, r24	; 17
 68a:	08 95       	ret
 68c:	41 30       	cpi	r20, 0x01	; 1
 68e:	51 f4       	brne	.+20     	; 0x6a4 <DIO_init+0xf2>
 690:	21 b3       	in	r18, 0x11	; 17
 692:	81 e0       	ldi	r24, 0x01	; 1
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	02 c0       	rjmp	.+4      	; 0x69c <DIO_init+0xea>
 698:	88 0f       	add	r24, r24
 69a:	99 1f       	adc	r25, r25
 69c:	6a 95       	dec	r22
 69e:	e2 f7       	brpl	.-8      	; 0x698 <DIO_init+0xe6>
 6a0:	82 2b       	or	r24, r18
 6a2:	81 bb       	out	0x11, r24	; 17
 6a4:	08 95       	ret

000006a6 <DIO_write>:
 6a6:	82 34       	cpi	r24, 0x42	; 66
 6a8:	31 f1       	breq	.+76     	; 0x6f6 <DIO_write+0x50>
 6aa:	18 f4       	brcc	.+6      	; 0x6b2 <DIO_write+0xc>
 6ac:	81 34       	cpi	r24, 0x41	; 65
 6ae:	39 f0       	breq	.+14     	; 0x6be <DIO_write+0x18>
 6b0:	08 95       	ret
 6b2:	83 34       	cpi	r24, 0x43	; 67
 6b4:	e1 f1       	breq	.+120    	; 0x72e <DIO_write+0x88>
 6b6:	84 34       	cpi	r24, 0x44	; 68
 6b8:	09 f4       	brne	.+2      	; 0x6bc <DIO_write+0x16>
 6ba:	54 c0       	rjmp	.+168    	; 0x764 <DIO_write+0xbe>
 6bc:	08 95       	ret
 6be:	41 11       	cpse	r20, r1
 6c0:	0c c0       	rjmp	.+24     	; 0x6da <DIO_write+0x34>
 6c2:	2b b3       	in	r18, 0x1b	; 27
 6c4:	81 e0       	ldi	r24, 0x01	; 1
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <DIO_write+0x28>
 6ca:	88 0f       	add	r24, r24
 6cc:	99 1f       	adc	r25, r25
 6ce:	6a 95       	dec	r22
 6d0:	e2 f7       	brpl	.-8      	; 0x6ca <DIO_write+0x24>
 6d2:	80 95       	com	r24
 6d4:	82 23       	and	r24, r18
 6d6:	8b bb       	out	0x1b, r24	; 27
 6d8:	08 95       	ret
 6da:	41 30       	cpi	r20, 0x01	; 1
 6dc:	09 f0       	breq	.+2      	; 0x6e0 <DIO_write+0x3a>
 6de:	5c c0       	rjmp	.+184    	; 0x798 <DIO_write+0xf2>
 6e0:	2b b3       	in	r18, 0x1b	; 27
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	02 c0       	rjmp	.+4      	; 0x6ec <DIO_write+0x46>
 6e8:	88 0f       	add	r24, r24
 6ea:	99 1f       	adc	r25, r25
 6ec:	6a 95       	dec	r22
 6ee:	e2 f7       	brpl	.-8      	; 0x6e8 <DIO_write+0x42>
 6f0:	82 2b       	or	r24, r18
 6f2:	8b bb       	out	0x1b, r24	; 27
 6f4:	08 95       	ret
 6f6:	41 11       	cpse	r20, r1
 6f8:	0c c0       	rjmp	.+24     	; 0x712 <DIO_write+0x6c>
 6fa:	28 b3       	in	r18, 0x18	; 24
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	02 c0       	rjmp	.+4      	; 0x706 <DIO_write+0x60>
 702:	88 0f       	add	r24, r24
 704:	99 1f       	adc	r25, r25
 706:	6a 95       	dec	r22
 708:	e2 f7       	brpl	.-8      	; 0x702 <DIO_write+0x5c>
 70a:	80 95       	com	r24
 70c:	82 23       	and	r24, r18
 70e:	88 bb       	out	0x18, r24	; 24
 710:	08 95       	ret
 712:	41 30       	cpi	r20, 0x01	; 1
 714:	09 f0       	breq	.+2      	; 0x718 <DIO_write+0x72>
 716:	40 c0       	rjmp	.+128    	; 0x798 <DIO_write+0xf2>
 718:	28 b3       	in	r18, 0x18	; 24
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	02 c0       	rjmp	.+4      	; 0x724 <DIO_write+0x7e>
 720:	88 0f       	add	r24, r24
 722:	99 1f       	adc	r25, r25
 724:	6a 95       	dec	r22
 726:	e2 f7       	brpl	.-8      	; 0x720 <DIO_write+0x7a>
 728:	82 2b       	or	r24, r18
 72a:	88 bb       	out	0x18, r24	; 24
 72c:	08 95       	ret
 72e:	41 11       	cpse	r20, r1
 730:	0c c0       	rjmp	.+24     	; 0x74a <DIO_write+0xa4>
 732:	25 b3       	in	r18, 0x15	; 21
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	02 c0       	rjmp	.+4      	; 0x73e <DIO_write+0x98>
 73a:	88 0f       	add	r24, r24
 73c:	99 1f       	adc	r25, r25
 73e:	6a 95       	dec	r22
 740:	e2 f7       	brpl	.-8      	; 0x73a <DIO_write+0x94>
 742:	80 95       	com	r24
 744:	82 23       	and	r24, r18
 746:	85 bb       	out	0x15, r24	; 21
 748:	08 95       	ret
 74a:	41 30       	cpi	r20, 0x01	; 1
 74c:	29 f5       	brne	.+74     	; 0x798 <DIO_write+0xf2>
 74e:	25 b3       	in	r18, 0x15	; 21
 750:	81 e0       	ldi	r24, 0x01	; 1
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	02 c0       	rjmp	.+4      	; 0x75a <DIO_write+0xb4>
 756:	88 0f       	add	r24, r24
 758:	99 1f       	adc	r25, r25
 75a:	6a 95       	dec	r22
 75c:	e2 f7       	brpl	.-8      	; 0x756 <DIO_write+0xb0>
 75e:	82 2b       	or	r24, r18
 760:	85 bb       	out	0x15, r24	; 21
 762:	08 95       	ret
 764:	41 11       	cpse	r20, r1
 766:	0c c0       	rjmp	.+24     	; 0x780 <DIO_write+0xda>
 768:	22 b3       	in	r18, 0x12	; 18
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	02 c0       	rjmp	.+4      	; 0x774 <DIO_write+0xce>
 770:	88 0f       	add	r24, r24
 772:	99 1f       	adc	r25, r25
 774:	6a 95       	dec	r22
 776:	e2 f7       	brpl	.-8      	; 0x770 <DIO_write+0xca>
 778:	80 95       	com	r24
 77a:	82 23       	and	r24, r18
 77c:	82 bb       	out	0x12, r24	; 18
 77e:	08 95       	ret
 780:	41 30       	cpi	r20, 0x01	; 1
 782:	51 f4       	brne	.+20     	; 0x798 <DIO_write+0xf2>
 784:	22 b3       	in	r18, 0x12	; 18
 786:	81 e0       	ldi	r24, 0x01	; 1
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	02 c0       	rjmp	.+4      	; 0x790 <DIO_write+0xea>
 78c:	88 0f       	add	r24, r24
 78e:	99 1f       	adc	r25, r25
 790:	6a 95       	dec	r22
 792:	e2 f7       	brpl	.-8      	; 0x78c <DIO_write+0xe6>
 794:	82 2b       	or	r24, r18
 796:	82 bb       	out	0x12, r24	; 18
 798:	08 95       	ret

0000079a <DIO_read>:
	}
}

void DIO_read(uint8_t portnum,uint8_t pinnum, uint8_t *value)
{
	switch(portnum)
 79a:	82 34       	cpi	r24, 0x42	; 66
 79c:	01 f1       	breq	.+64     	; 0x7de <DIO_read+0x44>
 79e:	18 f4       	brcc	.+6      	; 0x7a6 <DIO_read+0xc>
 7a0:	81 34       	cpi	r24, 0x41	; 65
 7a2:	39 f0       	breq	.+14     	; 0x7b2 <DIO_read+0x18>
 7a4:	08 95       	ret
 7a6:	83 34       	cpi	r24, 0x43	; 67
 7a8:	81 f1       	breq	.+96     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7aa:	84 34       	cpi	r24, 0x44	; 68
 7ac:	09 f4       	brne	.+2      	; 0x7b0 <DIO_read+0x16>
 7ae:	43 c0       	rjmp	.+134    	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 7b0:	08 95       	ret
	{
		case port_A:
			*value = get_pin(PINA,pinnum); // save the value of pin number (pinnum) in port A in a variable
 7b2:	79 b3       	in	r23, 0x19	; 25
 7b4:	81 e0       	ldi	r24, 0x01	; 1
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	9c 01       	movw	r18, r24
 7ba:	06 2e       	mov	r0, r22
 7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <DIO_read+0x28>
 7be:	22 0f       	add	r18, r18
 7c0:	33 1f       	adc	r19, r19
 7c2:	0a 94       	dec	r0
 7c4:	e2 f7       	brpl	.-8      	; 0x7be <DIO_read+0x24>
 7c6:	87 2f       	mov	r24, r23
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	82 23       	and	r24, r18
 7cc:	93 23       	and	r25, r19
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <DIO_read+0x3a>
 7d0:	95 95       	asr	r25
 7d2:	87 95       	ror	r24
 7d4:	6a 95       	dec	r22
 7d6:	e2 f7       	brpl	.-8      	; 0x7d0 <DIO_read+0x36>
 7d8:	fa 01       	movw	r30, r20
 7da:	80 83       	st	Z, r24
		break;
 7dc:	08 95       	ret
		
		case port_B:
			*value = get_pin(PINB,pinnum); // save the value of pin number (pinnum) in port B in a variable
 7de:	76 b3       	in	r23, 0x16	; 22
 7e0:	81 e0       	ldi	r24, 0x01	; 1
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	9c 01       	movw	r18, r24
 7e6:	06 2e       	mov	r0, r22
 7e8:	02 c0       	rjmp	.+4      	; 0x7ee <DIO_read+0x54>
 7ea:	22 0f       	add	r18, r18
 7ec:	33 1f       	adc	r19, r19
 7ee:	0a 94       	dec	r0
 7f0:	e2 f7       	brpl	.-8      	; 0x7ea <DIO_read+0x50>
 7f2:	87 2f       	mov	r24, r23
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	82 23       	and	r24, r18
 7f8:	93 23       	and	r25, r19
 7fa:	02 c0       	rjmp	.+4      	; 0x800 <__DATA_REGION_LENGTH__>
 7fc:	95 95       	asr	r25
 7fe:	87 95       	ror	r24
 800:	6a 95       	dec	r22
 802:	e2 f7       	brpl	.-8      	; 0x7fc <DIO_read+0x62>
 804:	fa 01       	movw	r30, r20
 806:	80 83       	st	Z, r24
		break;
 808:	08 95       	ret
		
		case port_C:
			*value = get_pin(PINC,pinnum); // save the value of pin number (pinnum) in port C in a variable
 80a:	73 b3       	in	r23, 0x13	; 19
 80c:	81 e0       	ldi	r24, 0x01	; 1
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	9c 01       	movw	r18, r24
 812:	06 2e       	mov	r0, r22
 814:	02 c0       	rjmp	.+4      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 816:	22 0f       	add	r18, r18
 818:	33 1f       	adc	r19, r19
 81a:	0a 94       	dec	r0
 81c:	e2 f7       	brpl	.-8      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 81e:	87 2f       	mov	r24, r23
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	82 23       	and	r24, r18
 824:	93 23       	and	r25, r19
 826:	02 c0       	rjmp	.+4      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 828:	95 95       	asr	r25
 82a:	87 95       	ror	r24
 82c:	6a 95       	dec	r22
 82e:	e2 f7       	brpl	.-8      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 830:	fa 01       	movw	r30, r20
 832:	80 83       	st	Z, r24
		break;
 834:	08 95       	ret
		
		case port_D:
			*value = get_pin(PIND,pinnum); // save the value of pin number (pinnum) in port D in a variable
 836:	70 b3       	in	r23, 0x10	; 16
 838:	81 e0       	ldi	r24, 0x01	; 1
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	9c 01       	movw	r18, r24
 83e:	06 2e       	mov	r0, r22
 840:	02 c0       	rjmp	.+4      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 842:	22 0f       	add	r18, r18
 844:	33 1f       	adc	r19, r19
 846:	0a 94       	dec	r0
 848:	e2 f7       	brpl	.-8      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 84a:	87 2f       	mov	r24, r23
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	82 23       	and	r24, r18
 850:	93 23       	and	r25, r19
 852:	02 c0       	rjmp	.+4      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 854:	95 95       	asr	r25
 856:	87 95       	ror	r24
 858:	6a 95       	dec	r22
 85a:	e2 f7       	brpl	.-8      	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 85c:	fa 01       	movw	r30, r20
 85e:	80 83       	st	Z, r24
 860:	08 95       	ret

00000862 <int_eeprom_w>:
#include "internal_eeprom.h"

void int_eeprom_w(uint8_t addr, uint8_t data)
{
	//Wait for completion of previous write
	while(EECR & (1 << EEWE));
 862:	e1 99       	sbic	0x1c, 1	; 28
 864:	fe cf       	rjmp	.-4      	; 0x862 <int_eeprom_w>
	
	//Set up address and data registers
	EEAR = addr;
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	9f bb       	out	0x1f, r25	; 31
 86a:	8e bb       	out	0x1e, r24	; 30
	EEDR = data;
 86c:	6d bb       	out	0x1d, r22	; 29
	
	//Write logical 1 to EEMWE
	set_pin(EECR,EEMWE);
 86e:	8c b3       	in	r24, 0x1c	; 28
 870:	84 60       	ori	r24, 0x04	; 4
 872:	8c bb       	out	0x1c, r24	; 28
	
	//Start eeprom write by setting EEWE
	set_pin(EECR,EEWE);
 874:	8c b3       	in	r24, 0x1c	; 28
 876:	82 60       	ori	r24, 0x02	; 2
 878:	8c bb       	out	0x1c, r24	; 28
 87a:	08 95       	ret

0000087c <int_eeprom_r>:
}

uint8_t int_eeprom_r(uint8_t addr)
{
	//Wait for completion of previous write
	while(EECR & (1 << EEWE));
 87c:	e1 99       	sbic	0x1c, 1	; 28
 87e:	fe cf       	rjmp	.-4      	; 0x87c <int_eeprom_r>
	
	//Set up address register
	EEAR=addr;
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	9f bb       	out	0x1f, r25	; 31
 884:	8e bb       	out	0x1e, r24	; 30
	
	//Start eeprom read by writing EERE
	set_pin(EECR,EERE);
 886:	8c b3       	in	r24, 0x1c	; 28
 888:	81 60       	ori	r24, 0x01	; 1
 88a:	8c bb       	out	0x1c, r24	; 28
	
	/*Return data from data register*/
	return EEDR;
 88c:	8d b3       	in	r24, 0x1d	; 29
 88e:	08 95       	ret

00000890 <UART_set_BAUD>:
	// Set frame format
	UART_set_frame(Data_bits,Stop_bits);
}
void UART_set_BAUD(uint16_t baud)
{
	UBRRH = (uint8_t)(baud >> 8); // Higher nibble 
 890:	90 bd       	out	0x20, r25	; 32
	UBRRL = (uint8_t)baud; // lower nibble 
 892:	89 b9       	out	0x09, r24	; 9
 894:	08 95       	ret

00000896 <UART_set_frame>:
}
void UART_set_frame(uint8_t bitnum, uint8_t stopbits)
{
	switch(bitnum)
 896:	87 30       	cpi	r24, 0x07	; 7
 898:	f9 f0       	breq	.+62     	; 0x8d8 <UART_set_frame+0x42>
 89a:	28 f4       	brcc	.+10     	; 0x8a6 <UART_set_frame+0x10>
 89c:	85 30       	cpi	r24, 0x05	; 5
 89e:	41 f0       	breq	.+16     	; 0x8b0 <UART_set_frame+0x1a>
 8a0:	86 30       	cpi	r24, 0x06	; 6
 8a2:	81 f0       	breq	.+32     	; 0x8c4 <UART_set_frame+0x2e>
 8a4:	36 c0       	rjmp	.+108    	; 0x912 <UART_set_frame+0x7c>
 8a6:	88 30       	cpi	r24, 0x08	; 8
 8a8:	09 f1       	breq	.+66     	; 0x8ec <UART_set_frame+0x56>
 8aa:	89 30       	cpi	r24, 0x09	; 9
 8ac:	49 f1       	breq	.+82     	; 0x900 <UART_set_frame+0x6a>
 8ae:	31 c0       	rjmp	.+98     	; 0x912 <UART_set_frame+0x7c>
	{
		// 5 bits character size
		case 5:
			clr_pin(UCSRC,UCSZ0);
 8b0:	80 b5       	in	r24, 0x20	; 32
 8b2:	8d 7f       	andi	r24, 0xFD	; 253
 8b4:	80 bd       	out	0x20, r24	; 32
			clr_pin(UCSRC,UCSZ1);
 8b6:	80 b5       	in	r24, 0x20	; 32
 8b8:	8b 7f       	andi	r24, 0xFB	; 251
 8ba:	80 bd       	out	0x20, r24	; 32
			clr_pin(UCSRB,UCSZ2);
 8bc:	8a b1       	in	r24, 0x0a	; 10
 8be:	8b 7f       	andi	r24, 0xFB	; 251
 8c0:	8a b9       	out	0x0a, r24	; 10
		break;
 8c2:	27 c0       	rjmp	.+78     	; 0x912 <UART_set_frame+0x7c>
		// 6 bits character size
		case 6:
			set_pin(UCSRC,UCSZ0);
 8c4:	80 b5       	in	r24, 0x20	; 32
 8c6:	82 60       	ori	r24, 0x02	; 2
 8c8:	80 bd       	out	0x20, r24	; 32
			clr_pin(UCSRC,UCSZ1);
 8ca:	80 b5       	in	r24, 0x20	; 32
 8cc:	8b 7f       	andi	r24, 0xFB	; 251
 8ce:	80 bd       	out	0x20, r24	; 32
			clr_pin(UCSRB,UCSZ2);
 8d0:	8a b1       	in	r24, 0x0a	; 10
 8d2:	8b 7f       	andi	r24, 0xFB	; 251
 8d4:	8a b9       	out	0x0a, r24	; 10
		break;
 8d6:	1d c0       	rjmp	.+58     	; 0x912 <UART_set_frame+0x7c>
		// 7 bits character size
		case 7:
			clr_pin(UCSRC,UCSZ0);
 8d8:	80 b5       	in	r24, 0x20	; 32
 8da:	8d 7f       	andi	r24, 0xFD	; 253
 8dc:	80 bd       	out	0x20, r24	; 32
			set_pin(UCSRC,UCSZ1);
 8de:	80 b5       	in	r24, 0x20	; 32
 8e0:	84 60       	ori	r24, 0x04	; 4
 8e2:	80 bd       	out	0x20, r24	; 32
			clr_pin(UCSRB,UCSZ2);
 8e4:	8a b1       	in	r24, 0x0a	; 10
 8e6:	8b 7f       	andi	r24, 0xFB	; 251
 8e8:	8a b9       	out	0x0a, r24	; 10
		break;
 8ea:	13 c0       	rjmp	.+38     	; 0x912 <UART_set_frame+0x7c>
		// 8 bits character size
		case 8:
			set_pin(UCSRC,UCSZ0);
 8ec:	80 b5       	in	r24, 0x20	; 32
 8ee:	82 60       	ori	r24, 0x02	; 2
 8f0:	80 bd       	out	0x20, r24	; 32
			set_pin(UCSRC,UCSZ1);
 8f2:	80 b5       	in	r24, 0x20	; 32
 8f4:	84 60       	ori	r24, 0x04	; 4
 8f6:	80 bd       	out	0x20, r24	; 32
			clr_pin(UCSRB,UCSZ2);
 8f8:	8a b1       	in	r24, 0x0a	; 10
 8fa:	8b 7f       	andi	r24, 0xFB	; 251
 8fc:	8a b9       	out	0x0a, r24	; 10
		break;
 8fe:	09 c0       	rjmp	.+18     	; 0x912 <UART_set_frame+0x7c>
		// 9 bits character size
		case 9:
			set_pin(UCSRC,UCSZ0);
 900:	80 b5       	in	r24, 0x20	; 32
 902:	82 60       	ori	r24, 0x02	; 2
 904:	80 bd       	out	0x20, r24	; 32
			set_pin(UCSRC,UCSZ1);
 906:	80 b5       	in	r24, 0x20	; 32
 908:	84 60       	ori	r24, 0x04	; 4
 90a:	80 bd       	out	0x20, r24	; 32
			set_pin(UCSRB,UCSZ2);
 90c:	8a b1       	in	r24, 0x0a	; 10
 90e:	84 60       	ori	r24, 0x04	; 4
 910:	8a b9       	out	0x0a, r24	; 10
		default:
		{
			// error handling
		}
	}
	switch(stopbits)
 912:	61 30       	cpi	r22, 0x01	; 1
 914:	19 f0       	breq	.+6      	; 0x91c <UART_set_frame+0x86>
 916:	62 30       	cpi	r22, 0x02	; 2
 918:	29 f0       	breq	.+10     	; 0x924 <UART_set_frame+0x8e>
 91a:	08 95       	ret
	{
		// 1 stop bit
		case 1:
			clr_pin(UCSRC,USBS);
 91c:	80 b5       	in	r24, 0x20	; 32
 91e:	87 7f       	andi	r24, 0xF7	; 247
 920:	80 bd       	out	0x20, r24	; 32
		break;
 922:	08 95       	ret
		// 2 stop bit
		case 2:
			set_pin(UCSRC,USBS);
 924:	80 b5       	in	r24, 0x20	; 32
 926:	88 60       	ori	r24, 0x08	; 8
 928:	80 bd       	out	0x20, r24	; 32
 92a:	08 95       	ret

0000092c <UART_init>:
#include "UART_1.h"

void UART_init()
{
	// Set baud rate
	UART_set_BAUD(BAUD_rate);
 92c:	83 e3       	ldi	r24, 0x33	; 51
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	0e 94 48 04 	call	0x890	; 0x890 <UART_set_BAUD>
	
	// Enable receiver and transmitter
	set_pin(UCSRB,RXEN);
 934:	8a b1       	in	r24, 0x0a	; 10
 936:	80 61       	ori	r24, 0x10	; 16
 938:	8a b9       	out	0x0a, r24	; 10
	set_pin(UCSRB,TXEN);
 93a:	8a b1       	in	r24, 0x0a	; 10
 93c:	88 60       	ori	r24, 0x08	; 8
 93e:	8a b9       	out	0x0a, r24	; 10
	
	// Set frame format
	UART_set_frame(Data_bits,Stop_bits);
 940:	61 e0       	ldi	r22, 0x01	; 1
 942:	88 e0       	ldi	r24, 0x08	; 8
 944:	0e 94 4b 04 	call	0x896	; 0x896 <UART_set_frame>
 948:	08 95       	ret

0000094a <UART_transmit>:
}

void UART_transmit(uint8_t data)
{
	// Wait for empty transmit buffer
	while ( !( UCSRA & (1 << UDRE)) );
 94a:	5d 9b       	sbis	0x0b, 5	; 11
 94c:	fe cf       	rjmp	.-4      	; 0x94a <UART_transmit>
	
	// Put data into buffer, sends the data
	UDR = data;
 94e:	8c b9       	out	0x0c, r24	; 12
 950:	08 95       	ret

00000952 <UART_transmitString>:
}

void UART_transmitString(uint8_t *string_data)
{
 952:	0f 93       	push	r16
 954:	1f 93       	push	r17
 956:	cf 93       	push	r28
 958:	8c 01       	movw	r16, r24
	for(uint8_t cnt=0; *(string_data + cnt) != '\0'; cnt++)
 95a:	c0 e0       	ldi	r28, 0x00	; 0
 95c:	03 c0       	rjmp	.+6      	; 0x964 <UART_transmitString+0x12>
		UART_transmit(*(string_data + cnt));
 95e:	0e 94 a5 04 	call	0x94a	; 0x94a <UART_transmit>
	UDR = data;
}

void UART_transmitString(uint8_t *string_data)
{
	for(uint8_t cnt=0; *(string_data + cnt) != '\0'; cnt++)
 962:	cf 5f       	subi	r28, 0xFF	; 255
 964:	f8 01       	movw	r30, r16
 966:	ec 0f       	add	r30, r28
 968:	f1 1d       	adc	r31, r1
 96a:	80 81       	ld	r24, Z
 96c:	81 11       	cpse	r24, r1
 96e:	f7 cf       	rjmp	.-18     	; 0x95e <UART_transmitString+0xc>
		UART_transmit(*(string_data + cnt));
	UART_transmit('\0');
 970:	0e 94 a5 04 	call	0x94a	; 0x94a <UART_transmit>
}
 974:	cf 91       	pop	r28
 976:	1f 91       	pop	r17
 978:	0f 91       	pop	r16
 97a:	08 95       	ret

0000097c <UART_receive>:

uint8_t UART_receive()
{
	// Wait for data to be received 
	while ( !( UCSRA & (1 << RXC)) );
 97c:	5f 9b       	sbis	0x0b, 7	; 11
 97e:	fe cf       	rjmp	.-4      	; 0x97c <UART_receive>
	
	// Get and return received data from buffer 
	return UDR;
 980:	8c b1       	in	r24, 0x0c	; 12
 982:	08 95       	ret

00000984 <_exit>:
 984:	f8 94       	cli

00000986 <__stop_program>:
 986:	ff cf       	rjmp	.-2      	; 0x986 <__stop_program>
