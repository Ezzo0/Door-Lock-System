
MCU_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000069a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  0000069a  0000072e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800092  00800092  00000760  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000790  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  000007cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011dd  00000000  00000000  000008e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ff  00000000  00000000  00001ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b47  00000000  00000000  000024c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  00003008  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000555  00000000  00000000  000031fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000075b  00000000  00000000  00003751  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00003eac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e9       	ldi	r30, 0x9A	; 154
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 39       	cpi	r26, 0x92	; 146
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e9       	ldi	r26, 0x92	; 146
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3a       	cpi	r26, 0xA4	; 164
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 55 01 	call	0x2aa	; 0x2aa <main>
  8a:	0c 94 4b 03 	jmp	0x696	; 0x696 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Keypad_init>:
						 {'c','0','=','+'}};

void Keypad_init()
{
	// Initialization of rows
	DIO_init(port_A,PIN_4,OUT);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	64 e0       	ldi	r22, 0x04	; 4
  96:	81 e4       	ldi	r24, 0x41	; 65
  98:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_init>
	DIO_init(port_A,PIN_5,OUT);
  9c:	41 e0       	ldi	r20, 0x01	; 1
  9e:	65 e0       	ldi	r22, 0x05	; 5
  a0:	81 e4       	ldi	r24, 0x41	; 65
  a2:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_init>
	DIO_init(port_A,PIN_6,OUT);
  a6:	41 e0       	ldi	r20, 0x01	; 1
  a8:	66 e0       	ldi	r22, 0x06	; 6
  aa:	81 e4       	ldi	r24, 0x41	; 65
  ac:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_init>
	DIO_init(port_A,PIN_7,OUT);
  b0:	41 e0       	ldi	r20, 0x01	; 1
  b2:	67 e0       	ldi	r22, 0x07	; 7
  b4:	81 e4       	ldi	r24, 0x41	; 65
  b6:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_init>
	
	// Initialization of columns
	DIO_init(port_A,PIN_0,IN);
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	81 e4       	ldi	r24, 0x41	; 65
  c0:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_init>
	DIO_init(port_A,PIN_1,IN);
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	61 e0       	ldi	r22, 0x01	; 1
  c8:	81 e4       	ldi	r24, 0x41	; 65
  ca:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_init>
	DIO_init(port_A,PIN_2,IN);
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	62 e0       	ldi	r22, 0x02	; 2
  d2:	81 e4       	ldi	r24, 0x41	; 65
  d4:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_init>
	DIO_init(port_A,PIN_3,IN);
  d8:	40 e0       	ldi	r20, 0x00	; 0
  da:	63 e0       	ldi	r22, 0x03	; 3
  dc:	81 e4       	ldi	r24, 0x41	; 65
  de:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_init>
	
	// give logic one to all the keypad pins
	PORTA = 0xFF;
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	8b bb       	out	0x1b, r24	; 27
  e6:	08 95       	ret

000000e8 <Keypad_pressed>:
}

uint8_t Keypad_pressed()
{
  e8:	cf 92       	push	r12
  ea:	df 92       	push	r13
  ec:	ef 92       	push	r14
  ee:	ff 92       	push	r15
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	1f 92       	push	r1
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
	uint8_t key = NOT_pressed; // variable for the pressed key
	uint8_t flag = 0; // Flag to indicate that a key was pressed or not
	uint8_t value; // variable for storing the value of the pin
	for(int rows_cnt = 0; rows_cnt < 4; ++rows_cnt)
  fe:	e1 2c       	mov	r14, r1
 100:	f1 2c       	mov	r15, r1
}

uint8_t Keypad_pressed()
{
	uint8_t key = NOT_pressed; // variable for the pressed key
	uint8_t flag = 0; // Flag to indicate that a key was pressed or not
 102:	d1 2c       	mov	r13, r1
	PORTA = 0xFF;
}

uint8_t Keypad_pressed()
{
	uint8_t key = NOT_pressed; // variable for the pressed key
 104:	c1 2c       	mov	r12, r1
	uint8_t flag = 0; // Flag to indicate that a key was pressed or not
	uint8_t value; // variable for storing the value of the pin
	for(int rows_cnt = 0; rows_cnt < 4; ++rows_cnt)
 106:	4c c0       	rjmp	.+152    	; 0x1a0 <Keypad_pressed+0xb8>
	{
		DIO_write(port_A,rows[rows_cnt],LOW); // give each row pin a low value
 108:	40 e0       	ldi	r20, 0x00	; 0
 10a:	f7 01       	movw	r30, r14
 10c:	ec 58       	subi	r30, 0x8C	; 140
 10e:	ff 4f       	sbci	r31, 0xFF	; 255
 110:	60 81       	ld	r22, Z
 112:	81 e4       	ldi	r24, 0x41	; 65
 114:	0e 94 f7 01 	call	0x3ee	; 0x3ee <DIO_write>
		for (int columns_cnt = 0; columns_cnt < 4; ++columns_cnt)
 118:	00 e0       	ldi	r16, 0x00	; 0
 11a:	10 e0       	ldi	r17, 0x00	; 0
 11c:	31 c0       	rjmp	.+98     	; 0x180 <Keypad_pressed+0x98>
		{
			DIO_read(port_A,columns[columns_cnt],&value);
 11e:	ae 01       	movw	r20, r28
 120:	4f 5f       	subi	r20, 0xFF	; 255
 122:	5f 4f       	sbci	r21, 0xFF	; 255
 124:	f8 01       	movw	r30, r16
 126:	e0 59       	subi	r30, 0x90	; 144
 128:	ff 4f       	sbci	r31, 0xFF	; 255
 12a:	60 81       	ld	r22, Z
 12c:	81 e4       	ldi	r24, 0x41	; 65
 12e:	0e 94 71 02 	call	0x4e2	; 0x4e2 <DIO_read>
			if(value == LOW)
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	81 11       	cpse	r24, r1
 136:	22 c0       	rjmp	.+68     	; 0x17c <Keypad_pressed+0x94>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	87 e8       	ldi	r24, 0x87	; 135
 13a:	93 e1       	ldi	r25, 0x13	; 19
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <Keypad_pressed+0x54>
 140:	00 c0       	rjmp	.+0      	; 0x142 <Keypad_pressed+0x5a>
 142:	00 00       	nop
 144:	0a c0       	rjmp	.+20     	; 0x15a <Keypad_pressed+0x72>
			{
				_delay_ms(20); // for solving the bouncing problem
				
				// Busy wait for long press
				while(value == LOW)
					DIO_read(port_A,columns[columns_cnt],&value);
 146:	ae 01       	movw	r20, r28
 148:	4f 5f       	subi	r20, 0xFF	; 255
 14a:	5f 4f       	sbci	r21, 0xFF	; 255
 14c:	f8 01       	movw	r30, r16
 14e:	e0 59       	subi	r30, 0x90	; 144
 150:	ff 4f       	sbci	r31, 0xFF	; 255
 152:	60 81       	ld	r22, Z
 154:	81 e4       	ldi	r24, 0x41	; 65
 156:	0e 94 71 02 	call	0x4e2	; 0x4e2 <DIO_read>
			if(value == LOW)
			{
				_delay_ms(20); // for solving the bouncing problem
				
				// Busy wait for long press
				while(value == LOW)
 15a:	89 81       	ldd	r24, Y+1	; 0x01
 15c:	88 23       	and	r24, r24
 15e:	99 f3       	breq	.-26     	; 0x146 <Keypad_pressed+0x5e>
					DIO_read(port_A,columns[columns_cnt],&value);
				
				key = keypad[rows_cnt][columns_cnt]; // get the pressed key
 160:	c7 01       	movw	r24, r14
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	80 5a       	subi	r24, 0xA0	; 160
 16c:	9f 4f       	sbci	r25, 0xFF	; 255
 16e:	fc 01       	movw	r30, r24
 170:	e0 0f       	add	r30, r16
 172:	f1 1f       	adc	r31, r17
 174:	c0 80       	ld	r12, Z
				flag = 1; // a key was pressed
 176:	dd 24       	eor	r13, r13
 178:	d3 94       	inc	r13
				break;
 17a:	05 c0       	rjmp	.+10     	; 0x186 <Keypad_pressed+0x9e>
	uint8_t flag = 0; // Flag to indicate that a key was pressed or not
	uint8_t value; // variable for storing the value of the pin
	for(int rows_cnt = 0; rows_cnt < 4; ++rows_cnt)
	{
		DIO_write(port_A,rows[rows_cnt],LOW); // give each row pin a low value
		for (int columns_cnt = 0; columns_cnt < 4; ++columns_cnt)
 17c:	0f 5f       	subi	r16, 0xFF	; 255
 17e:	1f 4f       	sbci	r17, 0xFF	; 255
 180:	04 30       	cpi	r16, 0x04	; 4
 182:	11 05       	cpc	r17, r1
 184:	64 f2       	brlt	.-104    	; 0x11e <Keypad_pressed+0x36>
				key = keypad[rows_cnt][columns_cnt]; // get the pressed key
				flag = 1; // a key was pressed
				break;
			}
		}
		DIO_write(port_A,rows[rows_cnt],HIGH); // return the pin to high value again
 186:	41 e0       	ldi	r20, 0x01	; 1
 188:	f7 01       	movw	r30, r14
 18a:	ec 58       	subi	r30, 0x8C	; 140
 18c:	ff 4f       	sbci	r31, 0xFF	; 255
 18e:	60 81       	ld	r22, Z
 190:	81 e4       	ldi	r24, 0x41	; 65
 192:	0e 94 f7 01 	call	0x3ee	; 0x3ee <DIO_write>
		if(flag)
 196:	d1 10       	cpse	r13, r1
 198:	08 c0       	rjmp	.+16     	; 0x1aa <Keypad_pressed+0xc2>
uint8_t Keypad_pressed()
{
	uint8_t key = NOT_pressed; // variable for the pressed key
	uint8_t flag = 0; // Flag to indicate that a key was pressed or not
	uint8_t value; // variable for storing the value of the pin
	for(int rows_cnt = 0; rows_cnt < 4; ++rows_cnt)
 19a:	9f ef       	ldi	r25, 0xFF	; 255
 19c:	e9 1a       	sub	r14, r25
 19e:	f9 0a       	sbc	r15, r25
 1a0:	84 e0       	ldi	r24, 0x04	; 4
 1a2:	e8 16       	cp	r14, r24
 1a4:	f1 04       	cpc	r15, r1
 1a6:	0c f4       	brge	.+2      	; 0x1aa <Keypad_pressed+0xc2>
 1a8:	af cf       	rjmp	.-162    	; 0x108 <Keypad_pressed+0x20>
		if(flag)
			break;
	}
	// return the pressed key
	return key;
 1aa:	8c 2d       	mov	r24, r12
 1ac:	0f 90       	pop	r0
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	1f 91       	pop	r17
 1b4:	0f 91       	pop	r16
 1b6:	ff 90       	pop	r15
 1b8:	ef 90       	pop	r14
 1ba:	df 90       	pop	r13
 1bc:	cf 90       	pop	r12
 1be:	08 95       	ret

000001c0 <LCD_8_bit_sendCommand>:
	LCD_8_bit_sendCommand(0x10);
}

void LCD_8_bit_cursor_right()
{
	LCD_8_bit_sendCommand(0x14);
 1c0:	85 bb       	out	0x15, r24	; 21
 1c2:	82 b3       	in	r24, 0x12	; 18
 1c4:	8f 7d       	andi	r24, 0xDF	; 223
 1c6:	82 bb       	out	0x12, r24	; 18
 1c8:	82 b3       	in	r24, 0x12	; 18
 1ca:	8f 7b       	andi	r24, 0xBF	; 191
 1cc:	82 bb       	out	0x12, r24	; 18
 1ce:	82 b3       	in	r24, 0x12	; 18
 1d0:	80 68       	ori	r24, 0x80	; 128
 1d2:	82 bb       	out	0x12, r24	; 18
 1d4:	89 ef       	ldi	r24, 0xF9	; 249
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <LCD_8_bit_sendCommand+0x18>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <LCD_8_bit_sendCommand+0x1e>
 1de:	00 00       	nop
 1e0:	82 b3       	in	r24, 0x12	; 18
 1e2:	8f 77       	andi	r24, 0x7F	; 127
 1e4:	82 bb       	out	0x12, r24	; 18
 1e6:	8d ee       	ldi	r24, 0xED	; 237
 1e8:	92 e0       	ldi	r25, 0x02	; 2
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <LCD_8_bit_sendCommand+0x2a>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <LCD_8_bit_sendCommand+0x30>
 1f0:	00 00       	nop
 1f2:	08 95       	ret

000001f4 <LCD_8_bit_sendChar>:
 1f4:	85 bb       	out	0x15, r24	; 21
 1f6:	82 b3       	in	r24, 0x12	; 18
 1f8:	80 62       	ori	r24, 0x20	; 32
 1fa:	82 bb       	out	0x12, r24	; 18
 1fc:	82 b3       	in	r24, 0x12	; 18
 1fe:	8f 7b       	andi	r24, 0xBF	; 191
 200:	82 bb       	out	0x12, r24	; 18
 202:	82 b3       	in	r24, 0x12	; 18
 204:	80 68       	ori	r24, 0x80	; 128
 206:	82 bb       	out	0x12, r24	; 18
 208:	89 ef       	ldi	r24, 0xF9	; 249
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <LCD_8_bit_sendChar+0x18>
 210:	00 c0       	rjmp	.+0      	; 0x212 <LCD_8_bit_sendChar+0x1e>
 212:	00 00       	nop
 214:	82 b3       	in	r24, 0x12	; 18
 216:	8f 77       	andi	r24, 0x7F	; 127
 218:	82 bb       	out	0x12, r24	; 18
 21a:	8d ee       	ldi	r24, 0xED	; 237
 21c:	92 e0       	ldi	r25, 0x02	; 2
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <LCD_8_bit_sendChar+0x2a>
 222:	00 c0       	rjmp	.+0      	; 0x224 <LCD_8_bit_sendChar+0x30>
 224:	00 00       	nop
 226:	08 95       	ret

00000228 <LCD_8_bit_sendString>:
	LCD_8_bit_sendCommand(0xC0); // Cursor at 2nd line

}

void LCD_8_bit_sendString(uint8_t *string_data)
{
 228:	0f 93       	push	r16
 22a:	1f 93       	push	r17
 22c:	cf 93       	push	r28
 22e:	8c 01       	movw	r16, r24
	for (uint8_t cnt = 0; *(string_data+cnt) != '\0'; ++cnt) // Loop for sending each char in the string to the LCD
 230:	c0 e0       	ldi	r28, 0x00	; 0
 232:	03 c0       	rjmp	.+6      	; 0x23a <LCD_8_bit_sendString+0x12>
		LCD_8_bit_sendChar(*(string_data+cnt)); // call the writing function on LCD
 234:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_8_bit_sendChar>

}

void LCD_8_bit_sendString(uint8_t *string_data)
{
	for (uint8_t cnt = 0; *(string_data+cnt) != '\0'; ++cnt) // Loop for sending each char in the string to the LCD
 238:	cf 5f       	subi	r28, 0xFF	; 255
 23a:	f8 01       	movw	r30, r16
 23c:	ec 0f       	add	r30, r28
 23e:	f1 1d       	adc	r31, r1
 240:	80 81       	ld	r24, Z
 242:	81 11       	cpse	r24, r1
 244:	f7 cf       	rjmp	.-18     	; 0x234 <LCD_8_bit_sendString+0xc>
		LCD_8_bit_sendChar(*(string_data+cnt)); // call the writing function on LCD
 246:	cf 91       	pop	r28
 248:	1f 91       	pop	r17
 24a:	0f 91       	pop	r16
 24c:	08 95       	ret

0000024e <LCD_8_bit_init>:

uint8_t str[] = {'W','e','l','c','o','m','e','.','.','.'};

void LCD_8_bit_init()
{
	LCD_commandData_dir = 0xFF; // Make LCD command port direction as o/p
 24e:	8f ef       	ldi	r24, 0xFF	; 255
 250:	84 bb       	out	0x14, r24	; 20
	// Make LCD control pins in the MCU direction as o/p
	DIO_init(Control_PINS_port,RS_PIN,OUT);
 252:	41 e0       	ldi	r20, 0x01	; 1
 254:	65 e0       	ldi	r22, 0x05	; 5
 256:	84 e4       	ldi	r24, 0x44	; 68
 258:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_init>
	DIO_init(Control_PINS_port,RW_PIN,OUT);
 25c:	41 e0       	ldi	r20, 0x01	; 1
 25e:	66 e0       	ldi	r22, 0x06	; 6
 260:	84 e4       	ldi	r24, 0x44	; 68
 262:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_init>
	DIO_init(Control_PINS_port,E_PIN,OUT);
 266:	41 e0       	ldi	r20, 0x01	; 1
 268:	67 e0       	ldi	r22, 0x07	; 7
 26a:	84 e4       	ldi	r24, 0x44	; 68
 26c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_init>
 270:	87 e8       	ldi	r24, 0x87	; 135
 272:	93 e1       	ldi	r25, 0x13	; 19
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <LCD_8_bit_init+0x26>
 278:	00 c0       	rjmp	.+0      	; 0x27a <LCD_8_bit_init+0x2c>
 27a:	00 00       	nop
	// LCD power on delay
	_delay_ms(20);
	LCD_8_bit_sendCommand(0x38); // Initialization of 16x2 LCD in 8 bit mode
 27c:	88 e3       	ldi	r24, 0x38	; 56
 27e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_8_bit_sendCommand>
	LCD_8_bit_sendCommand(0x0E); // Display on and cursor blinking
 282:	8e e0       	ldi	r24, 0x0E	; 14
 284:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_8_bit_sendCommand>
	LCD_8_bit_sendCommand(0x06); // Auto increment for the cursor
 288:	86 e0       	ldi	r24, 0x06	; 6
 28a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_8_bit_sendCommand>
	LCD_8_bit_sendCommand(0x01); // Clear Display
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_8_bit_sendCommand>
	LCD_8_bit_sendCommand(0x80); // Cursor at home position
 294:	80 e8       	ldi	r24, 0x80	; 128
 296:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_8_bit_sendCommand>
	LCD_8_bit_sendString(str); // Displaying welcome word
 29a:	88 e7       	ldi	r24, 0x78	; 120
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 14 01 	call	0x228	; 0x228 <LCD_8_bit_sendString>
	LCD_8_bit_sendCommand(0xC0); // Cursor at 2nd line
 2a2:	80 ec       	ldi	r24, 0xC0	; 192
 2a4:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <LCD_8_bit_sendCommand>
 2a8:	08 95       	ret

000002aa <main>:
uint8_t clr[16] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};
uint8_t ct =0;
uint8_t temp=0;
int main(void)
{
	Keypad_init();
 2aa:	0e 94 49 00 	call	0x92	; 0x92 <Keypad_init>
	LCD_8_bit_init();
 2ae:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_8_bit_init>
	UART_init();
 2b2:	0e 94 23 03 	call	0x646	; 0x646 <UART_init>

    while (1) 
    {
		temp = Keypad_pressed();
 2b6:	0e 94 74 00 	call	0xe8	; 0xe8 <Keypad_pressed>
 2ba:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__data_end>
		if( temp == '=')
 2be:	8d 33       	cpi	r24, 0x3D	; 61
 2c0:	29 f4       	brne	.+10     	; 0x2cc <main+0x22>
		{
			UART_transmitString(data);
 2c2:	84 e9       	ldi	r24, 0x94	; 148
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 36 03 	call	0x66c	; 0x66c <UART_transmitString>
 2ca:	f5 cf       	rjmp	.-22     	; 0x2b6 <main+0xc>
		}
		else if(temp != 'c')
 2cc:	83 36       	cpi	r24, 0x63	; 99
 2ce:	81 f0       	breq	.+32     	; 0x2f0 <main+0x46>
		{
			data[ct] = temp;
 2d0:	e0 91 93 00 	lds	r30, 0x0093	; 0x800093 <ct>
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	ec 56       	subi	r30, 0x6C	; 108
 2d8:	ff 4f       	sbci	r31, 0xFF	; 255
 2da:	80 83       	st	Z, r24
			
			if(data[ct] != NOT_pressed)
 2dc:	88 23       	and	r24, r24
 2de:	59 f3       	breq	.-42     	; 0x2b6 <main+0xc>
			{
				LCD_8_bit_sendChar(data[ct]);
 2e0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_8_bit_sendChar>
				ct++;
 2e4:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <ct>
 2e8:	8f 5f       	subi	r24, 0xFF	; 255
 2ea:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <ct>
 2ee:	e3 cf       	rjmp	.-58     	; 0x2b6 <main+0xc>
			}
		}else{
			UART_transmitString(clr);
 2f0:	82 e8       	ldi	r24, 0x82	; 130
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 36 03 	call	0x66c	; 0x66c <UART_transmitString>
 2f8:	de cf       	rjmp	.-68     	; 0x2b6 <main+0xc>

000002fa <DIO_init>:
		case port_C:
			tgl_pin(PORTC,pinnum); // toggle pin number (pinnum) in port C
		break;
		
		case port_D:
			tgl_pin(PORTD,pinnum); // toggle pin number (pinnum) in port D
 2fa:	82 34       	cpi	r24, 0x42	; 66
 2fc:	31 f1       	breq	.+76     	; 0x34a <DIO_init+0x50>
 2fe:	18 f4       	brcc	.+6      	; 0x306 <DIO_init+0xc>
 300:	81 34       	cpi	r24, 0x41	; 65
 302:	39 f0       	breq	.+14     	; 0x312 <DIO_init+0x18>
 304:	08 95       	ret
 306:	83 34       	cpi	r24, 0x43	; 67
 308:	e1 f1       	breq	.+120    	; 0x382 <DIO_init+0x88>
 30a:	84 34       	cpi	r24, 0x44	; 68
 30c:	09 f4       	brne	.+2      	; 0x310 <DIO_init+0x16>
 30e:	54 c0       	rjmp	.+168    	; 0x3b8 <DIO_init+0xbe>
 310:	08 95       	ret
 312:	41 11       	cpse	r20, r1
 314:	0c c0       	rjmp	.+24     	; 0x32e <DIO_init+0x34>
 316:	2a b3       	in	r18, 0x1a	; 26
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	02 c0       	rjmp	.+4      	; 0x322 <DIO_init+0x28>
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	6a 95       	dec	r22
 324:	e2 f7       	brpl	.-8      	; 0x31e <DIO_init+0x24>
 326:	80 95       	com	r24
 328:	82 23       	and	r24, r18
 32a:	8a bb       	out	0x1a, r24	; 26
 32c:	08 95       	ret
 32e:	41 30       	cpi	r20, 0x01	; 1
 330:	09 f0       	breq	.+2      	; 0x334 <DIO_init+0x3a>
 332:	5c c0       	rjmp	.+184    	; 0x3ec <DIO_init+0xf2>
 334:	2a b3       	in	r18, 0x1a	; 26
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_init+0x46>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	6a 95       	dec	r22
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_init+0x42>
 344:	82 2b       	or	r24, r18
 346:	8a bb       	out	0x1a, r24	; 26
 348:	08 95       	ret
 34a:	41 11       	cpse	r20, r1
 34c:	0c c0       	rjmp	.+24     	; 0x366 <DIO_init+0x6c>
 34e:	27 b3       	in	r18, 0x17	; 23
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	02 c0       	rjmp	.+4      	; 0x35a <DIO_init+0x60>
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	6a 95       	dec	r22
 35c:	e2 f7       	brpl	.-8      	; 0x356 <DIO_init+0x5c>
 35e:	80 95       	com	r24
 360:	82 23       	and	r24, r18
 362:	87 bb       	out	0x17, r24	; 23
 364:	08 95       	ret
 366:	41 30       	cpi	r20, 0x01	; 1
 368:	09 f0       	breq	.+2      	; 0x36c <DIO_init+0x72>
 36a:	40 c0       	rjmp	.+128    	; 0x3ec <DIO_init+0xf2>
 36c:	27 b3       	in	r18, 0x17	; 23
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	02 c0       	rjmp	.+4      	; 0x378 <DIO_init+0x7e>
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	6a 95       	dec	r22
 37a:	e2 f7       	brpl	.-8      	; 0x374 <DIO_init+0x7a>
 37c:	82 2b       	or	r24, r18
 37e:	87 bb       	out	0x17, r24	; 23
 380:	08 95       	ret
 382:	41 11       	cpse	r20, r1
 384:	0c c0       	rjmp	.+24     	; 0x39e <DIO_init+0xa4>
 386:	24 b3       	in	r18, 0x14	; 20
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_init+0x98>
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	6a 95       	dec	r22
 394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_init+0x94>
 396:	80 95       	com	r24
 398:	82 23       	and	r24, r18
 39a:	84 bb       	out	0x14, r24	; 20
 39c:	08 95       	ret
 39e:	41 30       	cpi	r20, 0x01	; 1
 3a0:	29 f5       	brne	.+74     	; 0x3ec <DIO_init+0xf2>
 3a2:	24 b3       	in	r18, 0x14	; 20
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_init+0xb4>
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	6a 95       	dec	r22
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_init+0xb0>
 3b2:	82 2b       	or	r24, r18
 3b4:	84 bb       	out	0x14, r24	; 20
 3b6:	08 95       	ret
 3b8:	41 11       	cpse	r20, r1
 3ba:	0c c0       	rjmp	.+24     	; 0x3d4 <DIO_init+0xda>
 3bc:	21 b3       	in	r18, 0x11	; 17
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <DIO_init+0xce>
 3c4:	88 0f       	add	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	6a 95       	dec	r22
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <DIO_init+0xca>
 3cc:	80 95       	com	r24
 3ce:	82 23       	and	r24, r18
 3d0:	81 bb       	out	0x11, r24	; 17
 3d2:	08 95       	ret
 3d4:	41 30       	cpi	r20, 0x01	; 1
 3d6:	51 f4       	brne	.+20     	; 0x3ec <DIO_init+0xf2>
 3d8:	21 b3       	in	r18, 0x11	; 17
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <DIO_init+0xea>
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	6a 95       	dec	r22
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <DIO_init+0xe6>
 3e8:	82 2b       	or	r24, r18
 3ea:	81 bb       	out	0x11, r24	; 17
 3ec:	08 95       	ret

000003ee <DIO_write>:
 3ee:	82 34       	cpi	r24, 0x42	; 66
 3f0:	31 f1       	breq	.+76     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 3f2:	18 f4       	brcc	.+6      	; 0x3fa <DIO_write+0xc>
 3f4:	81 34       	cpi	r24, 0x41	; 65
 3f6:	39 f0       	breq	.+14     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3f8:	08 95       	ret
 3fa:	83 34       	cpi	r24, 0x43	; 67
 3fc:	e1 f1       	breq	.+120    	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 3fe:	84 34       	cpi	r24, 0x44	; 68
 400:	09 f4       	brne	.+2      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 402:	54 c0       	rjmp	.+168    	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 404:	08 95       	ret
 406:	41 11       	cpse	r20, r1
 408:	0c c0       	rjmp	.+24     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 40a:	2b b3       	in	r18, 0x1b	; 27
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	02 c0       	rjmp	.+4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 412:	88 0f       	add	r24, r24
 414:	99 1f       	adc	r25, r25
 416:	6a 95       	dec	r22
 418:	e2 f7       	brpl	.-8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 41a:	80 95       	com	r24
 41c:	82 23       	and	r24, r18
 41e:	8b bb       	out	0x1b, r24	; 27
 420:	08 95       	ret
 422:	41 30       	cpi	r20, 0x01	; 1
 424:	09 f0       	breq	.+2      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 426:	5c c0       	rjmp	.+184    	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 428:	2b b3       	in	r18, 0x1b	; 27
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	02 c0       	rjmp	.+4      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	6a 95       	dec	r22
 436:	e2 f7       	brpl	.-8      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 438:	82 2b       	or	r24, r18
 43a:	8b bb       	out	0x1b, r24	; 27
 43c:	08 95       	ret
 43e:	41 11       	cpse	r20, r1
 440:	0c c0       	rjmp	.+24     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 442:	28 b3       	in	r18, 0x18	; 24
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	02 c0       	rjmp	.+4      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	6a 95       	dec	r22
 450:	e2 f7       	brpl	.-8      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 452:	80 95       	com	r24
 454:	82 23       	and	r24, r18
 456:	88 bb       	out	0x18, r24	; 24
 458:	08 95       	ret
 45a:	41 30       	cpi	r20, 0x01	; 1
 45c:	09 f0       	breq	.+2      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 45e:	40 c0       	rjmp	.+128    	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 460:	28 b3       	in	r18, 0x18	; 24
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	02 c0       	rjmp	.+4      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 468:	88 0f       	add	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	6a 95       	dec	r22
 46e:	e2 f7       	brpl	.-8      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 470:	82 2b       	or	r24, r18
 472:	88 bb       	out	0x18, r24	; 24
 474:	08 95       	ret
 476:	41 11       	cpse	r20, r1
 478:	0c c0       	rjmp	.+24     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 47a:	25 b3       	in	r18, 0x15	; 21
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	02 c0       	rjmp	.+4      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 482:	88 0f       	add	r24, r24
 484:	99 1f       	adc	r25, r25
 486:	6a 95       	dec	r22
 488:	e2 f7       	brpl	.-8      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 48a:	80 95       	com	r24
 48c:	82 23       	and	r24, r18
 48e:	85 bb       	out	0x15, r24	; 21
 490:	08 95       	ret
 492:	41 30       	cpi	r20, 0x01	; 1
 494:	29 f5       	brne	.+74     	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 496:	25 b3       	in	r18, 0x15	; 21
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 49e:	88 0f       	add	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	6a 95       	dec	r22
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 4a6:	82 2b       	or	r24, r18
 4a8:	85 bb       	out	0x15, r24	; 21
 4aa:	08 95       	ret
 4ac:	41 11       	cpse	r20, r1
 4ae:	0c c0       	rjmp	.+24     	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 4b0:	22 b3       	in	r18, 0x12	; 18
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 4b8:	88 0f       	add	r24, r24
 4ba:	99 1f       	adc	r25, r25
 4bc:	6a 95       	dec	r22
 4be:	e2 f7       	brpl	.-8      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 4c0:	80 95       	com	r24
 4c2:	82 23       	and	r24, r18
 4c4:	82 bb       	out	0x12, r24	; 18
 4c6:	08 95       	ret
 4c8:	41 30       	cpi	r20, 0x01	; 1
 4ca:	51 f4       	brne	.+20     	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 4cc:	22 b3       	in	r18, 0x12	; 18
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	6a 95       	dec	r22
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
 4dc:	82 2b       	or	r24, r18
 4de:	82 bb       	out	0x12, r24	; 18
 4e0:	08 95       	ret

000004e2 <DIO_read>:
	}
}

void DIO_read(uint8_t portnum,uint8_t pinnum, uint8_t *value)
{
	switch(portnum)
 4e2:	82 34       	cpi	r24, 0x42	; 66
 4e4:	01 f1       	breq	.+64     	; 0x526 <DIO_read+0x44>
 4e6:	18 f4       	brcc	.+6      	; 0x4ee <DIO_read+0xc>
 4e8:	81 34       	cpi	r24, 0x41	; 65
 4ea:	39 f0       	breq	.+14     	; 0x4fa <DIO_read+0x18>
 4ec:	08 95       	ret
 4ee:	83 34       	cpi	r24, 0x43	; 67
 4f0:	81 f1       	breq	.+96     	; 0x552 <DIO_read+0x70>
 4f2:	84 34       	cpi	r24, 0x44	; 68
 4f4:	09 f4       	brne	.+2      	; 0x4f8 <DIO_read+0x16>
 4f6:	43 c0       	rjmp	.+134    	; 0x57e <DIO_read+0x9c>
 4f8:	08 95       	ret
	{
		case port_A:
			*value = get_pin(PINA,pinnum); // save the value of pin number (pinnum) in port A in a variable
 4fa:	79 b3       	in	r23, 0x19	; 25
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	9c 01       	movw	r18, r24
 502:	06 2e       	mov	r0, r22
 504:	02 c0       	rjmp	.+4      	; 0x50a <DIO_read+0x28>
 506:	22 0f       	add	r18, r18
 508:	33 1f       	adc	r19, r19
 50a:	0a 94       	dec	r0
 50c:	e2 f7       	brpl	.-8      	; 0x506 <DIO_read+0x24>
 50e:	87 2f       	mov	r24, r23
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	82 23       	and	r24, r18
 514:	93 23       	and	r25, r19
 516:	02 c0       	rjmp	.+4      	; 0x51c <DIO_read+0x3a>
 518:	95 95       	asr	r25
 51a:	87 95       	ror	r24
 51c:	6a 95       	dec	r22
 51e:	e2 f7       	brpl	.-8      	; 0x518 <DIO_read+0x36>
 520:	fa 01       	movw	r30, r20
 522:	80 83       	st	Z, r24
		break;
 524:	08 95       	ret
		
		case port_B:
			*value = get_pin(PINB,pinnum); // save the value of pin number (pinnum) in port B in a variable
 526:	76 b3       	in	r23, 0x16	; 22
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	9c 01       	movw	r18, r24
 52e:	06 2e       	mov	r0, r22
 530:	02 c0       	rjmp	.+4      	; 0x536 <DIO_read+0x54>
 532:	22 0f       	add	r18, r18
 534:	33 1f       	adc	r19, r19
 536:	0a 94       	dec	r0
 538:	e2 f7       	brpl	.-8      	; 0x532 <DIO_read+0x50>
 53a:	87 2f       	mov	r24, r23
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	82 23       	and	r24, r18
 540:	93 23       	and	r25, r19
 542:	02 c0       	rjmp	.+4      	; 0x548 <DIO_read+0x66>
 544:	95 95       	asr	r25
 546:	87 95       	ror	r24
 548:	6a 95       	dec	r22
 54a:	e2 f7       	brpl	.-8      	; 0x544 <DIO_read+0x62>
 54c:	fa 01       	movw	r30, r20
 54e:	80 83       	st	Z, r24
		break;
 550:	08 95       	ret
		
		case port_C:
			*value = get_pin(PINC,pinnum); // save the value of pin number (pinnum) in port C in a variable
 552:	73 b3       	in	r23, 0x13	; 19
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	9c 01       	movw	r18, r24
 55a:	06 2e       	mov	r0, r22
 55c:	02 c0       	rjmp	.+4      	; 0x562 <DIO_read+0x80>
 55e:	22 0f       	add	r18, r18
 560:	33 1f       	adc	r19, r19
 562:	0a 94       	dec	r0
 564:	e2 f7       	brpl	.-8      	; 0x55e <DIO_read+0x7c>
 566:	87 2f       	mov	r24, r23
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	82 23       	and	r24, r18
 56c:	93 23       	and	r25, r19
 56e:	02 c0       	rjmp	.+4      	; 0x574 <DIO_read+0x92>
 570:	95 95       	asr	r25
 572:	87 95       	ror	r24
 574:	6a 95       	dec	r22
 576:	e2 f7       	brpl	.-8      	; 0x570 <DIO_read+0x8e>
 578:	fa 01       	movw	r30, r20
 57a:	80 83       	st	Z, r24
		break;
 57c:	08 95       	ret
		
		case port_D:
			*value = get_pin(PIND,pinnum); // save the value of pin number (pinnum) in port D in a variable
 57e:	70 b3       	in	r23, 0x10	; 16
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	9c 01       	movw	r18, r24
 586:	06 2e       	mov	r0, r22
 588:	02 c0       	rjmp	.+4      	; 0x58e <DIO_read+0xac>
 58a:	22 0f       	add	r18, r18
 58c:	33 1f       	adc	r19, r19
 58e:	0a 94       	dec	r0
 590:	e2 f7       	brpl	.-8      	; 0x58a <DIO_read+0xa8>
 592:	87 2f       	mov	r24, r23
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	82 23       	and	r24, r18
 598:	93 23       	and	r25, r19
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <DIO_read+0xbe>
 59c:	95 95       	asr	r25
 59e:	87 95       	ror	r24
 5a0:	6a 95       	dec	r22
 5a2:	e2 f7       	brpl	.-8      	; 0x59c <DIO_read+0xba>
 5a4:	fa 01       	movw	r30, r20
 5a6:	80 83       	st	Z, r24
 5a8:	08 95       	ret

000005aa <UART_set_BAUD>:
	// Set frame format
	UART_set_frame(8,2);
}
void UART_set_BAUD(uint16_t baud)
{
	UBRRH = (uint8_t)(baud >> 8); // Higher nibble 
 5aa:	90 bd       	out	0x20, r25	; 32
	UBRRL = (uint8_t)baud; // lower nibble 
 5ac:	89 b9       	out	0x09, r24	; 9
 5ae:	08 95       	ret

000005b0 <UART_set_frame>:
}
void UART_set_frame(uint8_t bitnum, uint8_t stopbits)
{
	switch(bitnum)
 5b0:	87 30       	cpi	r24, 0x07	; 7
 5b2:	f9 f0       	breq	.+62     	; 0x5f2 <UART_set_frame+0x42>
 5b4:	28 f4       	brcc	.+10     	; 0x5c0 <UART_set_frame+0x10>
 5b6:	85 30       	cpi	r24, 0x05	; 5
 5b8:	41 f0       	breq	.+16     	; 0x5ca <UART_set_frame+0x1a>
 5ba:	86 30       	cpi	r24, 0x06	; 6
 5bc:	81 f0       	breq	.+32     	; 0x5de <UART_set_frame+0x2e>
 5be:	36 c0       	rjmp	.+108    	; 0x62c <UART_set_frame+0x7c>
 5c0:	88 30       	cpi	r24, 0x08	; 8
 5c2:	09 f1       	breq	.+66     	; 0x606 <UART_set_frame+0x56>
 5c4:	89 30       	cpi	r24, 0x09	; 9
 5c6:	49 f1       	breq	.+82     	; 0x61a <UART_set_frame+0x6a>
 5c8:	31 c0       	rjmp	.+98     	; 0x62c <UART_set_frame+0x7c>
	{
		// 5 bits character size
		case 5:
			clr_pin(UCSRC,UCSZ0);
 5ca:	80 b5       	in	r24, 0x20	; 32
 5cc:	8d 7f       	andi	r24, 0xFD	; 253
 5ce:	80 bd       	out	0x20, r24	; 32
			clr_pin(UCSRC,UCSZ1);
 5d0:	80 b5       	in	r24, 0x20	; 32
 5d2:	8b 7f       	andi	r24, 0xFB	; 251
 5d4:	80 bd       	out	0x20, r24	; 32
			clr_pin(UCSRB,UCSZ2);
 5d6:	8a b1       	in	r24, 0x0a	; 10
 5d8:	8b 7f       	andi	r24, 0xFB	; 251
 5da:	8a b9       	out	0x0a, r24	; 10
		break;
 5dc:	27 c0       	rjmp	.+78     	; 0x62c <UART_set_frame+0x7c>
		// 6 bits character size
		case 6:
			set_pin(UCSRC,UCSZ0);
 5de:	80 b5       	in	r24, 0x20	; 32
 5e0:	82 60       	ori	r24, 0x02	; 2
 5e2:	80 bd       	out	0x20, r24	; 32
			clr_pin(UCSRC,UCSZ1);
 5e4:	80 b5       	in	r24, 0x20	; 32
 5e6:	8b 7f       	andi	r24, 0xFB	; 251
 5e8:	80 bd       	out	0x20, r24	; 32
			clr_pin(UCSRB,UCSZ2);
 5ea:	8a b1       	in	r24, 0x0a	; 10
 5ec:	8b 7f       	andi	r24, 0xFB	; 251
 5ee:	8a b9       	out	0x0a, r24	; 10
		break;
 5f0:	1d c0       	rjmp	.+58     	; 0x62c <UART_set_frame+0x7c>
		// 7 bits character size
		case 7:
			clr_pin(UCSRC,UCSZ0);
 5f2:	80 b5       	in	r24, 0x20	; 32
 5f4:	8d 7f       	andi	r24, 0xFD	; 253
 5f6:	80 bd       	out	0x20, r24	; 32
			set_pin(UCSRC,UCSZ1);
 5f8:	80 b5       	in	r24, 0x20	; 32
 5fa:	84 60       	ori	r24, 0x04	; 4
 5fc:	80 bd       	out	0x20, r24	; 32
			clr_pin(UCSRB,UCSZ2);
 5fe:	8a b1       	in	r24, 0x0a	; 10
 600:	8b 7f       	andi	r24, 0xFB	; 251
 602:	8a b9       	out	0x0a, r24	; 10
		break;
 604:	13 c0       	rjmp	.+38     	; 0x62c <UART_set_frame+0x7c>
		// 8 bits character size
		case 8:
			set_pin(UCSRC,UCSZ0);
 606:	80 b5       	in	r24, 0x20	; 32
 608:	82 60       	ori	r24, 0x02	; 2
 60a:	80 bd       	out	0x20, r24	; 32
			set_pin(UCSRC,UCSZ1);
 60c:	80 b5       	in	r24, 0x20	; 32
 60e:	84 60       	ori	r24, 0x04	; 4
 610:	80 bd       	out	0x20, r24	; 32
			clr_pin(UCSRB,UCSZ2);
 612:	8a b1       	in	r24, 0x0a	; 10
 614:	8b 7f       	andi	r24, 0xFB	; 251
 616:	8a b9       	out	0x0a, r24	; 10
		break;
 618:	09 c0       	rjmp	.+18     	; 0x62c <UART_set_frame+0x7c>
		// 9 bits character size
		case 9:
			set_pin(UCSRC,UCSZ0);
 61a:	80 b5       	in	r24, 0x20	; 32
 61c:	82 60       	ori	r24, 0x02	; 2
 61e:	80 bd       	out	0x20, r24	; 32
			set_pin(UCSRC,UCSZ1);
 620:	80 b5       	in	r24, 0x20	; 32
 622:	84 60       	ori	r24, 0x04	; 4
 624:	80 bd       	out	0x20, r24	; 32
			set_pin(UCSRB,UCSZ2);
 626:	8a b1       	in	r24, 0x0a	; 10
 628:	84 60       	ori	r24, 0x04	; 4
 62a:	8a b9       	out	0x0a, r24	; 10
		default:
		{
			// error handling
		}
	}
	switch(stopbits)
 62c:	61 30       	cpi	r22, 0x01	; 1
 62e:	19 f0       	breq	.+6      	; 0x636 <UART_set_frame+0x86>
 630:	62 30       	cpi	r22, 0x02	; 2
 632:	29 f0       	breq	.+10     	; 0x63e <UART_set_frame+0x8e>
 634:	08 95       	ret
	{
		// 1 stop bit
		case 1:
			clr_pin(UCSRC,USBS);
 636:	80 b5       	in	r24, 0x20	; 32
 638:	87 7f       	andi	r24, 0xF7	; 247
 63a:	80 bd       	out	0x20, r24	; 32
		break;
 63c:	08 95       	ret
		// 2 stop bit
		case 2:
			set_pin(UCSRC,USBS);
 63e:	80 b5       	in	r24, 0x20	; 32
 640:	88 60       	ori	r24, 0x08	; 8
 642:	80 bd       	out	0x20, r24	; 32
 644:	08 95       	ret

00000646 <UART_init>:
#include "UART_1.h"

void UART_init()
{
	// Set baud rate
	UART_set_BAUD(51);
 646:	83 e3       	ldi	r24, 0x33	; 51
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	0e 94 d5 02 	call	0x5aa	; 0x5aa <UART_set_BAUD>
	
	// Enable receiver and transmitter
	set_pin(UCSRB,RXEN);
 64e:	8a b1       	in	r24, 0x0a	; 10
 650:	80 61       	ori	r24, 0x10	; 16
 652:	8a b9       	out	0x0a, r24	; 10
	set_pin(UCSRB,TXEN);
 654:	8a b1       	in	r24, 0x0a	; 10
 656:	88 60       	ori	r24, 0x08	; 8
 658:	8a b9       	out	0x0a, r24	; 10
	
	// Set frame format
	UART_set_frame(8,2);
 65a:	62 e0       	ldi	r22, 0x02	; 2
 65c:	88 e0       	ldi	r24, 0x08	; 8
 65e:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <UART_set_frame>
 662:	08 95       	ret

00000664 <UART_transmit>:
}

void UART_transmit(uint8_t data)
{
	// Wait for empty transmit buffer
	while ( !( UCSRA & (1 << UDRE)) );
 664:	5d 9b       	sbis	0x0b, 5	; 11
 666:	fe cf       	rjmp	.-4      	; 0x664 <UART_transmit>
	
	// Put data into buffer, sends the data
	UDR = data;
 668:	8c b9       	out	0x0c, r24	; 12
 66a:	08 95       	ret

0000066c <UART_transmitString>:
}

void UART_transmitString(uint8_t *string_data)
{
 66c:	0f 93       	push	r16
 66e:	1f 93       	push	r17
 670:	cf 93       	push	r28
 672:	8c 01       	movw	r16, r24
	for(uint8_t cnt=0; *(string_data + cnt) != '\0'; cnt++)
 674:	c0 e0       	ldi	r28, 0x00	; 0
 676:	03 c0       	rjmp	.+6      	; 0x67e <UART_transmitString+0x12>
		UART_transmit(*(string_data + cnt));
 678:	0e 94 32 03 	call	0x664	; 0x664 <UART_transmit>
	UDR = data;
}

void UART_transmitString(uint8_t *string_data)
{
	for(uint8_t cnt=0; *(string_data + cnt) != '\0'; cnt++)
 67c:	cf 5f       	subi	r28, 0xFF	; 255
 67e:	f8 01       	movw	r30, r16
 680:	ec 0f       	add	r30, r28
 682:	f1 1d       	adc	r31, r1
 684:	80 81       	ld	r24, Z
 686:	81 11       	cpse	r24, r1
 688:	f7 cf       	rjmp	.-18     	; 0x678 <UART_transmitString+0xc>
		UART_transmit(*(string_data + cnt));
	UART_transmit('\0');
 68a:	0e 94 32 03 	call	0x664	; 0x664 <UART_transmit>
}
 68e:	cf 91       	pop	r28
 690:	1f 91       	pop	r17
 692:	0f 91       	pop	r16
 694:	08 95       	ret

00000696 <_exit>:
 696:	f8 94       	cli

00000698 <__stop_program>:
 698:	ff cf       	rjmp	.-2      	; 0x698 <__stop_program>
