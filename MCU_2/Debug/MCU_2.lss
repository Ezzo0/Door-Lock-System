
MCU_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001034  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00001034  000010c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  00800074  00800074  000010dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000110c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00001148  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018f7  00000000  00000000  00001370  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bbd  00000000  00000000  00002c67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000119d  00000000  00000000  00003824  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e0  00000000  00000000  000049c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000081f  00000000  00000000  00004da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009b3  00000000  00000000  000055c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  00005f76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 7f 03 	jmp	0x6fe	; 0x6fe <__vector_5>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <UART_init+0x10>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d8 e0       	ldi	r29, 0x08	; 8
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	10 e0       	ldi	r17, 0x00	; 0
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	e4 e3       	ldi	r30, 0x34	; 52
      ea:	f0 e1       	ldi	r31, 0x10	; 16
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	a4 37       	cpi	r26, 0x74	; 116
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	a4 e7       	ldi	r26, 0x74	; 116
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	aa 39       	cpi	r26, 0x9A	; 154
     104:	b2 07       	cpc	r27, r18
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <main>
     10c:	0c 94 18 08 	jmp	0x1030	; 0x1030 <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <app_init>:
uint8_t chs_opt =0;
uint8_t wrong_pass;
uint8_t flag = 1;

void app_init(){
	UART_init();
     114:	0e 94 60 04 	call	0x8c0	; 0x8c0 <UART_init>
	EEPROM_init();
     118:	0e 94 41 01 	call	0x282	; 0x282 <EEPROM_init>
	motor_init();
     11c:	0e 94 84 01 	call	0x308	; 0x308 <motor_init>
	DIO_init(port_D,PIN_6,OUT);
     120:	41 e0       	ldi	r20, 0x01	; 1
     122:	66 e0       	ldi	r22, 0x06	; 6
     124:	84 e4       	ldi	r24, 0x44	; 68
     126:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <DIO_init>
	DIO_init(port_D,PIN_7,OUT);
     12a:	41 e0       	ldi	r20, 0x01	; 1
     12c:	67 e0       	ldi	r22, 0x07	; 7
     12e:	84 e4       	ldi	r24, 0x44	; 68
     130:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <DIO_init>
	
	// Interrupts activation
	enable_global_interrupts();
     134:	0e 94 23 03 	call	0x646	; 0x646 <enable_global_interrupts>
	timer2_enable_overflow_interrupt();
     138:	0e 94 27 03 	call	0x64e	; 0x64e <timer2_enable_overflow_interrupt>
	// Timers mode selection
	timer2_select_mode(normal);
     13c:	8e e6       	ldi	r24, 0x6E	; 110
     13e:	0e 94 2b 03 	call	0x656	; 0x656 <timer2_select_mode>
	
	// Timers initial value
	timer2_set_initial_value(Timer_initial_value);
     142:	8b e0       	ldi	r24, 0x0B	; 11
     144:	0e 94 44 03 	call	0x688	; 0x688 <timer2_set_initial_value>
     148:	08 95       	ret

0000014a <reset_pass_array>:
}


void reset_pass_array()
{
	for(uint8_t i=0; i<17; i++){
     14a:	20 e0       	ldi	r18, 0x00	; 0
     14c:	0b c0       	rjmp	.+22     	; 0x164 <reset_pass_array+0x1a>
		pass_recieve_cmpr[i] = '\0';
     14e:	82 2f       	mov	r24, r18
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	fc 01       	movw	r30, r24
     154:	ea 58       	subi	r30, 0x8A	; 138
     156:	ff 4f       	sbci	r31, 0xFF	; 255
     158:	10 82       	st	Z, r1
		pass_recieve_save[i] = '\0';
     15a:	fc 01       	movw	r30, r24
     15c:	e9 57       	subi	r30, 0x79	; 121
     15e:	ff 4f       	sbci	r31, 0xFF	; 255
     160:	10 82       	st	Z, r1
}


void reset_pass_array()
{
	for(uint8_t i=0; i<17; i++){
     162:	2f 5f       	subi	r18, 0xFF	; 255
     164:	21 31       	cpi	r18, 0x11	; 17
     166:	98 f3       	brcs	.-26     	; 0x14e <reset_pass_array+0x4>
		pass_recieve_cmpr[i] = '\0';
		pass_recieve_save[i] = '\0';
	}
}
     168:	08 95       	ret

0000016a <compare_incoming_pass>:

void compare_incoming_pass()
{
	UART_receiveString(pass_recieve_cmpr);
     16a:	86 e7       	ldi	r24, 0x76	; 118
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	0e 94 77 04 	call	0x8ee	; 0x8ee <UART_receiveString>
	EEPROM_read_string(pass_recieve_save);
     172:	87 e8       	ldi	r24, 0x87	; 135
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	0e 94 62 01 	call	0x2c4	; 0x2c4 <EEPROM_read_string>
	
	
	for(uint8_t i=0; i<16; i++){
     17a:	20 e0       	ldi	r18, 0x00	; 0
     17c:	0e c0       	rjmp	.+28     	; 0x19a <compare_incoming_pass+0x30>
		if(pass_recieve_save[i] != pass_recieve_cmpr[i]){
     17e:	82 2f       	mov	r24, r18
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	fc 01       	movw	r30, r24
     184:	e9 57       	subi	r30, 0x79	; 121
     186:	ff 4f       	sbci	r31, 0xFF	; 255
     188:	30 81       	ld	r19, Z
     18a:	fc 01       	movw	r30, r24
     18c:	ea 58       	subi	r30, 0x8A	; 138
     18e:	ff 4f       	sbci	r31, 0xFF	; 255
     190:	80 81       	ld	r24, Z
     192:	38 13       	cpse	r19, r24
			pass_match = 0;
     194:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <pass_match>
{
	UART_receiveString(pass_recieve_cmpr);
	EEPROM_read_string(pass_recieve_save);
	
	
	for(uint8_t i=0; i<16; i++){
     198:	2f 5f       	subi	r18, 0xFF	; 255
     19a:	20 31       	cpi	r18, 0x10	; 16
     19c:	80 f3       	brcs	.-32     	; 0x17e <compare_incoming_pass+0x14>
		if(pass_recieve_save[i] != pass_recieve_cmpr[i]){
			pass_match = 0;
		}
	}
	UART_transmit(pass_match);
     19e:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <pass_match>
     1a2:	0e 94 6f 04 	call	0x8de	; 0x8de <UART_transmit>
     1a6:	08 95       	ret

000001a8 <set_new_pass>:
}

void set_new_pass()
{
	UART_receiveString(pass_recieve_save);
     1a8:	87 e8       	ldi	r24, 0x87	; 135
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	0e 94 77 04 	call	0x8ee	; 0x8ee <UART_receiveString>
	EEPROM_write_string(pass_recieve_save);
     1b0:	87 e8       	ldi	r24, 0x87	; 135
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0e 94 44 01 	call	0x288	; 0x288 <EEPROM_write_string>
     1b8:	08 95       	ret

000001ba <app_start>:


void app_start()
{
	while(1){
		pass_match = 1;
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <pass_match>
		pass_check = UART_receive();
     1c0:	0e 94 73 04 	call	0x8e6	; 0x8e6 <UART_receive>
     1c4:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <pass_check>
		
		
		if(pass_check == Password_was_entered)
     1c8:	81 30       	cpi	r24, 0x01	; 1
     1ca:	09 f0       	breq	.+2      	; 0x1ce <app_start+0x14>
     1cc:	52 c0       	rjmp	.+164    	; 0x272 <app_start+0xb8>
		{
			chs_opt = UART_receive();
     1ce:	0e 94 73 04 	call	0x8e6	; 0x8e6 <UART_receive>
     1d2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
			
			if(chs_opt == Choosed)
     1d6:	81 30       	cpi	r24, 0x01	; 1
     1d8:	81 f7       	brne	.-32     	; 0x1ba <app_start>
			{
				
				reset_pass_array();
     1da:	0e 94 a5 00 	call	0x14a	; 0x14a <reset_pass_array>
				
				opt = UART_receive();
     1de:	0e 94 73 04 	call	0x8e6	; 0x8e6 <UART_receive>
     1e2:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <opt>
				
				compare_incoming_pass();
     1e6:	0e 94 b5 00 	call	0x16a	; 0x16a <compare_incoming_pass>
				
				
				if(pass_match)
     1ea:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <pass_match>
     1ee:	88 23       	and	r24, r24
     1f0:	41 f1       	breq	.+80     	; 0x242 <app_start+0x88>
				{
					if(!flag)
     1f2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     1f6:	81 11       	cpse	r24, r1
     1f8:	0f c0       	rjmp	.+30     	; 0x218 <app_start+0x5e>
					{
						timer2_timer_stop();
     1fa:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <timer2_timer_stop>
						DIO_write(port_D,PIN_7,LOW);
     1fe:	40 e0       	ldi	r20, 0x00	; 0
     200:	67 e0       	ldi	r22, 0x07	; 7
     202:	84 e4       	ldi	r24, 0x44	; 68
     204:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_write>
						DIO_write(port_D,PIN_6,LOW);
     208:	40 e0       	ldi	r20, 0x00	; 0
     20a:	66 e0       	ldi	r22, 0x06	; 6
     20c:	84 e4       	ldi	r24, 0x44	; 68
     20e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_write>
						flag = 1;
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
					}
					
					if(opt == First_option)
     218:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <opt>
     21c:	81 33       	cpi	r24, 0x31	; 49
     21e:	19 f4       	brne	.+6      	; 0x226 <app_start+0x6c>
					{
						motor_response();
     220:	0e 94 c4 01 	call	0x388	; 0x388 <motor_response>
     224:	ca cf       	rjmp	.-108    	; 0x1ba <app_start>
					}
					else if(opt == Second_option)
     226:	82 33       	cpi	r24, 0x32	; 50
     228:	41 f6       	brne	.-112    	; 0x1ba <app_start>
					{
						
						EEPROM_write_string(clr);
     22a:	81 e6       	ldi	r24, 0x61	; 97
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	0e 94 44 01 	call	0x288	; 0x288 <EEPROM_write_string>
						
						reset_pass_array();
     232:	0e 94 a5 00 	call	0x14a	; 0x14a <reset_pass_array>
						set_new_pass();
     236:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <set_new_pass>
						UART_transmit(Matched);
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	0e 94 6f 04 	call	0x8de	; 0x8de <UART_transmit>
     240:	bc cf       	rjmp	.-136    	; 0x1ba <app_start>
						
					}
				}
				else
				{
					wrong_pass = UART_receive();
     242:	0e 94 73 04 	call	0x8e6	; 0x8e6 <UART_receive>
     246:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <wrong_pass>
					if(wrong_pass >= 3 && flag)
     24a:	83 30       	cpi	r24, 0x03	; 3
     24c:	08 f4       	brcc	.+2      	; 0x250 <app_start+0x96>
     24e:	b5 cf       	rjmp	.-150    	; 0x1ba <app_start>
     250:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     254:	88 23       	and	r24, r24
     256:	09 f4       	brne	.+2      	; 0x25a <app_start+0xa0>
     258:	b0 cf       	rjmp	.-160    	; 0x1ba <app_start>
					{
						timer2_timer_start(Timer_prescalar);
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	94 e0       	ldi	r25, 0x04	; 4
     25e:	0e 94 46 03 	call	0x68c	; 0x68c <timer2_timer_start>
						DIO_write(port_D,PIN_7,HIGH);
     262:	41 e0       	ldi	r20, 0x01	; 1
     264:	67 e0       	ldi	r22, 0x07	; 7
     266:	84 e4       	ldi	r24, 0x44	; 68
     268:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_write>
						flag = 0;
     26c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     270:	a4 cf       	rjmp	.-184    	; 0x1ba <app_start>
					}
				}
			}

		}
		else if(pass_check == Password_was_not_entered)
     272:	8f 3f       	cpi	r24, 0xFF	; 255
     274:	09 f0       	breq	.+2      	; 0x278 <app_start+0xbe>
     276:	a1 cf       	rjmp	.-190    	; 0x1ba <app_start>
		{
			set_new_pass();
     278:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <set_new_pass>
			reset_pass_array();
     27c:	0e 94 a5 00 	call	0x14a	; 0x14a <reset_pass_array>
     280:	9c cf       	rjmp	.-200    	; 0x1ba <app_start>

00000282 <EEPROM_init>:
	TWI_write_addr(0x00);
	TWI_stop();
	TWI_start(0b10100110+Read);
	TWI_read_nack(*data);
	TWI_stop();
}
     282:	0e 94 af 03 	call	0x75e	; 0x75e <TWI_init>
     286:	08 95       	ret

00000288 <EEPROM_write_string>:

void EEPROM_write_string(uint8_t *data)
{
     288:	0f 93       	push	r16
     28a:	1f 93       	push	r17
     28c:	cf 93       	push	r28
     28e:	8c 01       	movw	r16, r24
	TWI_start(0b10100110+Write);
     290:	86 ea       	ldi	r24, 0xA6	; 166
     292:	0e 94 cf 03 	call	0x79e	; 0x79e <TWI_start>
	TWI_write_addr(0x00);
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	0e 94 e6 03 	call	0x7cc	; 0x7cc <TWI_write_addr>
	TWI_write_addr(0x00);
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	0e 94 e6 03 	call	0x7cc	; 0x7cc <TWI_write_addr>
	
	for(uint8_t i=0; i<16; i++){
     2a2:	c0 e0       	ldi	r28, 0x00	; 0
     2a4:	07 c0       	rjmp	.+14     	; 0x2b4 <EEPROM_write_string+0x2c>
		TWI_write_data(*(data+i));
     2a6:	f8 01       	movw	r30, r16
     2a8:	ec 0f       	add	r30, r28
     2aa:	f1 1d       	adc	r31, r1
     2ac:	80 81       	ld	r24, Z
     2ae:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <TWI_write_data>
{
	TWI_start(0b10100110+Write);
	TWI_write_addr(0x00);
	TWI_write_addr(0x00);
	
	for(uint8_t i=0; i<16; i++){
     2b2:	cf 5f       	subi	r28, 0xFF	; 255
     2b4:	c0 31       	cpi	r28, 0x10	; 16
     2b6:	b8 f3       	brcs	.-18     	; 0x2a6 <EEPROM_write_string+0x1e>
		TWI_write_data(*(data+i));
	}
	
	TWI_stop();
     2b8:	0e 94 0c 04 	call	0x818	; 0x818 <TWI_stop>
}
     2bc:	cf 91       	pop	r28
     2be:	1f 91       	pop	r17
     2c0:	0f 91       	pop	r16
     2c2:	08 95       	ret

000002c4 <EEPROM_read_string>:

void EEPROM_read_string(uint8_t *data)
{
     2c4:	0f 93       	push	r16
     2c6:	1f 93       	push	r17
     2c8:	cf 93       	push	r28
     2ca:	8c 01       	movw	r16, r24
	TWI_start(0b10100110+Write);
     2cc:	86 ea       	ldi	r24, 0xA6	; 166
     2ce:	0e 94 cf 03 	call	0x79e	; 0x79e <TWI_start>
	TWI_write_addr(0x00);
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	0e 94 e6 03 	call	0x7cc	; 0x7cc <TWI_write_addr>
	TWI_write_addr(0x00);
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	0e 94 e6 03 	call	0x7cc	; 0x7cc <TWI_write_addr>
	TWI_stop();
     2de:	0e 94 0c 04 	call	0x818	; 0x818 <TWI_stop>
	TWI_start(0b10100110+Read);
     2e2:	87 ea       	ldi	r24, 0xA7	; 167
     2e4:	0e 94 cf 03 	call	0x79e	; 0x79e <TWI_start>
	
	for(uint8_t i=0; i<16; i++){
     2e8:	c0 e0       	ldi	r28, 0x00	; 0
     2ea:	06 c0       	rjmp	.+12     	; 0x2f8 <EEPROM_read_string+0x34>
		TWI_read_ack(data+i);
     2ec:	c8 01       	movw	r24, r16
     2ee:	8c 0f       	add	r24, r28
     2f0:	91 1d       	adc	r25, r1
     2f2:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <TWI_read_ack>
	TWI_write_addr(0x00);
	TWI_write_addr(0x00);
	TWI_stop();
	TWI_start(0b10100110+Read);
	
	for(uint8_t i=0; i<16; i++){
     2f6:	cf 5f       	subi	r28, 0xFF	; 255
     2f8:	c0 31       	cpi	r28, 0x10	; 16
     2fa:	c0 f3       	brcs	.-16     	; 0x2ec <EEPROM_read_string+0x28>
		TWI_read_ack(data+i);
	}
	
	TWI_stop();
     2fc:	0e 94 0c 04 	call	0x818	; 0x818 <TWI_stop>
}
     300:	cf 91       	pop	r28
     302:	1f 91       	pop	r17
     304:	0f 91       	pop	r16
     306:	08 95       	ret

00000308 <motor_init>:
 */ 
#include "motor.h"

void motor_init()
{
	DIO_init(port_B,PIN_5,OUT);
     308:	41 e0       	ldi	r20, 0x01	; 1
     30a:	65 e0       	ldi	r22, 0x05	; 5
     30c:	82 e4       	ldi	r24, 0x42	; 66
     30e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <DIO_init>
	DIO_init(port_B,PIN_6,OUT);
     312:	41 e0       	ldi	r20, 0x01	; 1
     314:	66 e0       	ldi	r22, 0x06	; 6
     316:	82 e4       	ldi	r24, 0x42	; 66
     318:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <DIO_init>
	DIO_init(port_B,PIN_7,OUT);
     31c:	41 e0       	ldi	r20, 0x01	; 1
     31e:	67 e0       	ldi	r22, 0x07	; 7
     320:	82 e4       	ldi	r24, 0x42	; 66
     322:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <DIO_init>
     326:	08 95       	ret

00000328 <motor_turn_cw>:
}

void motor_turn_cw()
{
	DIO_write(port_B,PIN_5,HIGH);
     328:	41 e0       	ldi	r20, 0x01	; 1
     32a:	65 e0       	ldi	r22, 0x05	; 5
     32c:	82 e4       	ldi	r24, 0x42	; 66
     32e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_write>
	DIO_write(port_B,PIN_6,HIGH);
     332:	41 e0       	ldi	r20, 0x01	; 1
     334:	66 e0       	ldi	r22, 0x06	; 6
     336:	82 e4       	ldi	r24, 0x42	; 66
     338:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_write>
	DIO_write(port_B,PIN_7,LOW);
     33c:	40 e0       	ldi	r20, 0x00	; 0
     33e:	67 e0       	ldi	r22, 0x07	; 7
     340:	82 e4       	ldi	r24, 0x42	; 66
     342:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_write>
     346:	08 95       	ret

00000348 <motor_turn_anti_cw>:
}

void motor_turn_anti_cw()
{
	DIO_write(port_B,PIN_5,HIGH);
     348:	41 e0       	ldi	r20, 0x01	; 1
     34a:	65 e0       	ldi	r22, 0x05	; 5
     34c:	82 e4       	ldi	r24, 0x42	; 66
     34e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_write>
	DIO_write(port_B,PIN_6,LOW);
     352:	40 e0       	ldi	r20, 0x00	; 0
     354:	66 e0       	ldi	r22, 0x06	; 6
     356:	82 e4       	ldi	r24, 0x42	; 66
     358:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_write>
	DIO_write(port_B,PIN_7,HIGH);
     35c:	41 e0       	ldi	r20, 0x01	; 1
     35e:	67 e0       	ldi	r22, 0x07	; 7
     360:	82 e4       	ldi	r24, 0x42	; 66
     362:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_write>
     366:	08 95       	ret

00000368 <motor_brake>:
}

void motor_brake()
{
	DIO_write(port_B,PIN_5,HIGH);
     368:	41 e0       	ldi	r20, 0x01	; 1
     36a:	65 e0       	ldi	r22, 0x05	; 5
     36c:	82 e4       	ldi	r24, 0x42	; 66
     36e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_write>
	DIO_write(port_B,PIN_6,HIGH);
     372:	41 e0       	ldi	r20, 0x01	; 1
     374:	66 e0       	ldi	r22, 0x06	; 6
     376:	82 e4       	ldi	r24, 0x42	; 66
     378:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_write>
	DIO_write(port_B,PIN_7,HIGH);
     37c:	41 e0       	ldi	r20, 0x01	; 1
     37e:	67 e0       	ldi	r22, 0x07	; 7
     380:	82 e4       	ldi	r24, 0x42	; 66
     382:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_write>
     386:	08 95       	ret

00000388 <motor_response>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     388:	2f e3       	ldi	r18, 0x3F	; 63
     38a:	8d e0       	ldi	r24, 0x0D	; 13
     38c:	93 e0       	ldi	r25, 0x03	; 3
     38e:	21 50       	subi	r18, 0x01	; 1
     390:	80 40       	sbci	r24, 0x00	; 0
     392:	90 40       	sbci	r25, 0x00	; 0
     394:	e1 f7       	brne	.-8      	; 0x38e <motor_response+0x6>
     396:	00 c0       	rjmp	.+0      	; 0x398 <motor_response+0x10>
     398:	00 00       	nop
}

void motor_response()
{
	_delay_ms(1000);
	motor_turn_cw();
     39a:	0e 94 94 01 	call	0x328	; 0x328 <motor_turn_cw>
     39e:	2f ed       	ldi	r18, 0xDF	; 223
     3a0:	83 e9       	ldi	r24, 0x93	; 147
     3a2:	94 e0       	ldi	r25, 0x04	; 4
     3a4:	21 50       	subi	r18, 0x01	; 1
     3a6:	80 40       	sbci	r24, 0x00	; 0
     3a8:	90 40       	sbci	r25, 0x00	; 0
     3aa:	e1 f7       	brne	.-8      	; 0x3a4 <motor_response+0x1c>
     3ac:	00 c0       	rjmp	.+0      	; 0x3ae <motor_response+0x26>
     3ae:	00 00       	nop
	_delay_ms(1500);
	motor_brake();
     3b0:	0e 94 b4 01 	call	0x368	; 0x368 <motor_brake>
     3b4:	2f ed       	ldi	r18, 0xDF	; 223
     3b6:	83 e9       	ldi	r24, 0x93	; 147
     3b8:	94 e0       	ldi	r25, 0x04	; 4
     3ba:	21 50       	subi	r18, 0x01	; 1
     3bc:	80 40       	sbci	r24, 0x00	; 0
     3be:	90 40       	sbci	r25, 0x00	; 0
     3c0:	e1 f7       	brne	.-8      	; 0x3ba <motor_response+0x32>
     3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <motor_response+0x3c>
     3c4:	00 00       	nop
	_delay_ms(1500);
	motor_turn_anti_cw();
     3c6:	0e 94 a4 01 	call	0x348	; 0x348 <motor_turn_anti_cw>
     3ca:	2f e7       	ldi	r18, 0x7F	; 127
     3cc:	8a e1       	ldi	r24, 0x1A	; 26
     3ce:	96 e0       	ldi	r25, 0x06	; 6
     3d0:	21 50       	subi	r18, 0x01	; 1
     3d2:	80 40       	sbci	r24, 0x00	; 0
     3d4:	90 40       	sbci	r25, 0x00	; 0
     3d6:	e1 f7       	brne	.-8      	; 0x3d0 <motor_response+0x48>
     3d8:	00 c0       	rjmp	.+0      	; 0x3da <motor_response+0x52>
     3da:	00 00       	nop
	_delay_ms(2000);
	motor_brake();
     3dc:	0e 94 b4 01 	call	0x368	; 0x368 <motor_brake>
     3e0:	08 95       	ret

000003e2 <main>:



int main(void)
{
	app_init();
     3e2:	0e 94 8a 00 	call	0x114	; 0x114 <app_init>
	app_start();
     3e6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <app_start>
}
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	08 95       	ret

000003f0 <DIO_init>:

#include "DIO_2.h"

void DIO_init(uint8_t portnum,uint8_t pinnum, uint8_t direction)
{
	switch(portnum)
     3f0:	82 34       	cpi	r24, 0x42	; 66
     3f2:	31 f1       	breq	.+76     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
     3f4:	18 f4       	brcc	.+6      	; 0x3fc <DIO_init+0xc>
     3f6:	81 34       	cpi	r24, 0x41	; 65
     3f8:	39 f0       	breq	.+14     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
     3fa:	08 95       	ret
     3fc:	83 34       	cpi	r24, 0x43	; 67
     3fe:	e1 f1       	breq	.+120    	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
     400:	84 34       	cpi	r24, 0x44	; 68
     402:	09 f4       	brne	.+2      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     404:	54 c0       	rjmp	.+168    	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
     406:	08 95       	ret
	{
		case port_A:
			if(direction == IN)
     408:	41 11       	cpse	r20, r1
     40a:	0c c0       	rjmp	.+24     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
				clr_pin(DDRA,pinnum); // Make pin number (pinnum) in port A an input pin
     40c:	2a b3       	in	r18, 0x1a	; 26
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	02 c0       	rjmp	.+4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     414:	88 0f       	add	r24, r24
     416:	99 1f       	adc	r25, r25
     418:	6a 95       	dec	r22
     41a:	e2 f7       	brpl	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     41c:	80 95       	com	r24
     41e:	82 23       	and	r24, r18
     420:	8a bb       	out	0x1a, r24	; 26
     422:	08 95       	ret
			
			else if(direction == OUT)
     424:	41 30       	cpi	r20, 0x01	; 1
     426:	09 f0       	breq	.+2      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
     428:	5c c0       	rjmp	.+184    	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
				set_pin(DDRA,pinnum);	// Make pin number (pinnum) in port A an output pin
     42a:	2a b3       	in	r18, 0x1a	; 26
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	02 c0       	rjmp	.+4      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
     432:	88 0f       	add	r24, r24
     434:	99 1f       	adc	r25, r25
     436:	6a 95       	dec	r22
     438:	e2 f7       	brpl	.-8      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
     43a:	82 2b       	or	r24, r18
     43c:	8a bb       	out	0x1a, r24	; 26
     43e:	08 95       	ret
				//Error Handling
			}
		break;
		
		case port_B:
			if(direction == IN)
     440:	41 11       	cpse	r20, r1
     442:	0c c0       	rjmp	.+24     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
				clr_pin(DDRB,pinnum); // Make pin number (pinnum) in port B an input pin
     444:	27 b3       	in	r18, 0x17	; 23
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	02 c0       	rjmp	.+4      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
     44c:	88 0f       	add	r24, r24
     44e:	99 1f       	adc	r25, r25
     450:	6a 95       	dec	r22
     452:	e2 f7       	brpl	.-8      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
     454:	80 95       	com	r24
     456:	82 23       	and	r24, r18
     458:	87 bb       	out	0x17, r24	; 23
     45a:	08 95       	ret
			
			else if(direction == OUT)
     45c:	41 30       	cpi	r20, 0x01	; 1
     45e:	09 f0       	breq	.+2      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
     460:	40 c0       	rjmp	.+128    	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
				set_pin(DDRB,pinnum);	// Make pin number (pinnum) in port B an output pin
     462:	27 b3       	in	r18, 0x17	; 23
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	02 c0       	rjmp	.+4      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
     46a:	88 0f       	add	r24, r24
     46c:	99 1f       	adc	r25, r25
     46e:	6a 95       	dec	r22
     470:	e2 f7       	brpl	.-8      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
     472:	82 2b       	or	r24, r18
     474:	87 bb       	out	0x17, r24	; 23
     476:	08 95       	ret
				//Error Handling
			}
		break;
		
		case port_C:
			if(direction == IN)
     478:	41 11       	cpse	r20, r1
     47a:	0c c0       	rjmp	.+24     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
				clr_pin(DDRC,pinnum); // Make pin number (pinnum) in port C an input pin
     47c:	24 b3       	in	r18, 0x14	; 20
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	02 c0       	rjmp	.+4      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
     484:	88 0f       	add	r24, r24
     486:	99 1f       	adc	r25, r25
     488:	6a 95       	dec	r22
     48a:	e2 f7       	brpl	.-8      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
     48c:	80 95       	com	r24
     48e:	82 23       	and	r24, r18
     490:	84 bb       	out	0x14, r24	; 20
     492:	08 95       	ret
		
			else if(direction == OUT)
     494:	41 30       	cpi	r20, 0x01	; 1
     496:	29 f5       	brne	.+74     	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
				set_pin(DDRC,pinnum);	// Make pin number (pinnum) in port C an output pin
     498:	24 b3       	in	r18, 0x14	; 20
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	02 c0       	rjmp	.+4      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
     4a0:	88 0f       	add	r24, r24
     4a2:	99 1f       	adc	r25, r25
     4a4:	6a 95       	dec	r22
     4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
     4a8:	82 2b       	or	r24, r18
     4aa:	84 bb       	out	0x14, r24	; 20
     4ac:	08 95       	ret
				//Error Handling
			}
		break;
		
		case port_D:
			if(direction == IN)
     4ae:	41 11       	cpse	r20, r1
     4b0:	0c c0       	rjmp	.+24     	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
				clr_pin(DDRD,pinnum); // Make pin number (pinnum) in port D an input pin
     4b2:	21 b3       	in	r18, 0x11	; 17
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
     4ba:	88 0f       	add	r24, r24
     4bc:	99 1f       	adc	r25, r25
     4be:	6a 95       	dec	r22
     4c0:	e2 f7       	brpl	.-8      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
     4c2:	80 95       	com	r24
     4c4:	82 23       	and	r24, r18
     4c6:	81 bb       	out	0x11, r24	; 17
     4c8:	08 95       	ret
		
			else if(direction == OUT)
     4ca:	41 30       	cpi	r20, 0x01	; 1
     4cc:	51 f4       	brne	.+20     	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
				set_pin(DDRD,pinnum);	// Make pin number (pinnum) in port D an input pin
     4ce:	21 b3       	in	r18, 0x11	; 17
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	02 c0       	rjmp	.+4      	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
     4d6:	88 0f       	add	r24, r24
     4d8:	99 1f       	adc	r25, r25
     4da:	6a 95       	dec	r22
     4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
     4de:	82 2b       	or	r24, r18
     4e0:	81 bb       	out	0x11, r24	; 17
     4e2:	08 95       	ret

000004e4 <DIO_write>:
	}
}

void DIO_write(uint8_t portnum,uint8_t pinnum, uint8_t value)
{
	switch(portnum)
     4e4:	82 34       	cpi	r24, 0x42	; 66
     4e6:	31 f1       	breq	.+76     	; 0x534 <DIO_write+0x50>
     4e8:	18 f4       	brcc	.+6      	; 0x4f0 <DIO_write+0xc>
     4ea:	81 34       	cpi	r24, 0x41	; 65
     4ec:	39 f0       	breq	.+14     	; 0x4fc <DIO_write+0x18>
     4ee:	08 95       	ret
     4f0:	83 34       	cpi	r24, 0x43	; 67
     4f2:	e1 f1       	breq	.+120    	; 0x56c <DIO_write+0x88>
     4f4:	84 34       	cpi	r24, 0x44	; 68
     4f6:	09 f4       	brne	.+2      	; 0x4fa <DIO_write+0x16>
     4f8:	54 c0       	rjmp	.+168    	; 0x5a2 <DIO_write+0xbe>
     4fa:	08 95       	ret
	{
		case port_A:
			if(value == LOW)
     4fc:	41 11       	cpse	r20, r1
     4fe:	0c c0       	rjmp	.+24     	; 0x518 <DIO_write+0x34>
				clr_pin(PORTA,pinnum); // make pin number (pinnum) in port A has a value of 0
     500:	2b b3       	in	r18, 0x1b	; 27
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	02 c0       	rjmp	.+4      	; 0x50c <DIO_write+0x28>
     508:	88 0f       	add	r24, r24
     50a:	99 1f       	adc	r25, r25
     50c:	6a 95       	dec	r22
     50e:	e2 f7       	brpl	.-8      	; 0x508 <DIO_write+0x24>
     510:	80 95       	com	r24
     512:	82 23       	and	r24, r18
     514:	8b bb       	out	0x1b, r24	; 27
     516:	08 95       	ret
			
			else if(value == HIGH)
     518:	41 30       	cpi	r20, 0x01	; 1
     51a:	09 f0       	breq	.+2      	; 0x51e <DIO_write+0x3a>
     51c:	5c c0       	rjmp	.+184    	; 0x5d6 <DIO_write+0xf2>
				set_pin(PORTA,pinnum); // make pin number (pinnum) in port A has a value of 1
     51e:	2b b3       	in	r18, 0x1b	; 27
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	02 c0       	rjmp	.+4      	; 0x52a <DIO_write+0x46>
     526:	88 0f       	add	r24, r24
     528:	99 1f       	adc	r25, r25
     52a:	6a 95       	dec	r22
     52c:	e2 f7       	brpl	.-8      	; 0x526 <DIO_write+0x42>
     52e:	82 2b       	or	r24, r18
     530:	8b bb       	out	0x1b, r24	; 27
     532:	08 95       	ret
				//Error Handling
			}
		break;
		
		case port_B:
			if(value == LOW)
     534:	41 11       	cpse	r20, r1
     536:	0c c0       	rjmp	.+24     	; 0x550 <DIO_write+0x6c>
				clr_pin(PORTB,pinnum); // make pin number (pinnum) in port B has a value of 0
     538:	28 b3       	in	r18, 0x18	; 24
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_write+0x60>
     540:	88 0f       	add	r24, r24
     542:	99 1f       	adc	r25, r25
     544:	6a 95       	dec	r22
     546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_write+0x5c>
     548:	80 95       	com	r24
     54a:	82 23       	and	r24, r18
     54c:	88 bb       	out	0x18, r24	; 24
     54e:	08 95       	ret
		
			else if(value == HIGH)
     550:	41 30       	cpi	r20, 0x01	; 1
     552:	09 f0       	breq	.+2      	; 0x556 <DIO_write+0x72>
     554:	40 c0       	rjmp	.+128    	; 0x5d6 <DIO_write+0xf2>
				set_pin(PORTB,pinnum); // make pin number (pinnum) in port B has a value of 1
     556:	28 b3       	in	r18, 0x18	; 24
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	02 c0       	rjmp	.+4      	; 0x562 <DIO_write+0x7e>
     55e:	88 0f       	add	r24, r24
     560:	99 1f       	adc	r25, r25
     562:	6a 95       	dec	r22
     564:	e2 f7       	brpl	.-8      	; 0x55e <DIO_write+0x7a>
     566:	82 2b       	or	r24, r18
     568:	88 bb       	out	0x18, r24	; 24
     56a:	08 95       	ret
				//Error Handling
			}
		break;
		
		case port_C:
			if(value == LOW)
     56c:	41 11       	cpse	r20, r1
     56e:	0c c0       	rjmp	.+24     	; 0x588 <DIO_write+0xa4>
				clr_pin(PORTC,pinnum); // make pin number (pinnum) in port C has a value of 0
     570:	25 b3       	in	r18, 0x15	; 21
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	02 c0       	rjmp	.+4      	; 0x57c <DIO_write+0x98>
     578:	88 0f       	add	r24, r24
     57a:	99 1f       	adc	r25, r25
     57c:	6a 95       	dec	r22
     57e:	e2 f7       	brpl	.-8      	; 0x578 <DIO_write+0x94>
     580:	80 95       	com	r24
     582:	82 23       	and	r24, r18
     584:	85 bb       	out	0x15, r24	; 21
     586:	08 95       	ret
		
			else if(value == HIGH)
     588:	41 30       	cpi	r20, 0x01	; 1
     58a:	29 f5       	brne	.+74     	; 0x5d6 <DIO_write+0xf2>
				set_pin(PORTC,pinnum); // make pin number (pinnum) in port C has a value of 1
     58c:	25 b3       	in	r18, 0x15	; 21
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	02 c0       	rjmp	.+4      	; 0x598 <DIO_write+0xb4>
     594:	88 0f       	add	r24, r24
     596:	99 1f       	adc	r25, r25
     598:	6a 95       	dec	r22
     59a:	e2 f7       	brpl	.-8      	; 0x594 <DIO_write+0xb0>
     59c:	82 2b       	or	r24, r18
     59e:	85 bb       	out	0x15, r24	; 21
     5a0:	08 95       	ret
				//Error Handling
			}
		break;
		
		case port_D:
			if(value == LOW)
     5a2:	41 11       	cpse	r20, r1
     5a4:	0c c0       	rjmp	.+24     	; 0x5be <DIO_write+0xda>
				clr_pin(PORTD,pinnum); // make pin number (pinnum) in port D has a value of 0
     5a6:	22 b3       	in	r18, 0x12	; 18
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <DIO_write+0xce>
     5ae:	88 0f       	add	r24, r24
     5b0:	99 1f       	adc	r25, r25
     5b2:	6a 95       	dec	r22
     5b4:	e2 f7       	brpl	.-8      	; 0x5ae <DIO_write+0xca>
     5b6:	80 95       	com	r24
     5b8:	82 23       	and	r24, r18
     5ba:	82 bb       	out	0x12, r24	; 18
     5bc:	08 95       	ret
		
			else if(value == HIGH)
     5be:	41 30       	cpi	r20, 0x01	; 1
     5c0:	51 f4       	brne	.+20     	; 0x5d6 <DIO_write+0xf2>
				set_pin(PORTD,pinnum); // make pin number (pinnum) in port D has a value of 1
     5c2:	22 b3       	in	r18, 0x12	; 18
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	02 c0       	rjmp	.+4      	; 0x5ce <DIO_write+0xea>
     5ca:	88 0f       	add	r24, r24
     5cc:	99 1f       	adc	r25, r25
     5ce:	6a 95       	dec	r22
     5d0:	e2 f7       	brpl	.-8      	; 0x5ca <DIO_write+0xe6>
     5d2:	82 2b       	or	r24, r18
     5d4:	82 bb       	out	0x12, r24	; 18
     5d6:	08 95       	ret

000005d8 <DIO_toggle>:
	}
}

void DIO_toggle(uint8_t portnum,uint8_t pinnum)
{
	switch(portnum)
     5d8:	82 34       	cpi	r24, 0x42	; 66
     5da:	a1 f0       	breq	.+40     	; 0x604 <DIO_toggle+0x2c>
     5dc:	18 f4       	brcc	.+6      	; 0x5e4 <DIO_toggle+0xc>
     5de:	81 34       	cpi	r24, 0x41	; 65
     5e0:	31 f0       	breq	.+12     	; 0x5ee <DIO_toggle+0x16>
     5e2:	08 95       	ret
     5e4:	83 34       	cpi	r24, 0x43	; 67
     5e6:	c9 f0       	breq	.+50     	; 0x61a <DIO_toggle+0x42>
     5e8:	84 34       	cpi	r24, 0x44	; 68
     5ea:	11 f1       	breq	.+68     	; 0x630 <DIO_toggle+0x58>
     5ec:	08 95       	ret
	{
		case port_A:
			tgl_pin(PORTA,pinnum); // toggle pin number (pinnum) in port A
     5ee:	2b b3       	in	r18, 0x1b	; 27
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	02 c0       	rjmp	.+4      	; 0x5fa <DIO_toggle+0x22>
     5f6:	88 0f       	add	r24, r24
     5f8:	99 1f       	adc	r25, r25
     5fa:	6a 95       	dec	r22
     5fc:	e2 f7       	brpl	.-8      	; 0x5f6 <DIO_toggle+0x1e>
     5fe:	82 27       	eor	r24, r18
     600:	8b bb       	out	0x1b, r24	; 27
		break;
     602:	08 95       	ret
		
		case port_B:
			tgl_pin(PORTB,pinnum); // toggle pin number (pinnum) in port B
     604:	28 b3       	in	r18, 0x18	; 24
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	02 c0       	rjmp	.+4      	; 0x610 <DIO_toggle+0x38>
     60c:	88 0f       	add	r24, r24
     60e:	99 1f       	adc	r25, r25
     610:	6a 95       	dec	r22
     612:	e2 f7       	brpl	.-8      	; 0x60c <DIO_toggle+0x34>
     614:	82 27       	eor	r24, r18
     616:	88 bb       	out	0x18, r24	; 24
		break;
     618:	08 95       	ret
		
		case port_C:
			tgl_pin(PORTC,pinnum); // toggle pin number (pinnum) in port C
     61a:	25 b3       	in	r18, 0x15	; 21
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	02 c0       	rjmp	.+4      	; 0x626 <DIO_toggle+0x4e>
     622:	88 0f       	add	r24, r24
     624:	99 1f       	adc	r25, r25
     626:	6a 95       	dec	r22
     628:	e2 f7       	brpl	.-8      	; 0x622 <DIO_toggle+0x4a>
     62a:	82 27       	eor	r24, r18
     62c:	85 bb       	out	0x15, r24	; 21
		break;
     62e:	08 95       	ret
		
		case port_D:
			tgl_pin(PORTD,pinnum); // toggle pin number (pinnum) in port D
     630:	22 b3       	in	r18, 0x12	; 18
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	02 c0       	rjmp	.+4      	; 0x63c <DIO_toggle+0x64>
     638:	88 0f       	add	r24, r24
     63a:	99 1f       	adc	r25, r25
     63c:	6a 95       	dec	r22
     63e:	e2 f7       	brpl	.-8      	; 0x638 <DIO_toggle+0x60>
     640:	82 27       	eor	r24, r18
     642:	82 bb       	out	0x12, r24	; 18
     644:	08 95       	ret

00000646 <enable_global_interrupts>:

#include "interrupts.h"

void enable_global_interrupts()
{
	SREG |= (1 << 7); // set bit 7 in SREG register to one
     646:	8f b7       	in	r24, 0x3f	; 63
     648:	80 68       	ori	r24, 0x80	; 128
     64a:	8f bf       	out	0x3f, r24	; 63
     64c:	08 95       	ret

0000064e <timer2_enable_overflow_interrupt>:
}

void timer2_enable_overflow_interrupt()
{
	TIMSK |= (1 << TOIE2); // set bit TOIE2 in TIMSK register to one
     64e:	89 b7       	in	r24, 0x39	; 57
     650:	80 64       	ori	r24, 0x40	; 64
     652:	89 bf       	out	0x39, r24	; 57
     654:	08 95       	ret

00000656 <timer2_select_mode>:
}

void timer2_timer_reset()
{
	number_of_overflows = 0;
	timer2_set_initial_value(Timer_initial_value);
     656:	86 36       	cpi	r24, 0x66	; 102
     658:	99 f0       	breq	.+38     	; 0x680 <timer2_select_mode+0x2a>
     65a:	18 f4       	brcc	.+6      	; 0x662 <timer2_select_mode+0xc>
     65c:	83 36       	cpi	r24, 0x63	; 99
     65e:	61 f0       	breq	.+24     	; 0x678 <timer2_select_mode+0x22>
     660:	08 95       	ret
     662:	8e 36       	cpi	r24, 0x6E	; 110
     664:	19 f0       	breq	.+6      	; 0x66c <timer2_select_mode+0x16>
     666:	80 37       	cpi	r24, 0x70	; 112
     668:	19 f0       	breq	.+6      	; 0x670 <timer2_select_mode+0x1a>
     66a:	08 95       	ret
     66c:	15 bc       	out	0x25, r1	; 37
     66e:	08 95       	ret
     670:	85 b5       	in	r24, 0x25	; 37
     672:	80 64       	ori	r24, 0x40	; 64
     674:	85 bd       	out	0x25, r24	; 37
     676:	08 95       	ret
     678:	85 b5       	in	r24, 0x25	; 37
     67a:	88 60       	ori	r24, 0x08	; 8
     67c:	85 bd       	out	0x25, r24	; 37
     67e:	08 95       	ret
     680:	85 b5       	in	r24, 0x25	; 37
     682:	88 64       	ori	r24, 0x48	; 72
     684:	85 bd       	out	0x25, r24	; 37
     686:	08 95       	ret

00000688 <timer2_set_initial_value>:
     688:	84 bd       	out	0x24, r24	; 36
     68a:	08 95       	ret

0000068c <timer2_timer_start>:
     68c:	80 34       	cpi	r24, 0x40	; 64
     68e:	91 05       	cpc	r25, r1
     690:	11 f1       	breq	.+68     	; 0x6d6 <timer2_timer_start+0x4a>
     692:	4c f4       	brge	.+18     	; 0x6a6 <timer2_timer_start+0x1a>
     694:	88 30       	cpi	r24, 0x08	; 8
     696:	91 05       	cpc	r25, r1
     698:	b1 f0       	breq	.+44     	; 0x6c6 <timer2_timer_start+0x3a>
     69a:	80 32       	cpi	r24, 0x20	; 32
     69c:	91 05       	cpc	r25, r1
     69e:	b9 f0       	breq	.+46     	; 0x6ce <timer2_timer_start+0x42>
     6a0:	89 2b       	or	r24, r25
     6a2:	41 f5       	brne	.+80     	; 0x6f4 <timer2_timer_start+0x68>
     6a4:	0c c0       	rjmp	.+24     	; 0x6be <timer2_timer_start+0x32>
     6a6:	81 15       	cp	r24, r1
     6a8:	21 e0       	ldi	r18, 0x01	; 1
     6aa:	92 07       	cpc	r25, r18
     6ac:	e1 f0       	breq	.+56     	; 0x6e6 <timer2_timer_start+0x5a>
     6ae:	81 15       	cp	r24, r1
     6b0:	24 e0       	ldi	r18, 0x04	; 4
     6b2:	92 07       	cpc	r25, r18
     6b4:	e1 f0       	breq	.+56     	; 0x6ee <timer2_timer_start+0x62>
     6b6:	80 38       	cpi	r24, 0x80	; 128
     6b8:	91 05       	cpc	r25, r1
     6ba:	e1 f4       	brne	.+56     	; 0x6f4 <timer2_timer_start+0x68>
     6bc:	10 c0       	rjmp	.+32     	; 0x6de <timer2_timer_start+0x52>
     6be:	85 b5       	in	r24, 0x25	; 37
     6c0:	81 60       	ori	r24, 0x01	; 1
     6c2:	85 bd       	out	0x25, r24	; 37
     6c4:	08 95       	ret
     6c6:	85 b5       	in	r24, 0x25	; 37
     6c8:	82 60       	ori	r24, 0x02	; 2
     6ca:	85 bd       	out	0x25, r24	; 37
     6cc:	08 95       	ret
     6ce:	85 b5       	in	r24, 0x25	; 37
     6d0:	83 60       	ori	r24, 0x03	; 3
     6d2:	85 bd       	out	0x25, r24	; 37
     6d4:	08 95       	ret
     6d6:	85 b5       	in	r24, 0x25	; 37
     6d8:	84 60       	ori	r24, 0x04	; 4
     6da:	85 bd       	out	0x25, r24	; 37
     6dc:	08 95       	ret
     6de:	85 b5       	in	r24, 0x25	; 37
     6e0:	85 60       	ori	r24, 0x05	; 5
     6e2:	85 bd       	out	0x25, r24	; 37
     6e4:	08 95       	ret
     6e6:	85 b5       	in	r24, 0x25	; 37
     6e8:	86 60       	ori	r24, 0x06	; 6
     6ea:	85 bd       	out	0x25, r24	; 37
     6ec:	08 95       	ret
     6ee:	85 b5       	in	r24, 0x25	; 37
     6f0:	87 60       	ori	r24, 0x07	; 7
     6f2:	85 bd       	out	0x25, r24	; 37
     6f4:	08 95       	ret

000006f6 <timer2_timer_stop>:
}

void timer2_timer_stop()
{
	number_of_overflows = 0;
     6f6:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <number_of_overflows>
	TCCR2 = 0x00; // stop the timer
     6fa:	15 bc       	out	0x25, r1	; 37
     6fc:	08 95       	ret

000006fe <__vector_5>:
}

// Timer 2 over flow interrupt service routine function
ISR(TIMER_2_OVF)
{
     6fe:	1f 92       	push	r1
     700:	0f 92       	push	r0
     702:	0f b6       	in	r0, 0x3f	; 63
     704:	0f 92       	push	r0
     706:	11 24       	eor	r1, r1
     708:	2f 93       	push	r18
     70a:	3f 93       	push	r19
     70c:	4f 93       	push	r20
     70e:	5f 93       	push	r21
     710:	6f 93       	push	r22
     712:	7f 93       	push	r23
     714:	8f 93       	push	r24
     716:	9f 93       	push	r25
     718:	af 93       	push	r26
     71a:	bf 93       	push	r27
     71c:	ef 93       	push	r30
     71e:	ff 93       	push	r31
	timer2_set_initial_value(Timer_initial_value);
     720:	8b e0       	ldi	r24, 0x0B	; 11
     722:	0e 94 44 03 	call	0x688	; 0x688 <timer2_set_initial_value>
	++number_of_overflows;
     726:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <number_of_overflows>
     72a:	8f 5f       	subi	r24, 0xFF	; 255
     72c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <number_of_overflows>
	if(number_of_overflows)
     730:	88 23       	and	r24, r24
     732:	21 f0       	breq	.+8      	; 0x73c <__vector_5+0x3e>
	{
		DIO_toggle(port_D,PIN_6);
     734:	66 e0       	ldi	r22, 0x06	; 6
     736:	84 e4       	ldi	r24, 0x44	; 68
     738:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <DIO_toggle>
	}
     73c:	ff 91       	pop	r31
     73e:	ef 91       	pop	r30
     740:	bf 91       	pop	r27
     742:	af 91       	pop	r26
     744:	9f 91       	pop	r25
     746:	8f 91       	pop	r24
     748:	7f 91       	pop	r23
     74a:	6f 91       	pop	r22
     74c:	5f 91       	pop	r21
     74e:	4f 91       	pop	r20
     750:	3f 91       	pop	r19
     752:	2f 91       	pop	r18
     754:	0f 90       	pop	r0
     756:	0f be       	out	0x3f, r0	; 63
     758:	0f 90       	pop	r0
     75a:	1f 90       	pop	r1
     75c:	18 95       	reti

0000075e <TWI_init>:
	set_pin(TWCR,TWINT);
	set_pin(TWCR,TWEN);
	
	while (!( TWCR & (1 << TWINT) )); // Wait for TWINT Flag set
	
	*data = TWDR;
     75e:	11 b8       	out	0x01, r1	; 1
     760:	61 b1       	in	r22, 0x01	; 1
     762:	63 70       	andi	r22, 0x03	; 3
     764:	70 e0       	ldi	r23, 0x00	; 0
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	0e 94 9a 05 	call	0xb34	; 0xb34 <__floatsisf>
     76e:	9b 01       	movw	r18, r22
     770:	ac 01       	movw	r20, r24
     772:	60 e0       	ldi	r22, 0x00	; 0
     774:	70 e0       	ldi	r23, 0x00	; 0
     776:	80 e8       	ldi	r24, 0x80	; 128
     778:	90 e4       	ldi	r25, 0x40	; 64
     77a:	0e 94 26 06 	call	0xc4c	; 0xc4c <pow>
     77e:	9b 01       	movw	r18, r22
     780:	ac 01       	movw	r20, r24
     782:	0e 94 8b 04 	call	0x916	; 0x916 <__addsf3>
     786:	9b 01       	movw	r18, r22
     788:	ac 01       	movw	r20, r24
     78a:	60 e0       	ldi	r22, 0x00	; 0
     78c:	70 e0       	ldi	r23, 0x00	; 0
     78e:	80 e8       	ldi	r24, 0x80	; 128
     790:	9f e4       	ldi	r25, 0x4F	; 79
     792:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__divsf3>
     796:	0e 94 69 05 	call	0xad2	; 0xad2 <__fixunssfsi>
     79a:	60 b9       	out	0x00, r22	; 0
     79c:	08 95       	ret

0000079e <TWI_start>:
     79e:	96 b7       	in	r25, 0x36	; 54
     7a0:	90 68       	ori	r25, 0x80	; 128
     7a2:	96 bf       	out	0x36, r25	; 54
     7a4:	96 b7       	in	r25, 0x36	; 54
     7a6:	90 62       	ori	r25, 0x20	; 32
     7a8:	96 bf       	out	0x36, r25	; 54
     7aa:	96 b7       	in	r25, 0x36	; 54
     7ac:	94 60       	ori	r25, 0x04	; 4
     7ae:	96 bf       	out	0x36, r25	; 54
     7b0:	06 b6       	in	r0, 0x36	; 54
     7b2:	07 fe       	sbrs	r0, 7
     7b4:	fd cf       	rjmp	.-6      	; 0x7b0 <TWI_start+0x12>
     7b6:	83 b9       	out	0x03, r24	; 3
     7b8:	86 b7       	in	r24, 0x36	; 54
     7ba:	80 68       	ori	r24, 0x80	; 128
     7bc:	86 bf       	out	0x36, r24	; 54
     7be:	86 b7       	in	r24, 0x36	; 54
     7c0:	84 60       	ori	r24, 0x04	; 4
     7c2:	86 bf       	out	0x36, r24	; 54
     7c4:	06 b6       	in	r0, 0x36	; 54
     7c6:	07 fe       	sbrs	r0, 7
     7c8:	fd cf       	rjmp	.-6      	; 0x7c4 <TWI_start+0x26>
     7ca:	08 95       	ret

000007cc <TWI_write_addr>:
     7cc:	83 b9       	out	0x03, r24	; 3
     7ce:	86 b7       	in	r24, 0x36	; 54
     7d0:	80 68       	ori	r24, 0x80	; 128
     7d2:	86 bf       	out	0x36, r24	; 54
     7d4:	86 b7       	in	r24, 0x36	; 54
     7d6:	84 60       	ori	r24, 0x04	; 4
     7d8:	86 bf       	out	0x36, r24	; 54
     7da:	06 b6       	in	r0, 0x36	; 54
     7dc:	07 fe       	sbrs	r0, 7
     7de:	fd cf       	rjmp	.-6      	; 0x7da <TWI_write_addr+0xe>
     7e0:	08 95       	ret

000007e2 <TWI_write_data>:
     7e2:	83 b9       	out	0x03, r24	; 3
     7e4:	86 b7       	in	r24, 0x36	; 54
     7e6:	80 68       	ori	r24, 0x80	; 128
     7e8:	86 bf       	out	0x36, r24	; 54
     7ea:	86 b7       	in	r24, 0x36	; 54
     7ec:	84 60       	ori	r24, 0x04	; 4
     7ee:	86 bf       	out	0x36, r24	; 54
     7f0:	06 b6       	in	r0, 0x36	; 54
     7f2:	07 fe       	sbrs	r0, 7
     7f4:	fd cf       	rjmp	.-6      	; 0x7f0 <TWI_write_data+0xe>
     7f6:	08 95       	ret

000007f8 <TWI_read_ack>:
     7f8:	fc 01       	movw	r30, r24
     7fa:	96 b7       	in	r25, 0x36	; 54
     7fc:	90 68       	ori	r25, 0x80	; 128
     7fe:	96 bf       	out	0x36, r25	; 54
     800:	96 b7       	in	r25, 0x36	; 54
     802:	94 60       	ori	r25, 0x04	; 4
     804:	96 bf       	out	0x36, r25	; 54
     806:	96 b7       	in	r25, 0x36	; 54
     808:	90 64       	ori	r25, 0x40	; 64
     80a:	96 bf       	out	0x36, r25	; 54
     80c:	06 b6       	in	r0, 0x36	; 54
     80e:	07 fe       	sbrs	r0, 7
     810:	fd cf       	rjmp	.-6      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     812:	83 b1       	in	r24, 0x03	; 3
     814:	80 83       	st	Z, r24
     816:	08 95       	ret

00000818 <TWI_stop>:
}


void TWI_stop()
{
	TWCR = (1 << TWSTO) | (1 << TWINT) | (1 << TWEN);// Enable TWI, generate stop
     818:	84 e9       	ldi	r24, 0x94	; 148
     81a:	86 bf       	out	0x36, r24	; 54
	while( TWCR & (1 << TWSTO) );	// Wait until stop condition execution 
     81c:	06 b6       	in	r0, 0x36	; 54
     81e:	04 fc       	sbrc	r0, 4
     820:	fd cf       	rjmp	.-6      	; 0x81c <TWI_stop+0x4>
}
     822:	08 95       	ret

00000824 <UART_set_BAUD>:
	UART_set_frame(Data_bits,Stop_bits);
}

void UART_set_BAUD(uint16_t baud)
{
	UBRRH = (uint8_t)(baud >> 8); // Higher nibble
     824:	90 bd       	out	0x20, r25	; 32
	UBRRL = (uint8_t)baud; // lower nibble
     826:	89 b9       	out	0x09, r24	; 9
     828:	08 95       	ret

0000082a <UART_set_frame>:
}

void UART_set_frame(uint8_t bitnum, uint8_t stopbits)
{
	switch(bitnum)
     82a:	87 30       	cpi	r24, 0x07	; 7
     82c:	f9 f0       	breq	.+62     	; 0x86c <__stack+0xd>
     82e:	28 f4       	brcc	.+10     	; 0x83a <UART_set_frame+0x10>
     830:	85 30       	cpi	r24, 0x05	; 5
     832:	41 f0       	breq	.+16     	; 0x844 <UART_set_frame+0x1a>
     834:	86 30       	cpi	r24, 0x06	; 6
     836:	81 f0       	breq	.+32     	; 0x858 <UART_set_frame+0x2e>
     838:	36 c0       	rjmp	.+108    	; 0x8a6 <__stack+0x47>
     83a:	88 30       	cpi	r24, 0x08	; 8
     83c:	09 f1       	breq	.+66     	; 0x880 <__stack+0x21>
     83e:	89 30       	cpi	r24, 0x09	; 9
     840:	49 f1       	breq	.+82     	; 0x894 <__stack+0x35>
     842:	31 c0       	rjmp	.+98     	; 0x8a6 <__stack+0x47>
	{
		// 5 bits character size
		case 5:
		clr_pin(UCSRC,UCSZ0);
     844:	80 b5       	in	r24, 0x20	; 32
     846:	8d 7f       	andi	r24, 0xFD	; 253
     848:	80 bd       	out	0x20, r24	; 32
		clr_pin(UCSRC,UCSZ1);
     84a:	80 b5       	in	r24, 0x20	; 32
     84c:	8b 7f       	andi	r24, 0xFB	; 251
     84e:	80 bd       	out	0x20, r24	; 32
		clr_pin(UCSRB,UCSZ2);
     850:	8a b1       	in	r24, 0x0a	; 10
     852:	8b 7f       	andi	r24, 0xFB	; 251
     854:	8a b9       	out	0x0a, r24	; 10
		break;
     856:	27 c0       	rjmp	.+78     	; 0x8a6 <__stack+0x47>
		// 6 bits character size
		case 6:
		set_pin(UCSRC,UCSZ0);
     858:	80 b5       	in	r24, 0x20	; 32
     85a:	82 60       	ori	r24, 0x02	; 2
     85c:	80 bd       	out	0x20, r24	; 32
		clr_pin(UCSRC,UCSZ1);
     85e:	80 b5       	in	r24, 0x20	; 32
     860:	8b 7f       	andi	r24, 0xFB	; 251
     862:	80 bd       	out	0x20, r24	; 32
		clr_pin(UCSRB,UCSZ2);
     864:	8a b1       	in	r24, 0x0a	; 10
     866:	8b 7f       	andi	r24, 0xFB	; 251
     868:	8a b9       	out	0x0a, r24	; 10
		break;
     86a:	1d c0       	rjmp	.+58     	; 0x8a6 <__stack+0x47>
		// 7 bits character size
		case 7:
		clr_pin(UCSRC,UCSZ0);
     86c:	80 b5       	in	r24, 0x20	; 32
     86e:	8d 7f       	andi	r24, 0xFD	; 253
     870:	80 bd       	out	0x20, r24	; 32
		set_pin(UCSRC,UCSZ1);
     872:	80 b5       	in	r24, 0x20	; 32
     874:	84 60       	ori	r24, 0x04	; 4
     876:	80 bd       	out	0x20, r24	; 32
		clr_pin(UCSRB,UCSZ2);
     878:	8a b1       	in	r24, 0x0a	; 10
     87a:	8b 7f       	andi	r24, 0xFB	; 251
     87c:	8a b9       	out	0x0a, r24	; 10
		break;
     87e:	13 c0       	rjmp	.+38     	; 0x8a6 <__stack+0x47>
		// 8 bits character size
		case 8:
		set_pin(UCSRC,UCSZ0);
     880:	80 b5       	in	r24, 0x20	; 32
     882:	82 60       	ori	r24, 0x02	; 2
     884:	80 bd       	out	0x20, r24	; 32
		set_pin(UCSRC,UCSZ1);
     886:	80 b5       	in	r24, 0x20	; 32
     888:	84 60       	ori	r24, 0x04	; 4
     88a:	80 bd       	out	0x20, r24	; 32
		clr_pin(UCSRB,UCSZ2);
     88c:	8a b1       	in	r24, 0x0a	; 10
     88e:	8b 7f       	andi	r24, 0xFB	; 251
     890:	8a b9       	out	0x0a, r24	; 10
		break;
     892:	09 c0       	rjmp	.+18     	; 0x8a6 <__stack+0x47>
		// 9 bits character size
		case 9:
		set_pin(UCSRC,UCSZ0);
     894:	80 b5       	in	r24, 0x20	; 32
     896:	82 60       	ori	r24, 0x02	; 2
     898:	80 bd       	out	0x20, r24	; 32
		set_pin(UCSRC,UCSZ1);
     89a:	80 b5       	in	r24, 0x20	; 32
     89c:	84 60       	ori	r24, 0x04	; 4
     89e:	80 bd       	out	0x20, r24	; 32
		set_pin(UCSRB,UCSZ2);
     8a0:	8a b1       	in	r24, 0x0a	; 10
     8a2:	84 60       	ori	r24, 0x04	; 4
     8a4:	8a b9       	out	0x0a, r24	; 10
		default:
		{
			// error handling
		}
	}
	switch(stopbits)
     8a6:	61 30       	cpi	r22, 0x01	; 1
     8a8:	19 f0       	breq	.+6      	; 0x8b0 <__stack+0x51>
     8aa:	62 30       	cpi	r22, 0x02	; 2
     8ac:	29 f0       	breq	.+10     	; 0x8b8 <__stack+0x59>
     8ae:	08 95       	ret
	{
		// 1 stop bit
		case 1:
		clr_pin(UCSRC,USBS);
     8b0:	80 b5       	in	r24, 0x20	; 32
     8b2:	87 7f       	andi	r24, 0xF7	; 247
     8b4:	80 bd       	out	0x20, r24	; 32
		break;
     8b6:	08 95       	ret
		// 2 stop bit
		case 2:
		set_pin(UCSRC,USBS);
     8b8:	80 b5       	in	r24, 0x20	; 32
     8ba:	88 60       	ori	r24, 0x08	; 8
     8bc:	80 bd       	out	0x20, r24	; 32
     8be:	08 95       	ret

000008c0 <UART_init>:
#include "UART_2.h"

void UART_init()
{
	// Set baud rate
	UART_set_BAUD(BAUD_rate);
     8c0:	83 e3       	ldi	r24, 0x33	; 51
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	0e 94 12 04 	call	0x824	; 0x824 <UART_set_BAUD>
	
	// Enable receiver and transmitter
	set_pin(UCSRB,RXEN);
     8c8:	8a b1       	in	r24, 0x0a	; 10
     8ca:	80 61       	ori	r24, 0x10	; 16
     8cc:	8a b9       	out	0x0a, r24	; 10
	set_pin(UCSRB,TXEN);
     8ce:	8a b1       	in	r24, 0x0a	; 10
     8d0:	88 60       	ori	r24, 0x08	; 8
     8d2:	8a b9       	out	0x0a, r24	; 10
	
	// Set frame format
	UART_set_frame(Data_bits,Stop_bits);
     8d4:	61 e0       	ldi	r22, 0x01	; 1
     8d6:	88 e0       	ldi	r24, 0x08	; 8
     8d8:	0e 94 15 04 	call	0x82a	; 0x82a <UART_set_frame>
     8dc:	08 95       	ret

000008de <UART_transmit>:
}

void UART_transmit(uint8_t data)
{
	// Wait for empty transmit buffer
	while ( !( UCSRA & (1 << UDRE)) );
     8de:	5d 9b       	sbis	0x0b, 5	; 11
     8e0:	fe cf       	rjmp	.-4      	; 0x8de <UART_transmit>
	
	// Put data into buffer, sends the data
	UDR = data;
     8e2:	8c b9       	out	0x0c, r24	; 12
     8e4:	08 95       	ret

000008e6 <UART_receive>:
}

uint8_t UART_receive()
{
	/* Wait for data to be received */
	while ( !( UCSRA & (1 << RXC)) );
     8e6:	5f 9b       	sbis	0x0b, 7	; 11
     8e8:	fe cf       	rjmp	.-4      	; 0x8e6 <UART_receive>
	
	/* Get and return received data from buffer */
	return UDR;
     8ea:	8c b1       	in	r24, 0x0c	; 12
}
     8ec:	08 95       	ret

000008ee <UART_receiveString>:

void UART_receiveString(uint8_t *string)
{
     8ee:	0f 93       	push	r16
     8f0:	1f 93       	push	r17
     8f2:	cf 93       	push	r28
     8f4:	8c 01       	movw	r16, r24
	for(uint8_t cnt=0; ; cnt++)
     8f6:	c0 e0       	ldi	r28, 0x00	; 0
	{
		*(string + cnt) = UART_receive();
     8f8:	0e 94 73 04 	call	0x8e6	; 0x8e6 <UART_receive>
     8fc:	f8 01       	movw	r30, r16
     8fe:	ec 0f       	add	r30, r28
     900:	f1 1d       	adc	r31, r1
     902:	80 83       	st	Z, r24
		if(*(string + cnt) == '\0')
     904:	88 23       	and	r24, r24
     906:	11 f0       	breq	.+4      	; 0x90c <UART_receiveString+0x1e>
	return UDR;
}

void UART_receiveString(uint8_t *string)
{
	for(uint8_t cnt=0; ; cnt++)
     908:	cf 5f       	subi	r28, 0xFF	; 255
	{
		*(string + cnt) = UART_receive();
		if(*(string + cnt) == '\0')
			break;
	}
     90a:	f6 cf       	rjmp	.-20     	; 0x8f8 <UART_receiveString+0xa>
     90c:	cf 91       	pop	r28
     90e:	1f 91       	pop	r17
     910:	0f 91       	pop	r16
     912:	08 95       	ret

00000914 <__subsf3>:
     914:	50 58       	subi	r21, 0x80	; 128

00000916 <__addsf3>:
     916:	bb 27       	eor	r27, r27
     918:	aa 27       	eor	r26, r26
     91a:	0e 94 a2 04 	call	0x944	; 0x944 <__addsf3x>
     91e:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <__fp_round>
     922:	0e 94 de 05 	call	0xbbc	; 0xbbc <__fp_pscA>
     926:	38 f0       	brcs	.+14     	; 0x936 <__addsf3+0x20>
     928:	0e 94 e5 05 	call	0xbca	; 0xbca <__fp_pscB>
     92c:	20 f0       	brcs	.+8      	; 0x936 <__addsf3+0x20>
     92e:	39 f4       	brne	.+14     	; 0x93e <__addsf3+0x28>
     930:	9f 3f       	cpi	r25, 0xFF	; 255
     932:	19 f4       	brne	.+6      	; 0x93a <__addsf3+0x24>
     934:	26 f4       	brtc	.+8      	; 0x93e <__addsf3+0x28>
     936:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__fp_nan>
     93a:	0e f4       	brtc	.+2      	; 0x93e <__addsf3+0x28>
     93c:	e0 95       	com	r30
     93e:	e7 fb       	bst	r30, 7
     940:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <__fp_inf>

00000944 <__addsf3x>:
     944:	e9 2f       	mov	r30, r25
     946:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__fp_split3>
     94a:	58 f3       	brcs	.-42     	; 0x922 <__addsf3+0xc>
     94c:	ba 17       	cp	r27, r26
     94e:	62 07       	cpc	r22, r18
     950:	73 07       	cpc	r23, r19
     952:	84 07       	cpc	r24, r20
     954:	95 07       	cpc	r25, r21
     956:	20 f0       	brcs	.+8      	; 0x960 <__addsf3x+0x1c>
     958:	79 f4       	brne	.+30     	; 0x978 <__addsf3x+0x34>
     95a:	a6 f5       	brtc	.+104    	; 0x9c4 <__addsf3x+0x80>
     95c:	0c 94 1f 06 	jmp	0xc3e	; 0xc3e <__fp_zero>
     960:	0e f4       	brtc	.+2      	; 0x964 <__addsf3x+0x20>
     962:	e0 95       	com	r30
     964:	0b 2e       	mov	r0, r27
     966:	ba 2f       	mov	r27, r26
     968:	a0 2d       	mov	r26, r0
     96a:	0b 01       	movw	r0, r22
     96c:	b9 01       	movw	r22, r18
     96e:	90 01       	movw	r18, r0
     970:	0c 01       	movw	r0, r24
     972:	ca 01       	movw	r24, r20
     974:	a0 01       	movw	r20, r0
     976:	11 24       	eor	r1, r1
     978:	ff 27       	eor	r31, r31
     97a:	59 1b       	sub	r21, r25
     97c:	99 f0       	breq	.+38     	; 0x9a4 <__addsf3x+0x60>
     97e:	59 3f       	cpi	r21, 0xF9	; 249
     980:	50 f4       	brcc	.+20     	; 0x996 <__addsf3x+0x52>
     982:	50 3e       	cpi	r21, 0xE0	; 224
     984:	68 f1       	brcs	.+90     	; 0x9e0 <__addsf3x+0x9c>
     986:	1a 16       	cp	r1, r26
     988:	f0 40       	sbci	r31, 0x00	; 0
     98a:	a2 2f       	mov	r26, r18
     98c:	23 2f       	mov	r18, r19
     98e:	34 2f       	mov	r19, r20
     990:	44 27       	eor	r20, r20
     992:	58 5f       	subi	r21, 0xF8	; 248
     994:	f3 cf       	rjmp	.-26     	; 0x97c <__addsf3x+0x38>
     996:	46 95       	lsr	r20
     998:	37 95       	ror	r19
     99a:	27 95       	ror	r18
     99c:	a7 95       	ror	r26
     99e:	f0 40       	sbci	r31, 0x00	; 0
     9a0:	53 95       	inc	r21
     9a2:	c9 f7       	brne	.-14     	; 0x996 <__addsf3x+0x52>
     9a4:	7e f4       	brtc	.+30     	; 0x9c4 <__addsf3x+0x80>
     9a6:	1f 16       	cp	r1, r31
     9a8:	ba 0b       	sbc	r27, r26
     9aa:	62 0b       	sbc	r22, r18
     9ac:	73 0b       	sbc	r23, r19
     9ae:	84 0b       	sbc	r24, r20
     9b0:	ba f0       	brmi	.+46     	; 0x9e0 <__addsf3x+0x9c>
     9b2:	91 50       	subi	r25, 0x01	; 1
     9b4:	a1 f0       	breq	.+40     	; 0x9de <__addsf3x+0x9a>
     9b6:	ff 0f       	add	r31, r31
     9b8:	bb 1f       	adc	r27, r27
     9ba:	66 1f       	adc	r22, r22
     9bc:	77 1f       	adc	r23, r23
     9be:	88 1f       	adc	r24, r24
     9c0:	c2 f7       	brpl	.-16     	; 0x9b2 <__addsf3x+0x6e>
     9c2:	0e c0       	rjmp	.+28     	; 0x9e0 <__addsf3x+0x9c>
     9c4:	ba 0f       	add	r27, r26
     9c6:	62 1f       	adc	r22, r18
     9c8:	73 1f       	adc	r23, r19
     9ca:	84 1f       	adc	r24, r20
     9cc:	48 f4       	brcc	.+18     	; 0x9e0 <__addsf3x+0x9c>
     9ce:	87 95       	ror	r24
     9d0:	77 95       	ror	r23
     9d2:	67 95       	ror	r22
     9d4:	b7 95       	ror	r27
     9d6:	f7 95       	ror	r31
     9d8:	9e 3f       	cpi	r25, 0xFE	; 254
     9da:	08 f0       	brcs	.+2      	; 0x9de <__addsf3x+0x9a>
     9dc:	b0 cf       	rjmp	.-160    	; 0x93e <__addsf3+0x28>
     9de:	93 95       	inc	r25
     9e0:	88 0f       	add	r24, r24
     9e2:	08 f0       	brcs	.+2      	; 0x9e6 <__addsf3x+0xa2>
     9e4:	99 27       	eor	r25, r25
     9e6:	ee 0f       	add	r30, r30
     9e8:	97 95       	ror	r25
     9ea:	87 95       	ror	r24
     9ec:	08 95       	ret

000009ee <__divsf3>:
     9ee:	0e 94 0b 05 	call	0xa16	; 0xa16 <__divsf3x>
     9f2:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <__fp_round>
     9f6:	0e 94 e5 05 	call	0xbca	; 0xbca <__fp_pscB>
     9fa:	58 f0       	brcs	.+22     	; 0xa12 <__divsf3+0x24>
     9fc:	0e 94 de 05 	call	0xbbc	; 0xbbc <__fp_pscA>
     a00:	40 f0       	brcs	.+16     	; 0xa12 <__divsf3+0x24>
     a02:	29 f4       	brne	.+10     	; 0xa0e <__divsf3+0x20>
     a04:	5f 3f       	cpi	r21, 0xFF	; 255
     a06:	29 f0       	breq	.+10     	; 0xa12 <__divsf3+0x24>
     a08:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <__fp_inf>
     a0c:	51 11       	cpse	r21, r1
     a0e:	0c 94 20 06 	jmp	0xc40	; 0xc40 <__fp_szero>
     a12:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__fp_nan>

00000a16 <__divsf3x>:
     a16:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__fp_split3>
     a1a:	68 f3       	brcs	.-38     	; 0x9f6 <__divsf3+0x8>

00000a1c <__divsf3_pse>:
     a1c:	99 23       	and	r25, r25
     a1e:	b1 f3       	breq	.-20     	; 0xa0c <__divsf3+0x1e>
     a20:	55 23       	and	r21, r21
     a22:	91 f3       	breq	.-28     	; 0xa08 <__divsf3+0x1a>
     a24:	95 1b       	sub	r25, r21
     a26:	55 0b       	sbc	r21, r21
     a28:	bb 27       	eor	r27, r27
     a2a:	aa 27       	eor	r26, r26
     a2c:	62 17       	cp	r22, r18
     a2e:	73 07       	cpc	r23, r19
     a30:	84 07       	cpc	r24, r20
     a32:	38 f0       	brcs	.+14     	; 0xa42 <__divsf3_pse+0x26>
     a34:	9f 5f       	subi	r25, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	22 0f       	add	r18, r18
     a3a:	33 1f       	adc	r19, r19
     a3c:	44 1f       	adc	r20, r20
     a3e:	aa 1f       	adc	r26, r26
     a40:	a9 f3       	breq	.-22     	; 0xa2c <__divsf3_pse+0x10>
     a42:	35 d0       	rcall	.+106    	; 0xaae <__divsf3_pse+0x92>
     a44:	0e 2e       	mov	r0, r30
     a46:	3a f0       	brmi	.+14     	; 0xa56 <__divsf3_pse+0x3a>
     a48:	e0 e8       	ldi	r30, 0x80	; 128
     a4a:	32 d0       	rcall	.+100    	; 0xab0 <__divsf3_pse+0x94>
     a4c:	91 50       	subi	r25, 0x01	; 1
     a4e:	50 40       	sbci	r21, 0x00	; 0
     a50:	e6 95       	lsr	r30
     a52:	00 1c       	adc	r0, r0
     a54:	ca f7       	brpl	.-14     	; 0xa48 <__divsf3_pse+0x2c>
     a56:	2b d0       	rcall	.+86     	; 0xaae <__divsf3_pse+0x92>
     a58:	fe 2f       	mov	r31, r30
     a5a:	29 d0       	rcall	.+82     	; 0xaae <__divsf3_pse+0x92>
     a5c:	66 0f       	add	r22, r22
     a5e:	77 1f       	adc	r23, r23
     a60:	88 1f       	adc	r24, r24
     a62:	bb 1f       	adc	r27, r27
     a64:	26 17       	cp	r18, r22
     a66:	37 07       	cpc	r19, r23
     a68:	48 07       	cpc	r20, r24
     a6a:	ab 07       	cpc	r26, r27
     a6c:	b0 e8       	ldi	r27, 0x80	; 128
     a6e:	09 f0       	breq	.+2      	; 0xa72 <__divsf3_pse+0x56>
     a70:	bb 0b       	sbc	r27, r27
     a72:	80 2d       	mov	r24, r0
     a74:	bf 01       	movw	r22, r30
     a76:	ff 27       	eor	r31, r31
     a78:	93 58       	subi	r25, 0x83	; 131
     a7a:	5f 4f       	sbci	r21, 0xFF	; 255
     a7c:	3a f0       	brmi	.+14     	; 0xa8c <__divsf3_pse+0x70>
     a7e:	9e 3f       	cpi	r25, 0xFE	; 254
     a80:	51 05       	cpc	r21, r1
     a82:	78 f0       	brcs	.+30     	; 0xaa2 <__divsf3_pse+0x86>
     a84:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <__fp_inf>
     a88:	0c 94 20 06 	jmp	0xc40	; 0xc40 <__fp_szero>
     a8c:	5f 3f       	cpi	r21, 0xFF	; 255
     a8e:	e4 f3       	brlt	.-8      	; 0xa88 <__divsf3_pse+0x6c>
     a90:	98 3e       	cpi	r25, 0xE8	; 232
     a92:	d4 f3       	brlt	.-12     	; 0xa88 <__divsf3_pse+0x6c>
     a94:	86 95       	lsr	r24
     a96:	77 95       	ror	r23
     a98:	67 95       	ror	r22
     a9a:	b7 95       	ror	r27
     a9c:	f7 95       	ror	r31
     a9e:	9f 5f       	subi	r25, 0xFF	; 255
     aa0:	c9 f7       	brne	.-14     	; 0xa94 <__divsf3_pse+0x78>
     aa2:	88 0f       	add	r24, r24
     aa4:	91 1d       	adc	r25, r1
     aa6:	96 95       	lsr	r25
     aa8:	87 95       	ror	r24
     aaa:	97 f9       	bld	r25, 7
     aac:	08 95       	ret
     aae:	e1 e0       	ldi	r30, 0x01	; 1
     ab0:	66 0f       	add	r22, r22
     ab2:	77 1f       	adc	r23, r23
     ab4:	88 1f       	adc	r24, r24
     ab6:	bb 1f       	adc	r27, r27
     ab8:	62 17       	cp	r22, r18
     aba:	73 07       	cpc	r23, r19
     abc:	84 07       	cpc	r24, r20
     abe:	ba 07       	cpc	r27, r26
     ac0:	20 f0       	brcs	.+8      	; 0xaca <__divsf3_pse+0xae>
     ac2:	62 1b       	sub	r22, r18
     ac4:	73 0b       	sbc	r23, r19
     ac6:	84 0b       	sbc	r24, r20
     ac8:	ba 0b       	sbc	r27, r26
     aca:	ee 1f       	adc	r30, r30
     acc:	88 f7       	brcc	.-30     	; 0xab0 <__divsf3_pse+0x94>
     ace:	e0 95       	com	r30
     ad0:	08 95       	ret

00000ad2 <__fixunssfsi>:
     ad2:	0e 94 05 06 	call	0xc0a	; 0xc0a <__fp_splitA>
     ad6:	88 f0       	brcs	.+34     	; 0xafa <__fixunssfsi+0x28>
     ad8:	9f 57       	subi	r25, 0x7F	; 127
     ada:	98 f0       	brcs	.+38     	; 0xb02 <__fixunssfsi+0x30>
     adc:	b9 2f       	mov	r27, r25
     ade:	99 27       	eor	r25, r25
     ae0:	b7 51       	subi	r27, 0x17	; 23
     ae2:	b0 f0       	brcs	.+44     	; 0xb10 <__fixunssfsi+0x3e>
     ae4:	e1 f0       	breq	.+56     	; 0xb1e <__fixunssfsi+0x4c>
     ae6:	66 0f       	add	r22, r22
     ae8:	77 1f       	adc	r23, r23
     aea:	88 1f       	adc	r24, r24
     aec:	99 1f       	adc	r25, r25
     aee:	1a f0       	brmi	.+6      	; 0xaf6 <__fixunssfsi+0x24>
     af0:	ba 95       	dec	r27
     af2:	c9 f7       	brne	.-14     	; 0xae6 <__fixunssfsi+0x14>
     af4:	14 c0       	rjmp	.+40     	; 0xb1e <__fixunssfsi+0x4c>
     af6:	b1 30       	cpi	r27, 0x01	; 1
     af8:	91 f0       	breq	.+36     	; 0xb1e <__fixunssfsi+0x4c>
     afa:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__fp_zero>
     afe:	b1 e0       	ldi	r27, 0x01	; 1
     b00:	08 95       	ret
     b02:	0c 94 1f 06 	jmp	0xc3e	; 0xc3e <__fp_zero>
     b06:	67 2f       	mov	r22, r23
     b08:	78 2f       	mov	r23, r24
     b0a:	88 27       	eor	r24, r24
     b0c:	b8 5f       	subi	r27, 0xF8	; 248
     b0e:	39 f0       	breq	.+14     	; 0xb1e <__fixunssfsi+0x4c>
     b10:	b9 3f       	cpi	r27, 0xF9	; 249
     b12:	cc f3       	brlt	.-14     	; 0xb06 <__fixunssfsi+0x34>
     b14:	86 95       	lsr	r24
     b16:	77 95       	ror	r23
     b18:	67 95       	ror	r22
     b1a:	b3 95       	inc	r27
     b1c:	d9 f7       	brne	.-10     	; 0xb14 <__fixunssfsi+0x42>
     b1e:	3e f4       	brtc	.+14     	; 0xb2e <__fixunssfsi+0x5c>
     b20:	90 95       	com	r25
     b22:	80 95       	com	r24
     b24:	70 95       	com	r23
     b26:	61 95       	neg	r22
     b28:	7f 4f       	sbci	r23, 0xFF	; 255
     b2a:	8f 4f       	sbci	r24, 0xFF	; 255
     b2c:	9f 4f       	sbci	r25, 0xFF	; 255
     b2e:	08 95       	ret

00000b30 <__floatunsisf>:
     b30:	e8 94       	clt
     b32:	09 c0       	rjmp	.+18     	; 0xb46 <__floatsisf+0x12>

00000b34 <__floatsisf>:
     b34:	97 fb       	bst	r25, 7
     b36:	3e f4       	brtc	.+14     	; 0xb46 <__floatsisf+0x12>
     b38:	90 95       	com	r25
     b3a:	80 95       	com	r24
     b3c:	70 95       	com	r23
     b3e:	61 95       	neg	r22
     b40:	7f 4f       	sbci	r23, 0xFF	; 255
     b42:	8f 4f       	sbci	r24, 0xFF	; 255
     b44:	9f 4f       	sbci	r25, 0xFF	; 255
     b46:	99 23       	and	r25, r25
     b48:	a9 f0       	breq	.+42     	; 0xb74 <__floatsisf+0x40>
     b4a:	f9 2f       	mov	r31, r25
     b4c:	96 e9       	ldi	r25, 0x96	; 150
     b4e:	bb 27       	eor	r27, r27
     b50:	93 95       	inc	r25
     b52:	f6 95       	lsr	r31
     b54:	87 95       	ror	r24
     b56:	77 95       	ror	r23
     b58:	67 95       	ror	r22
     b5a:	b7 95       	ror	r27
     b5c:	f1 11       	cpse	r31, r1
     b5e:	f8 cf       	rjmp	.-16     	; 0xb50 <__floatsisf+0x1c>
     b60:	fa f4       	brpl	.+62     	; 0xba0 <__floatsisf+0x6c>
     b62:	bb 0f       	add	r27, r27
     b64:	11 f4       	brne	.+4      	; 0xb6a <__floatsisf+0x36>
     b66:	60 ff       	sbrs	r22, 0
     b68:	1b c0       	rjmp	.+54     	; 0xba0 <__floatsisf+0x6c>
     b6a:	6f 5f       	subi	r22, 0xFF	; 255
     b6c:	7f 4f       	sbci	r23, 0xFF	; 255
     b6e:	8f 4f       	sbci	r24, 0xFF	; 255
     b70:	9f 4f       	sbci	r25, 0xFF	; 255
     b72:	16 c0       	rjmp	.+44     	; 0xba0 <__floatsisf+0x6c>
     b74:	88 23       	and	r24, r24
     b76:	11 f0       	breq	.+4      	; 0xb7c <__floatsisf+0x48>
     b78:	96 e9       	ldi	r25, 0x96	; 150
     b7a:	11 c0       	rjmp	.+34     	; 0xb9e <__floatsisf+0x6a>
     b7c:	77 23       	and	r23, r23
     b7e:	21 f0       	breq	.+8      	; 0xb88 <__floatsisf+0x54>
     b80:	9e e8       	ldi	r25, 0x8E	; 142
     b82:	87 2f       	mov	r24, r23
     b84:	76 2f       	mov	r23, r22
     b86:	05 c0       	rjmp	.+10     	; 0xb92 <__floatsisf+0x5e>
     b88:	66 23       	and	r22, r22
     b8a:	71 f0       	breq	.+28     	; 0xba8 <__floatsisf+0x74>
     b8c:	96 e8       	ldi	r25, 0x86	; 134
     b8e:	86 2f       	mov	r24, r22
     b90:	70 e0       	ldi	r23, 0x00	; 0
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	2a f0       	brmi	.+10     	; 0xba0 <__floatsisf+0x6c>
     b96:	9a 95       	dec	r25
     b98:	66 0f       	add	r22, r22
     b9a:	77 1f       	adc	r23, r23
     b9c:	88 1f       	adc	r24, r24
     b9e:	da f7       	brpl	.-10     	; 0xb96 <__floatsisf+0x62>
     ba0:	88 0f       	add	r24, r24
     ba2:	96 95       	lsr	r25
     ba4:	87 95       	ror	r24
     ba6:	97 f9       	bld	r25, 7
     ba8:	08 95       	ret

00000baa <__fp_inf>:
     baa:	97 f9       	bld	r25, 7
     bac:	9f 67       	ori	r25, 0x7F	; 127
     bae:	80 e8       	ldi	r24, 0x80	; 128
     bb0:	70 e0       	ldi	r23, 0x00	; 0
     bb2:	60 e0       	ldi	r22, 0x00	; 0
     bb4:	08 95       	ret

00000bb6 <__fp_nan>:
     bb6:	9f ef       	ldi	r25, 0xFF	; 255
     bb8:	80 ec       	ldi	r24, 0xC0	; 192
     bba:	08 95       	ret

00000bbc <__fp_pscA>:
     bbc:	00 24       	eor	r0, r0
     bbe:	0a 94       	dec	r0
     bc0:	16 16       	cp	r1, r22
     bc2:	17 06       	cpc	r1, r23
     bc4:	18 06       	cpc	r1, r24
     bc6:	09 06       	cpc	r0, r25
     bc8:	08 95       	ret

00000bca <__fp_pscB>:
     bca:	00 24       	eor	r0, r0
     bcc:	0a 94       	dec	r0
     bce:	12 16       	cp	r1, r18
     bd0:	13 06       	cpc	r1, r19
     bd2:	14 06       	cpc	r1, r20
     bd4:	05 06       	cpc	r0, r21
     bd6:	08 95       	ret

00000bd8 <__fp_round>:
     bd8:	09 2e       	mov	r0, r25
     bda:	03 94       	inc	r0
     bdc:	00 0c       	add	r0, r0
     bde:	11 f4       	brne	.+4      	; 0xbe4 <__fp_round+0xc>
     be0:	88 23       	and	r24, r24
     be2:	52 f0       	brmi	.+20     	; 0xbf8 <__fp_round+0x20>
     be4:	bb 0f       	add	r27, r27
     be6:	40 f4       	brcc	.+16     	; 0xbf8 <__fp_round+0x20>
     be8:	bf 2b       	or	r27, r31
     bea:	11 f4       	brne	.+4      	; 0xbf0 <__fp_round+0x18>
     bec:	60 ff       	sbrs	r22, 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__fp_round+0x20>
     bf0:	6f 5f       	subi	r22, 0xFF	; 255
     bf2:	7f 4f       	sbci	r23, 0xFF	; 255
     bf4:	8f 4f       	sbci	r24, 0xFF	; 255
     bf6:	9f 4f       	sbci	r25, 0xFF	; 255
     bf8:	08 95       	ret

00000bfa <__fp_split3>:
     bfa:	57 fd       	sbrc	r21, 7
     bfc:	90 58       	subi	r25, 0x80	; 128
     bfe:	44 0f       	add	r20, r20
     c00:	55 1f       	adc	r21, r21
     c02:	59 f0       	breq	.+22     	; 0xc1a <__fp_splitA+0x10>
     c04:	5f 3f       	cpi	r21, 0xFF	; 255
     c06:	71 f0       	breq	.+28     	; 0xc24 <__fp_splitA+0x1a>
     c08:	47 95       	ror	r20

00000c0a <__fp_splitA>:
     c0a:	88 0f       	add	r24, r24
     c0c:	97 fb       	bst	r25, 7
     c0e:	99 1f       	adc	r25, r25
     c10:	61 f0       	breq	.+24     	; 0xc2a <__fp_splitA+0x20>
     c12:	9f 3f       	cpi	r25, 0xFF	; 255
     c14:	79 f0       	breq	.+30     	; 0xc34 <__fp_splitA+0x2a>
     c16:	87 95       	ror	r24
     c18:	08 95       	ret
     c1a:	12 16       	cp	r1, r18
     c1c:	13 06       	cpc	r1, r19
     c1e:	14 06       	cpc	r1, r20
     c20:	55 1f       	adc	r21, r21
     c22:	f2 cf       	rjmp	.-28     	; 0xc08 <__fp_split3+0xe>
     c24:	46 95       	lsr	r20
     c26:	f1 df       	rcall	.-30     	; 0xc0a <__fp_splitA>
     c28:	08 c0       	rjmp	.+16     	; 0xc3a <__fp_splitA+0x30>
     c2a:	16 16       	cp	r1, r22
     c2c:	17 06       	cpc	r1, r23
     c2e:	18 06       	cpc	r1, r24
     c30:	99 1f       	adc	r25, r25
     c32:	f1 cf       	rjmp	.-30     	; 0xc16 <__fp_splitA+0xc>
     c34:	86 95       	lsr	r24
     c36:	71 05       	cpc	r23, r1
     c38:	61 05       	cpc	r22, r1
     c3a:	08 94       	sec
     c3c:	08 95       	ret

00000c3e <__fp_zero>:
     c3e:	e8 94       	clt

00000c40 <__fp_szero>:
     c40:	bb 27       	eor	r27, r27
     c42:	66 27       	eor	r22, r22
     c44:	77 27       	eor	r23, r23
     c46:	cb 01       	movw	r24, r22
     c48:	97 f9       	bld	r25, 7
     c4a:	08 95       	ret

00000c4c <pow>:
     c4c:	fa 01       	movw	r30, r20
     c4e:	ee 0f       	add	r30, r30
     c50:	ff 1f       	adc	r31, r31
     c52:	30 96       	adiw	r30, 0x00	; 0
     c54:	21 05       	cpc	r18, r1
     c56:	31 05       	cpc	r19, r1
     c58:	a1 f1       	breq	.+104    	; 0xcc2 <pow+0x76>
     c5a:	61 15       	cp	r22, r1
     c5c:	71 05       	cpc	r23, r1
     c5e:	61 f4       	brne	.+24     	; 0xc78 <pow+0x2c>
     c60:	80 38       	cpi	r24, 0x80	; 128
     c62:	bf e3       	ldi	r27, 0x3F	; 63
     c64:	9b 07       	cpc	r25, r27
     c66:	49 f1       	breq	.+82     	; 0xcba <pow+0x6e>
     c68:	68 94       	set
     c6a:	90 38       	cpi	r25, 0x80	; 128
     c6c:	81 05       	cpc	r24, r1
     c6e:	61 f0       	breq	.+24     	; 0xc88 <pow+0x3c>
     c70:	80 38       	cpi	r24, 0x80	; 128
     c72:	bf ef       	ldi	r27, 0xFF	; 255
     c74:	9b 07       	cpc	r25, r27
     c76:	41 f0       	breq	.+16     	; 0xc88 <pow+0x3c>
     c78:	99 23       	and	r25, r25
     c7a:	4a f5       	brpl	.+82     	; 0xcce <pow+0x82>
     c7c:	ff 3f       	cpi	r31, 0xFF	; 255
     c7e:	e1 05       	cpc	r30, r1
     c80:	31 05       	cpc	r19, r1
     c82:	21 05       	cpc	r18, r1
     c84:	19 f1       	breq	.+70     	; 0xccc <pow+0x80>
     c86:	e8 94       	clt
     c88:	08 94       	sec
     c8a:	e7 95       	ror	r30
     c8c:	d9 01       	movw	r26, r18
     c8e:	aa 23       	and	r26, r26
     c90:	29 f4       	brne	.+10     	; 0xc9c <pow+0x50>
     c92:	ab 2f       	mov	r26, r27
     c94:	be 2f       	mov	r27, r30
     c96:	f8 5f       	subi	r31, 0xF8	; 248
     c98:	d0 f3       	brcs	.-12     	; 0xc8e <pow+0x42>
     c9a:	10 c0       	rjmp	.+32     	; 0xcbc <pow+0x70>
     c9c:	ff 5f       	subi	r31, 0xFF	; 255
     c9e:	70 f4       	brcc	.+28     	; 0xcbc <pow+0x70>
     ca0:	a6 95       	lsr	r26
     ca2:	e0 f7       	brcc	.-8      	; 0xc9c <pow+0x50>
     ca4:	f7 39       	cpi	r31, 0x97	; 151
     ca6:	50 f0       	brcs	.+20     	; 0xcbc <pow+0x70>
     ca8:	19 f0       	breq	.+6      	; 0xcb0 <pow+0x64>
     caa:	ff 3a       	cpi	r31, 0xAF	; 175
     cac:	38 f4       	brcc	.+14     	; 0xcbc <pow+0x70>
     cae:	9f 77       	andi	r25, 0x7F	; 127
     cb0:	9f 93       	push	r25
     cb2:	0d d0       	rcall	.+26     	; 0xcce <pow+0x82>
     cb4:	0f 90       	pop	r0
     cb6:	07 fc       	sbrc	r0, 7
     cb8:	90 58       	subi	r25, 0x80	; 128
     cba:	08 95       	ret
     cbc:	46 f0       	brts	.+16     	; 0xcce <pow+0x82>
     cbe:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__fp_nan>
     cc2:	60 e0       	ldi	r22, 0x00	; 0
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	80 e8       	ldi	r24, 0x80	; 128
     cc8:	9f e3       	ldi	r25, 0x3F	; 63
     cca:	08 95       	ret
     ccc:	4f e7       	ldi	r20, 0x7F	; 127
     cce:	9f 77       	andi	r25, 0x7F	; 127
     cd0:	5f 93       	push	r21
     cd2:	4f 93       	push	r20
     cd4:	3f 93       	push	r19
     cd6:	2f 93       	push	r18
     cd8:	0e 94 21 07 	call	0xe42	; 0xe42 <log>
     cdc:	2f 91       	pop	r18
     cde:	3f 91       	pop	r19
     ce0:	4f 91       	pop	r20
     ce2:	5f 91       	pop	r21
     ce4:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__mulsf3>
     ce8:	0c 94 7e 06 	jmp	0xcfc	; 0xcfc <exp>
     cec:	29 f4       	brne	.+10     	; 0xcf8 <pow+0xac>
     cee:	16 f0       	brts	.+4      	; 0xcf4 <pow+0xa8>
     cf0:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <__fp_inf>
     cf4:	0c 94 1f 06 	jmp	0xc3e	; 0xc3e <__fp_zero>
     cf8:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__fp_nan>

00000cfc <exp>:
     cfc:	0e 94 05 06 	call	0xc0a	; 0xc0a <__fp_splitA>
     d00:	a8 f3       	brcs	.-22     	; 0xcec <pow+0xa0>
     d02:	96 38       	cpi	r25, 0x86	; 134
     d04:	a0 f7       	brcc	.-24     	; 0xcee <pow+0xa2>
     d06:	07 f8       	bld	r0, 7
     d08:	0f 92       	push	r0
     d0a:	e8 94       	clt
     d0c:	2b e3       	ldi	r18, 0x3B	; 59
     d0e:	3a ea       	ldi	r19, 0xAA	; 170
     d10:	48 eb       	ldi	r20, 0xB8	; 184
     d12:	5f e7       	ldi	r21, 0x7F	; 127
     d14:	0e 94 b3 07 	call	0xf66	; 0xf66 <__mulsf3_pse>
     d18:	0f 92       	push	r0
     d1a:	0f 92       	push	r0
     d1c:	0f 92       	push	r0
     d1e:	4d b7       	in	r20, 0x3d	; 61
     d20:	5e b7       	in	r21, 0x3e	; 62
     d22:	0f 92       	push	r0
     d24:	0e 94 69 07 	call	0xed2	; 0xed2 <modf>
     d28:	e4 e5       	ldi	r30, 0x54	; 84
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	0e 94 b0 06 	call	0xd60	; 0xd60 <__fp_powser>
     d30:	4f 91       	pop	r20
     d32:	5f 91       	pop	r21
     d34:	ef 91       	pop	r30
     d36:	ff 91       	pop	r31
     d38:	e5 95       	asr	r30
     d3a:	ee 1f       	adc	r30, r30
     d3c:	ff 1f       	adc	r31, r31
     d3e:	49 f0       	breq	.+18     	; 0xd52 <exp+0x56>
     d40:	fe 57       	subi	r31, 0x7E	; 126
     d42:	e0 68       	ori	r30, 0x80	; 128
     d44:	44 27       	eor	r20, r20
     d46:	ee 0f       	add	r30, r30
     d48:	44 1f       	adc	r20, r20
     d4a:	fa 95       	dec	r31
     d4c:	e1 f7       	brne	.-8      	; 0xd46 <exp+0x4a>
     d4e:	41 95       	neg	r20
     d50:	55 0b       	sbc	r21, r21
     d52:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <ldexp>
     d56:	0f 90       	pop	r0
     d58:	07 fe       	sbrs	r0, 7
     d5a:	0c 94 d7 06 	jmp	0xdae	; 0xdae <inverse>
     d5e:	08 95       	ret

00000d60 <__fp_powser>:
     d60:	df 93       	push	r29
     d62:	cf 93       	push	r28
     d64:	1f 93       	push	r17
     d66:	0f 93       	push	r16
     d68:	ff 92       	push	r15
     d6a:	ef 92       	push	r14
     d6c:	df 92       	push	r13
     d6e:	7b 01       	movw	r14, r22
     d70:	8c 01       	movw	r16, r24
     d72:	68 94       	set
     d74:	06 c0       	rjmp	.+12     	; 0xd82 <__fp_powser+0x22>
     d76:	da 2e       	mov	r13, r26
     d78:	ef 01       	movw	r28, r30
     d7a:	0e 94 b0 07 	call	0xf60	; 0xf60 <__mulsf3x>
     d7e:	fe 01       	movw	r30, r28
     d80:	e8 94       	clt
     d82:	a5 91       	lpm	r26, Z+
     d84:	25 91       	lpm	r18, Z+
     d86:	35 91       	lpm	r19, Z+
     d88:	45 91       	lpm	r20, Z+
     d8a:	55 91       	lpm	r21, Z+
     d8c:	a6 f3       	brts	.-24     	; 0xd76 <__fp_powser+0x16>
     d8e:	ef 01       	movw	r28, r30
     d90:	0e 94 a2 04 	call	0x944	; 0x944 <__addsf3x>
     d94:	fe 01       	movw	r30, r28
     d96:	97 01       	movw	r18, r14
     d98:	a8 01       	movw	r20, r16
     d9a:	da 94       	dec	r13
     d9c:	69 f7       	brne	.-38     	; 0xd78 <__fp_powser+0x18>
     d9e:	df 90       	pop	r13
     da0:	ef 90       	pop	r14
     da2:	ff 90       	pop	r15
     da4:	0f 91       	pop	r16
     da6:	1f 91       	pop	r17
     da8:	cf 91       	pop	r28
     daa:	df 91       	pop	r29
     dac:	08 95       	ret

00000dae <inverse>:
     dae:	9b 01       	movw	r18, r22
     db0:	ac 01       	movw	r20, r24
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	70 e0       	ldi	r23, 0x00	; 0
     db6:	80 e8       	ldi	r24, 0x80	; 128
     db8:	9f e3       	ldi	r25, 0x3F	; 63
     dba:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__divsf3>
     dbe:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <__fp_inf>
     dc2:	0c 94 0a 08 	jmp	0x1014	; 0x1014 <__fp_mpack>

00000dc6 <ldexp>:
     dc6:	0e 94 05 06 	call	0xc0a	; 0xc0a <__fp_splitA>
     dca:	d8 f3       	brcs	.-10     	; 0xdc2 <inverse+0x14>
     dcc:	99 23       	and	r25, r25
     dce:	c9 f3       	breq	.-14     	; 0xdc2 <inverse+0x14>
     dd0:	94 0f       	add	r25, r20
     dd2:	51 1d       	adc	r21, r1
     dd4:	a3 f3       	brvs	.-24     	; 0xdbe <inverse+0x10>
     dd6:	91 50       	subi	r25, 0x01	; 1
     dd8:	50 40       	sbci	r21, 0x00	; 0
     dda:	94 f0       	brlt	.+36     	; 0xe00 <ldexp+0x3a>
     ddc:	59 f0       	breq	.+22     	; 0xdf4 <ldexp+0x2e>
     dde:	88 23       	and	r24, r24
     de0:	32 f0       	brmi	.+12     	; 0xdee <ldexp+0x28>
     de2:	66 0f       	add	r22, r22
     de4:	77 1f       	adc	r23, r23
     de6:	88 1f       	adc	r24, r24
     de8:	91 50       	subi	r25, 0x01	; 1
     dea:	50 40       	sbci	r21, 0x00	; 0
     dec:	c1 f7       	brne	.-16     	; 0xdde <ldexp+0x18>
     dee:	9e 3f       	cpi	r25, 0xFE	; 254
     df0:	51 05       	cpc	r21, r1
     df2:	2c f7       	brge	.-54     	; 0xdbe <inverse+0x10>
     df4:	88 0f       	add	r24, r24
     df6:	91 1d       	adc	r25, r1
     df8:	96 95       	lsr	r25
     dfa:	87 95       	ror	r24
     dfc:	97 f9       	bld	r25, 7
     dfe:	08 95       	ret
     e00:	5f 3f       	cpi	r21, 0xFF	; 255
     e02:	ac f0       	brlt	.+42     	; 0xe2e <ldexp+0x68>
     e04:	98 3e       	cpi	r25, 0xE8	; 232
     e06:	9c f0       	brlt	.+38     	; 0xe2e <ldexp+0x68>
     e08:	bb 27       	eor	r27, r27
     e0a:	86 95       	lsr	r24
     e0c:	77 95       	ror	r23
     e0e:	67 95       	ror	r22
     e10:	b7 95       	ror	r27
     e12:	08 f4       	brcc	.+2      	; 0xe16 <ldexp+0x50>
     e14:	b1 60       	ori	r27, 0x01	; 1
     e16:	93 95       	inc	r25
     e18:	c1 f7       	brne	.-16     	; 0xe0a <ldexp+0x44>
     e1a:	bb 0f       	add	r27, r27
     e1c:	58 f7       	brcc	.-42     	; 0xdf4 <ldexp+0x2e>
     e1e:	11 f4       	brne	.+4      	; 0xe24 <ldexp+0x5e>
     e20:	60 ff       	sbrs	r22, 0
     e22:	e8 cf       	rjmp	.-48     	; 0xdf4 <ldexp+0x2e>
     e24:	6f 5f       	subi	r22, 0xFF	; 255
     e26:	7f 4f       	sbci	r23, 0xFF	; 255
     e28:	8f 4f       	sbci	r24, 0xFF	; 255
     e2a:	9f 4f       	sbci	r25, 0xFF	; 255
     e2c:	e3 cf       	rjmp	.-58     	; 0xdf4 <ldexp+0x2e>
     e2e:	0c 94 20 06 	jmp	0xc40	; 0xc40 <__fp_szero>
     e32:	16 f0       	brts	.+4      	; 0xe38 <ldexp+0x72>
     e34:	0c 94 0a 08 	jmp	0x1014	; 0x1014 <__fp_mpack>
     e38:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__fp_nan>
     e3c:	68 94       	set
     e3e:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <__fp_inf>

00000e42 <log>:
     e42:	0e 94 05 06 	call	0xc0a	; 0xc0a <__fp_splitA>
     e46:	a8 f3       	brcs	.-22     	; 0xe32 <ldexp+0x6c>
     e48:	99 23       	and	r25, r25
     e4a:	c1 f3       	breq	.-16     	; 0xe3c <ldexp+0x76>
     e4c:	ae f3       	brts	.-22     	; 0xe38 <ldexp+0x72>
     e4e:	df 93       	push	r29
     e50:	cf 93       	push	r28
     e52:	1f 93       	push	r17
     e54:	0f 93       	push	r16
     e56:	ff 92       	push	r15
     e58:	c9 2f       	mov	r28, r25
     e5a:	dd 27       	eor	r29, r29
     e5c:	88 23       	and	r24, r24
     e5e:	2a f0       	brmi	.+10     	; 0xe6a <log+0x28>
     e60:	21 97       	sbiw	r28, 0x01	; 1
     e62:	66 0f       	add	r22, r22
     e64:	77 1f       	adc	r23, r23
     e66:	88 1f       	adc	r24, r24
     e68:	da f7       	brpl	.-10     	; 0xe60 <log+0x1e>
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 e8       	ldi	r20, 0x80	; 128
     e70:	5f eb       	ldi	r21, 0xBF	; 191
     e72:	9f e3       	ldi	r25, 0x3F	; 63
     e74:	88 39       	cpi	r24, 0x98	; 152
     e76:	20 f0       	brcs	.+8      	; 0xe80 <log+0x3e>
     e78:	80 3e       	cpi	r24, 0xE0	; 224
     e7a:	38 f0       	brcs	.+14     	; 0xe8a <log+0x48>
     e7c:	21 96       	adiw	r28, 0x01	; 1
     e7e:	8f 77       	andi	r24, 0x7F	; 127
     e80:	0e 94 8b 04 	call	0x916	; 0x916 <__addsf3>
     e84:	ec e7       	ldi	r30, 0x7C	; 124
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	04 c0       	rjmp	.+8      	; 0xe92 <log+0x50>
     e8a:	0e 94 8b 04 	call	0x916	; 0x916 <__addsf3>
     e8e:	e9 ea       	ldi	r30, 0xA9	; 169
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	0e 94 b0 06 	call	0xd60	; 0xd60 <__fp_powser>
     e96:	8b 01       	movw	r16, r22
     e98:	be 01       	movw	r22, r28
     e9a:	ec 01       	movw	r28, r24
     e9c:	fb 2e       	mov	r15, r27
     e9e:	6f 57       	subi	r22, 0x7F	; 127
     ea0:	71 09       	sbc	r23, r1
     ea2:	75 95       	asr	r23
     ea4:	77 1f       	adc	r23, r23
     ea6:	88 0b       	sbc	r24, r24
     ea8:	99 0b       	sbc	r25, r25
     eaa:	0e 94 9a 05 	call	0xb34	; 0xb34 <__floatsisf>
     eae:	28 e1       	ldi	r18, 0x18	; 24
     eb0:	32 e7       	ldi	r19, 0x72	; 114
     eb2:	41 e3       	ldi	r20, 0x31	; 49
     eb4:	5f e3       	ldi	r21, 0x3F	; 63
     eb6:	0e 94 b0 07 	call	0xf60	; 0xf60 <__mulsf3x>
     eba:	af 2d       	mov	r26, r15
     ebc:	98 01       	movw	r18, r16
     ebe:	ae 01       	movw	r20, r28
     ec0:	ff 90       	pop	r15
     ec2:	0f 91       	pop	r16
     ec4:	1f 91       	pop	r17
     ec6:	cf 91       	pop	r28
     ec8:	df 91       	pop	r29
     eca:	0e 94 a2 04 	call	0x944	; 0x944 <__addsf3x>
     ece:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <__fp_round>

00000ed2 <modf>:
     ed2:	fa 01       	movw	r30, r20
     ed4:	dc 01       	movw	r26, r24
     ed6:	aa 0f       	add	r26, r26
     ed8:	bb 1f       	adc	r27, r27
     eda:	9b 01       	movw	r18, r22
     edc:	ac 01       	movw	r20, r24
     ede:	bf 57       	subi	r27, 0x7F	; 127
     ee0:	28 f4       	brcc	.+10     	; 0xeec <modf+0x1a>
     ee2:	22 27       	eor	r18, r18
     ee4:	33 27       	eor	r19, r19
     ee6:	44 27       	eor	r20, r20
     ee8:	50 78       	andi	r21, 0x80	; 128
     eea:	20 c0       	rjmp	.+64     	; 0xf2c <modf+0x5a>
     eec:	b7 51       	subi	r27, 0x17	; 23
     eee:	90 f4       	brcc	.+36     	; 0xf14 <modf+0x42>
     ef0:	ab 2f       	mov	r26, r27
     ef2:	00 24       	eor	r0, r0
     ef4:	46 95       	lsr	r20
     ef6:	37 95       	ror	r19
     ef8:	27 95       	ror	r18
     efa:	01 1c       	adc	r0, r1
     efc:	a3 95       	inc	r26
     efe:	d2 f3       	brmi	.-12     	; 0xef4 <modf+0x22>
     f00:	00 20       	and	r0, r0
     f02:	71 f0       	breq	.+28     	; 0xf20 <modf+0x4e>
     f04:	22 0f       	add	r18, r18
     f06:	33 1f       	adc	r19, r19
     f08:	44 1f       	adc	r20, r20
     f0a:	b3 95       	inc	r27
     f0c:	da f3       	brmi	.-10     	; 0xf04 <modf+0x32>
     f0e:	0e d0       	rcall	.+28     	; 0xf2c <modf+0x5a>
     f10:	0c 94 8a 04 	jmp	0x914	; 0x914 <__subsf3>
     f14:	61 30       	cpi	r22, 0x01	; 1
     f16:	71 05       	cpc	r23, r1
     f18:	a0 e8       	ldi	r26, 0x80	; 128
     f1a:	8a 07       	cpc	r24, r26
     f1c:	b9 46       	sbci	r27, 0x69	; 105
     f1e:	30 f4       	brcc	.+12     	; 0xf2c <modf+0x5a>
     f20:	9b 01       	movw	r18, r22
     f22:	ac 01       	movw	r20, r24
     f24:	66 27       	eor	r22, r22
     f26:	77 27       	eor	r23, r23
     f28:	88 27       	eor	r24, r24
     f2a:	90 78       	andi	r25, 0x80	; 128
     f2c:	30 96       	adiw	r30, 0x00	; 0
     f2e:	21 f0       	breq	.+8      	; 0xf38 <modf+0x66>
     f30:	20 83       	st	Z, r18
     f32:	31 83       	std	Z+1, r19	; 0x01
     f34:	42 83       	std	Z+2, r20	; 0x02
     f36:	53 83       	std	Z+3, r21	; 0x03
     f38:	08 95       	ret

00000f3a <__mulsf3>:
     f3a:	0e 94 b0 07 	call	0xf60	; 0xf60 <__mulsf3x>
     f3e:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <__fp_round>
     f42:	0e 94 de 05 	call	0xbbc	; 0xbbc <__fp_pscA>
     f46:	38 f0       	brcs	.+14     	; 0xf56 <__mulsf3+0x1c>
     f48:	0e 94 e5 05 	call	0xbca	; 0xbca <__fp_pscB>
     f4c:	20 f0       	brcs	.+8      	; 0xf56 <__mulsf3+0x1c>
     f4e:	95 23       	and	r25, r21
     f50:	11 f0       	breq	.+4      	; 0xf56 <__mulsf3+0x1c>
     f52:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <__fp_inf>
     f56:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__fp_nan>
     f5a:	11 24       	eor	r1, r1
     f5c:	0c 94 20 06 	jmp	0xc40	; 0xc40 <__fp_szero>

00000f60 <__mulsf3x>:
     f60:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__fp_split3>
     f64:	70 f3       	brcs	.-36     	; 0xf42 <__mulsf3+0x8>

00000f66 <__mulsf3_pse>:
     f66:	95 9f       	mul	r25, r21
     f68:	c1 f3       	breq	.-16     	; 0xf5a <__mulsf3+0x20>
     f6a:	95 0f       	add	r25, r21
     f6c:	50 e0       	ldi	r21, 0x00	; 0
     f6e:	55 1f       	adc	r21, r21
     f70:	62 9f       	mul	r22, r18
     f72:	f0 01       	movw	r30, r0
     f74:	72 9f       	mul	r23, r18
     f76:	bb 27       	eor	r27, r27
     f78:	f0 0d       	add	r31, r0
     f7a:	b1 1d       	adc	r27, r1
     f7c:	63 9f       	mul	r22, r19
     f7e:	aa 27       	eor	r26, r26
     f80:	f0 0d       	add	r31, r0
     f82:	b1 1d       	adc	r27, r1
     f84:	aa 1f       	adc	r26, r26
     f86:	64 9f       	mul	r22, r20
     f88:	66 27       	eor	r22, r22
     f8a:	b0 0d       	add	r27, r0
     f8c:	a1 1d       	adc	r26, r1
     f8e:	66 1f       	adc	r22, r22
     f90:	82 9f       	mul	r24, r18
     f92:	22 27       	eor	r18, r18
     f94:	b0 0d       	add	r27, r0
     f96:	a1 1d       	adc	r26, r1
     f98:	62 1f       	adc	r22, r18
     f9a:	73 9f       	mul	r23, r19
     f9c:	b0 0d       	add	r27, r0
     f9e:	a1 1d       	adc	r26, r1
     fa0:	62 1f       	adc	r22, r18
     fa2:	83 9f       	mul	r24, r19
     fa4:	a0 0d       	add	r26, r0
     fa6:	61 1d       	adc	r22, r1
     fa8:	22 1f       	adc	r18, r18
     faa:	74 9f       	mul	r23, r20
     fac:	33 27       	eor	r19, r19
     fae:	a0 0d       	add	r26, r0
     fb0:	61 1d       	adc	r22, r1
     fb2:	23 1f       	adc	r18, r19
     fb4:	84 9f       	mul	r24, r20
     fb6:	60 0d       	add	r22, r0
     fb8:	21 1d       	adc	r18, r1
     fba:	82 2f       	mov	r24, r18
     fbc:	76 2f       	mov	r23, r22
     fbe:	6a 2f       	mov	r22, r26
     fc0:	11 24       	eor	r1, r1
     fc2:	9f 57       	subi	r25, 0x7F	; 127
     fc4:	50 40       	sbci	r21, 0x00	; 0
     fc6:	9a f0       	brmi	.+38     	; 0xfee <__mulsf3_pse+0x88>
     fc8:	f1 f0       	breq	.+60     	; 0x1006 <__mulsf3_pse+0xa0>
     fca:	88 23       	and	r24, r24
     fcc:	4a f0       	brmi	.+18     	; 0xfe0 <__mulsf3_pse+0x7a>
     fce:	ee 0f       	add	r30, r30
     fd0:	ff 1f       	adc	r31, r31
     fd2:	bb 1f       	adc	r27, r27
     fd4:	66 1f       	adc	r22, r22
     fd6:	77 1f       	adc	r23, r23
     fd8:	88 1f       	adc	r24, r24
     fda:	91 50       	subi	r25, 0x01	; 1
     fdc:	50 40       	sbci	r21, 0x00	; 0
     fde:	a9 f7       	brne	.-22     	; 0xfca <__mulsf3_pse+0x64>
     fe0:	9e 3f       	cpi	r25, 0xFE	; 254
     fe2:	51 05       	cpc	r21, r1
     fe4:	80 f0       	brcs	.+32     	; 0x1006 <__mulsf3_pse+0xa0>
     fe6:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <__fp_inf>
     fea:	0c 94 20 06 	jmp	0xc40	; 0xc40 <__fp_szero>
     fee:	5f 3f       	cpi	r21, 0xFF	; 255
     ff0:	e4 f3       	brlt	.-8      	; 0xfea <__mulsf3_pse+0x84>
     ff2:	98 3e       	cpi	r25, 0xE8	; 232
     ff4:	d4 f3       	brlt	.-12     	; 0xfea <__mulsf3_pse+0x84>
     ff6:	86 95       	lsr	r24
     ff8:	77 95       	ror	r23
     ffa:	67 95       	ror	r22
     ffc:	b7 95       	ror	r27
     ffe:	f7 95       	ror	r31
    1000:	e7 95       	ror	r30
    1002:	9f 5f       	subi	r25, 0xFF	; 255
    1004:	c1 f7       	brne	.-16     	; 0xff6 <__mulsf3_pse+0x90>
    1006:	fe 2b       	or	r31, r30
    1008:	88 0f       	add	r24, r24
    100a:	91 1d       	adc	r25, r1
    100c:	96 95       	lsr	r25
    100e:	87 95       	ror	r24
    1010:	97 f9       	bld	r25, 7
    1012:	08 95       	ret

00001014 <__fp_mpack>:
    1014:	9f 3f       	cpi	r25, 0xFF	; 255
    1016:	31 f0       	breq	.+12     	; 0x1024 <__fp_mpack_finite+0xc>

00001018 <__fp_mpack_finite>:
    1018:	91 50       	subi	r25, 0x01	; 1
    101a:	20 f4       	brcc	.+8      	; 0x1024 <__fp_mpack_finite+0xc>
    101c:	87 95       	ror	r24
    101e:	77 95       	ror	r23
    1020:	67 95       	ror	r22
    1022:	b7 95       	ror	r27
    1024:	88 0f       	add	r24, r24
    1026:	91 1d       	adc	r25, r1
    1028:	96 95       	lsr	r25
    102a:	87 95       	ror	r24
    102c:	97 f9       	bld	r25, 7
    102e:	08 95       	ret

00001030 <_exit>:
    1030:	f8 94       	cli

00001032 <__stop_program>:
    1032:	ff cf       	rjmp	.-2      	; 0x1032 <__stop_program>
