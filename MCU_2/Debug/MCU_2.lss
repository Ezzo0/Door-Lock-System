
MCU_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000a60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000a60  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000930  00000000  00000000  00000b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000683  00000000  00000000  00001464  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000503  00000000  00000000  00001ae7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00001fec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000433  00000000  00000000  00002084  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001bc  00000000  00000000  000024b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002673  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
   4:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
   8:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
   c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  10:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  14:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  18:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  1c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  20:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  24:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  28:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  2c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  30:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  34:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  38:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  3c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  40:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  44:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  48:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  4c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  50:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  54:	07 63       	ori	r16, 0x37	; 55
  56:	42 36       	cpi	r20, 0x62	; 98
  58:	b7 9b       	sbis	0x16, 7	; 22
  5a:	d8 a7       	std	Y+40, r29	; 0x28
  5c:	1a 39       	cpi	r17, 0x9A	; 154
  5e:	68 56       	subi	r22, 0x68	; 104
  60:	18 ae       	std	Y+56, r1	; 0x38
  62:	ba ab       	std	Y+50, r27	; 0x32
  64:	55 8c       	ldd	r5, Z+29	; 0x1d
  66:	1d 3c       	cpi	r17, 0xCD	; 205
  68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
  6a:	57 63       	ori	r21, 0x37	; 55
  6c:	bd 6d       	ori	r27, 0xDD	; 221
  6e:	ed fd       	.word	0xfded	; ????
  70:	75 3e       	cpi	r23, 0xE5	; 229
  72:	f6 17       	cp	r31, r22
  74:	72 31       	cpi	r23, 0x12	; 18
  76:	bf 00       	.word	0x00bf	; ????
  78:	00 00       	nop
  7a:	80 3f       	cpi	r24, 0xF0	; 240
  7c:	08 00       	.word	0x0008	; ????
  7e:	00 00       	nop
  80:	be 92       	st	-X, r11
  82:	24 49       	sbci	r18, 0x94	; 148
  84:	12 3e       	cpi	r17, 0xE2	; 226
  86:	ab aa       	std	Y+51, r10	; 0x33
  88:	aa 2a       	or	r10, r26
  8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
  8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
  8e:	4c 3e       	cpi	r20, 0xEC	; 236
  90:	00 00       	nop
  92:	00 80       	ld	r0, Z
  94:	be ab       	std	Y+54, r27	; 0x36
  96:	aa aa       	std	Y+50, r10	; 0x32
  98:	aa 3e       	cpi	r26, 0xEA	; 234
  9a:	00 00       	nop
  9c:	00 00       	nop
  9e:	bf 00       	.word	0x00bf	; ????
  a0:	00 00       	nop
  a2:	80 3f       	cpi	r24, 0xF0	; 240
  a4:	00 00       	nop
  a6:	00 00       	nop
  a8:	00 08       	sbc	r0, r0
  aa:	41 78       	andi	r20, 0x81	; 129
  ac:	d3 bb       	out	0x13, r29	; 19
  ae:	43 87       	std	Z+11, r20	; 0x0b
  b0:	d1 13       	cpse	r29, r17
  b2:	3d 19       	sub	r19, r13
  b4:	0e 3c       	cpi	r16, 0xCE	; 206
  b6:	c3 bd       	out	0x23, r28	; 35
  b8:	42 82       	std	Z+2, r4	; 0x02
  ba:	ad 2b       	or	r26, r29
  bc:	3e 68       	ori	r19, 0x8E	; 142
  be:	ec 82       	std	Y+4, r14	; 0x04
  c0:	76 be       	out	0x36, r7	; 54
  c2:	d9 8f       	std	Y+25, r29	; 0x19
  c4:	e1 a9       	ldd	r30, Z+49	; 0x31
  c6:	3e 4c       	sbci	r19, 0xCE	; 206
  c8:	80 ef       	ldi	r24, 0xF0	; 240
  ca:	ff be       	out	0x3f, r15	; 63
  cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <modf+0x46>
  ce:	ff 7f       	andi	r31, 0xFF	; 255
  d0:	3f 00       	.word	0x003f	; ????
  d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
  d6:	11 24       	eor	r1, r1
  d8:	1f be       	out	0x3f, r1	; 63
  da:	cf e5       	ldi	r28, 0x5F	; 95
  dc:	d8 e0       	ldi	r29, 0x08	; 8
  de:	de bf       	out	0x3e, r29	; 62
  e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_clear_bss>:
  e2:	20 e0       	ldi	r18, 0x00	; 0
  e4:	a0 e6       	ldi	r26, 0x60	; 96
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	01 c0       	rjmp	.+2      	; 0xec <.do_clear_bss_start>

000000ea <.do_clear_bss_loop>:
  ea:	1d 92       	st	X+, r1

000000ec <.do_clear_bss_start>:
  ec:	a1 36       	cpi	r26, 0x61	; 97
  ee:	b2 07       	cpc	r27, r18
  f0:	e1 f7       	brne	.-8      	; 0xea <.do_clear_bss_loop>
  f2:	0e 94 7f 00 	call	0xfe	; 0xfe <main>
  f6:	0c 94 f4 04 	jmp	0x9e8	; 0x9e8 <_exit>

000000fa <__bad_interrupt>:
  fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fe <main>:
#include "MCAL_2/TWI_Driver_2/TWI_2.h"

uint8_t data;
int main(void)
{
	DDRB = 0xFF;
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	87 bb       	out	0x17, r24	; 23
    TWI_init(1);
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	0e 94 b0 00 	call	0x160	; 0x160 <TWI_init>
    if(TWI_start() == EVENT_OK)
 108:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <TWI_start>
 10c:	81 11       	cpse	r24, r1
 10e:	10 c0       	rjmp	.+32     	; 0x130 <main+0x32>
    {
	    if(TWI_send_address(0x10,Read) == SLA_R_ACK_SENT)
 110:	61 e0       	ldi	r22, 0x01	; 1
 112:	80 e1       	ldi	r24, 0x10	; 16
 114:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <TWI_send_address>
 118:	85 30       	cpi	r24, 0x05	; 5
 11a:	51 f4       	brne	.+20     	; 0x130 <main+0x32>
	    {
		    if(TWI_data_event(&data,Read,NOT_ACK) == DATA_R_NACK_SENT)
 11c:	41 e0       	ldi	r20, 0x01	; 1
 11e:	61 e0       	ldi	r22, 0x01	; 1
 120:	80 e6       	ldi	r24, 0x60	; 96
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 1d 01 	call	0x23a	; 0x23a <TWI_data_event>
 128:	8c 30       	cpi	r24, 0x0C	; 12
 12a:	11 f4       	brne	.+4      	; 0x130 <main+0x32>
		    {
			    TWI_stop();
 12c:	0e 94 60 01 	call	0x2c0	; 0x2c0 <TWI_stop>
		    }
	    }
    }
    PORTB = data;
 130:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 134:	88 bb       	out	0x18, r24	; 24
		
	if(TWI_start() == EVENT_OK)
 136:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <TWI_start>
 13a:	81 11       	cpse	r24, r1
 13c:	10 c0       	rjmp	.+32     	; 0x15e <main+0x60>
	{
		if(TWI_send_address(0x10,Write) == SLA_W_ACK_SENT)
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	80 e1       	ldi	r24, 0x10	; 16
 142:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <TWI_send_address>
 146:	83 30       	cpi	r24, 0x03	; 3
 148:	51 f4       	brne	.+20     	; 0x15e <main+0x60>
		{
			if(TWI_data_event(&data,Write,ACK) == DATA_W_ACK_SENT)
 14a:	40 e0       	ldi	r20, 0x00	; 0
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	80 e6       	ldi	r24, 0x60	; 96
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 1d 01 	call	0x23a	; 0x23a <TWI_data_event>
 156:	88 30       	cpi	r24, 0x08	; 8
 158:	11 f4       	brne	.+4      	; 0x15e <main+0x60>
			{
				TWI_stop();
 15a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <TWI_stop>
 15e:	ff cf       	rjmp	.-2      	; 0x15e <main+0x60>

00000160 <TWI_init>:
	status = (TWSR & 0xF8); // Reading TWI status register
	if(status != REPEATED_START_STATE)
		return REPEATED_START_NOT_SENT;
	else
		return EVENT_OK;
}
 160:	11 b8       	out	0x01, r1	; 1
 162:	80 31       	cpi	r24, 0x10	; 16
 164:	41 f0       	breq	.+16     	; 0x176 <TWI_init+0x16>
 166:	80 34       	cpi	r24, 0x40	; 64
 168:	51 f0       	breq	.+20     	; 0x17e <TWI_init+0x1e>
 16a:	84 30       	cpi	r24, 0x04	; 4
 16c:	71 f4       	brne	.+28     	; 0x18a <TWI_init+0x2a>
 16e:	81 b1       	in	r24, 0x01	; 1
 170:	81 60       	ori	r24, 0x01	; 1
 172:	81 b9       	out	0x01, r24	; 1
 174:	0a c0       	rjmp	.+20     	; 0x18a <TWI_init+0x2a>
 176:	81 b1       	in	r24, 0x01	; 1
 178:	82 60       	ori	r24, 0x02	; 2
 17a:	81 b9       	out	0x01, r24	; 1
 17c:	06 c0       	rjmp	.+12     	; 0x18a <TWI_init+0x2a>
 17e:	81 b1       	in	r24, 0x01	; 1
 180:	81 60       	ori	r24, 0x01	; 1
 182:	81 b9       	out	0x01, r24	; 1
 184:	81 b1       	in	r24, 0x01	; 1
 186:	82 60       	ori	r24, 0x02	; 2
 188:	81 b9       	out	0x01, r24	; 1
 18a:	61 b1       	in	r22, 0x01	; 1
 18c:	63 70       	andi	r22, 0x03	; 3
 18e:	70 e0       	ldi	r23, 0x00	; 0
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 76 02 	call	0x4ec	; 0x4ec <__floatsisf>
 198:	9b 01       	movw	r18, r22
 19a:	ac 01       	movw	r20, r24
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	70 e0       	ldi	r23, 0x00	; 0
 1a0:	80 e8       	ldi	r24, 0x80	; 128
 1a2:	90 e4       	ldi	r25, 0x40	; 64
 1a4:	0e 94 02 03 	call	0x604	; 0x604 <pow>
 1a8:	9b 01       	movw	r18, r22
 1aa:	ac 01       	movw	r20, r24
 1ac:	0e 94 67 01 	call	0x2ce	; 0x2ce <__addsf3>
 1b0:	9b 01       	movw	r18, r22
 1b2:	ac 01       	movw	r20, r24
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	70 e0       	ldi	r23, 0x00	; 0
 1b8:	80 e8       	ldi	r24, 0x80	; 128
 1ba:	9f e4       	ldi	r25, 0x4F	; 79
 1bc:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__divsf3>
 1c0:	0e 94 45 02 	call	0x48a	; 0x48a <__fixunssfsi>
 1c4:	60 b9       	out	0x00, r22	; 0
 1c6:	08 95       	ret

000001c8 <TWI_start>:
 1c8:	86 b7       	in	r24, 0x36	; 54
 1ca:	80 68       	ori	r24, 0x80	; 128
 1cc:	86 bf       	out	0x36, r24	; 54
 1ce:	86 b7       	in	r24, 0x36	; 54
 1d0:	80 62       	ori	r24, 0x20	; 32
 1d2:	86 bf       	out	0x36, r24	; 54
 1d4:	86 b7       	in	r24, 0x36	; 54
 1d6:	84 60       	ori	r24, 0x04	; 4
 1d8:	86 bf       	out	0x36, r24	; 54
 1da:	06 b6       	in	r0, 0x36	; 54
 1dc:	07 fe       	sbrs	r0, 7
 1de:	fd cf       	rjmp	.-6      	; 0x1da <TWI_start+0x12>
 1e0:	81 b1       	in	r24, 0x01	; 1
 1e2:	88 7f       	andi	r24, 0xF8	; 248
 1e4:	88 30       	cpi	r24, 0x08	; 8
 1e6:	11 f0       	breq	.+4      	; 0x1ec <TWI_start+0x24>
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	08 95       	ret
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	08 95       	ret

000001f0 <TWI_send_address>:

EN_returnStatus_t TWI_send_address(uint8_t address, uint8_t r_or_w)
{
	uint8_t status;
	if(r_or_w == Write)
 1f0:	61 11       	cpse	r22, r1
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <TWI_send_address+0x8>
		TWDR = address + Write; // Writing SLA+W in TWI data register
 1f4:	83 b9       	out	0x03, r24	; 3
 1f6:	04 c0       	rjmp	.+8      	; 0x200 <TWI_send_address+0x10>
	else if(r_or_w == Read)
 1f8:	61 30       	cpi	r22, 0x01	; 1
 1fa:	11 f4       	brne	.+4      	; 0x200 <TWI_send_address+0x10>
		TWDR = address + Read; // Writing SLA+R in TWI data register
 1fc:	8f 5f       	subi	r24, 0xFF	; 255
 1fe:	83 b9       	out	0x03, r24	; 3
	else
	{
		//error
	}
	set_pin(TWCR,TWINT); // Clear interrupt flag in TWI control register
 200:	86 b7       	in	r24, 0x36	; 54
 202:	80 68       	ori	r24, 0x80	; 128
 204:	86 bf       	out	0x36, r24	; 54
	set_pin(TWCR,TWEN); // Enable TWI
 206:	86 b7       	in	r24, 0x36	; 54
 208:	84 60       	ori	r24, 0x04	; 4
 20a:	86 bf       	out	0x36, r24	; 54
	while (!( TWCR & (1 << TWINT) )); // Wait for TWINT Flag set
 20c:	06 b6       	in	r0, 0x36	; 54
 20e:	07 fe       	sbrs	r0, 7
 210:	fd cf       	rjmp	.-6      	; 0x20c <TWI_send_address+0x1c>
	
	// Check state on TWI Status register
	status = (TWSR & 0xF8); // Reading TWI status register
 212:	81 b1       	in	r24, 0x01	; 1
 214:	88 7f       	andi	r24, 0xF8	; 248
	if( status == SLA_W_ACK_STATE )
 216:	88 31       	cpi	r24, 0x18	; 24
 218:	41 f0       	breq	.+16     	; 0x22a <TWI_send_address+0x3a>
		return SLA_W_ACK_SENT;		// SLA+W transmitted & Ack received  
	else if( status == SLA_W_NACK_STATE )
 21a:	80 32       	cpi	r24, 0x20	; 32
 21c:	41 f0       	breq	.+16     	; 0x22e <TWI_send_address+0x3e>
		return SLA_W_NACK_SENT;		// SLA+W transmitted & NO Ack received
	else if( status == SLA_R_ACK_STATE )
 21e:	80 34       	cpi	r24, 0x40	; 64
 220:	41 f0       	breq	.+16     	; 0x232 <TWI_send_address+0x42>
		return SLA_R_ACK_SENT;		// SLA+R transmitted & Ack received
	else if( status == SLA_R_NACK_STATE )
 222:	88 34       	cpi	r24, 0x48	; 72
 224:	41 f4       	brne	.+16     	; 0x236 <TWI_send_address+0x46>
		return SLA_R_NACK_SENT;		// SLA+R transmitted & NO Ack received
 226:	86 e0       	ldi	r24, 0x06	; 6
 228:	08 95       	ret
	while (!( TWCR & (1 << TWINT) )); // Wait for TWINT Flag set
	
	// Check state on TWI Status register
	status = (TWSR & 0xF8); // Reading TWI status register
	if( status == SLA_W_ACK_STATE )
		return SLA_W_ACK_SENT;		// SLA+W transmitted & Ack received  
 22a:	83 e0       	ldi	r24, 0x03	; 3
 22c:	08 95       	ret
	else if( status == SLA_W_NACK_STATE )
		return SLA_W_NACK_SENT;		// SLA+W transmitted & NO Ack received
 22e:	84 e0       	ldi	r24, 0x04	; 4
 230:	08 95       	ret
	else if( status == SLA_R_ACK_STATE )
		return SLA_R_ACK_SENT;		// SLA+R transmitted & Ack received
 232:	85 e0       	ldi	r24, 0x05	; 5
 234:	08 95       	ret
	else if( status == SLA_R_NACK_STATE )
		return SLA_R_NACK_SENT;		// SLA+R transmitted & NO Ack received
	else
		return SLA_RW_FAILED;
 236:	87 e0       	ldi	r24, 0x07	; 7
}
 238:	08 95       	ret

0000023a <TWI_data_event>:

EN_returnStatus_t TWI_data_event(uint8_t *data, uint8_t r_or_w, uint8_t ack)
{
	uint8_t status;
	if(r_or_w == Write)
 23a:	61 11       	cpse	r22, r1
 23c:	14 c0       	rjmp	.+40     	; 0x266 <TWI_data_event+0x2c>
	{
		TWDR = *data; // Put data into TWI data register
 23e:	fc 01       	movw	r30, r24
 240:	80 81       	ld	r24, Z
 242:	83 b9       	out	0x03, r24	; 3
		set_pin(TWCR,TWINT); // clear interrupt flag in TWI control register
 244:	86 b7       	in	r24, 0x36	; 54
 246:	80 68       	ori	r24, 0x80	; 128
 248:	86 bf       	out	0x36, r24	; 54
		set_pin(TWCR,TWEN); // Enable TWI
 24a:	86 b7       	in	r24, 0x36	; 54
 24c:	84 60       	ori	r24, 0x04	; 4
 24e:	86 bf       	out	0x36, r24	; 54
		while (!( TWCR & (1 << TWINT) )); // Wait for TWINT Flag set
 250:	06 b6       	in	r0, 0x36	; 54
 252:	07 fe       	sbrs	r0, 7
 254:	fd cf       	rjmp	.-6      	; 0x250 <TWI_data_event+0x16>
		
		// Check state on TWI Status register
		status = (TWSR & 0xF8); // Reading TWI status register
 256:	81 b1       	in	r24, 0x01	; 1
 258:	88 7f       	andi	r24, 0xF8	; 248
		
		if( status == DATA_W_ACK_STATE )
 25a:	88 32       	cpi	r24, 0x28	; 40
 25c:	49 f1       	breq	.+82     	; 0x2b0 <TWI_data_event+0x76>
			return DATA_W_ACK_SENT;		// Data written & Ack received 
		
		else if( status == DATA_W_NACK_STATE )
 25e:	80 33       	cpi	r24, 0x30	; 48
 260:	49 f5       	brne	.+82     	; 0x2b4 <TWI_data_event+0x7a>
			return DATA_W_NACK_SENT;	// Data written & No Ack received 
 262:	89 e0       	ldi	r24, 0x09	; 9
 264:	08 95       	ret
		
		else
			return DATA_W_FAILED;		// Data transmission failed
		
	}
	else if(r_or_w == Read)
 266:	61 30       	cpi	r22, 0x01	; 1
 268:	11 f5       	brne	.+68     	; 0x2ae <TWI_data_event+0x74>
	{
		if(ack == ACK)
 26a:	41 11       	cpse	r20, r1
 26c:	0a c0       	rjmp	.+20     	; 0x282 <TWI_data_event+0x48>
		{
			// Enable ACK, TWI
			set_pin(TWCR,TWINT);
 26e:	26 b7       	in	r18, 0x36	; 54
 270:	20 68       	ori	r18, 0x80	; 128
 272:	26 bf       	out	0x36, r18	; 54
			set_pin(TWCR,TWEN);
 274:	26 b7       	in	r18, 0x36	; 54
 276:	24 60       	ori	r18, 0x04	; 4
 278:	26 bf       	out	0x36, r18	; 54
			set_pin(TWCR,TWEA);
 27a:	26 b7       	in	r18, 0x36	; 54
 27c:	20 64       	ori	r18, 0x40	; 64
 27e:	26 bf       	out	0x36, r18	; 54
 280:	08 c0       	rjmp	.+16     	; 0x292 <TWI_data_event+0x58>
		}
		else if(ack == NOT_ACK)
 282:	41 30       	cpi	r20, 0x01	; 1
 284:	31 f4       	brne	.+12     	; 0x292 <TWI_data_event+0x58>
		{
			// Enable TWI without ACK
			set_pin(TWCR,TWINT);
 286:	26 b7       	in	r18, 0x36	; 54
 288:	20 68       	ori	r18, 0x80	; 128
 28a:	26 bf       	out	0x36, r18	; 54
			set_pin(TWCR,TWEN);
 28c:	26 b7       	in	r18, 0x36	; 54
 28e:	24 60       	ori	r18, 0x04	; 4
 290:	26 bf       	out	0x36, r18	; 54
		}
		while (!( TWCR & (1 << TWINT) )); // Waiting for TWI to finish its current job
 292:	06 b6       	in	r0, 0x36	; 54
 294:	07 fe       	sbrs	r0, 7
 296:	fd cf       	rjmp	.-6      	; 0x292 <TWI_data_event+0x58>
		
		*data = TWDR; // Reading data in TWI data register
 298:	23 b1       	in	r18, 0x03	; 3
 29a:	fc 01       	movw	r30, r24
 29c:	20 83       	st	Z, r18
		
		// Check state on TWI Status register
		status = (TWSR & 0xF8); // Reading TWI status register
 29e:	81 b1       	in	r24, 0x01	; 1
 2a0:	88 7f       	andi	r24, 0xF8	; 248
		if( status == DATA_R_ACK_STATE )
 2a2:	80 35       	cpi	r24, 0x50	; 80
 2a4:	49 f0       	breq	.+18     	; 0x2b8 <TWI_data_event+0x7e>
			return DATA_R_ACK_SENT; // Data transmitted with ACK
		else if( status == DATA_R_NACK_STATE )
 2a6:	88 35       	cpi	r24, 0x58	; 88
 2a8:	49 f4       	brne	.+18     	; 0x2bc <TWI_data_event+0x82>
			return DATA_R_NACK_SENT; // Data transmitted with NO ACK
 2aa:	8c e0       	ldi	r24, 0x0C	; 12
 2ac:	08 95       	ret
		else
			return DATA_R_FAILED; // Data transmission failed 
	}
}
 2ae:	08 95       	ret
		
		// Check state on TWI Status register
		status = (TWSR & 0xF8); // Reading TWI status register
		
		if( status == DATA_W_ACK_STATE )
			return DATA_W_ACK_SENT;		// Data written & Ack received 
 2b0:	88 e0       	ldi	r24, 0x08	; 8
 2b2:	08 95       	ret
		
		else if( status == DATA_W_NACK_STATE )
			return DATA_W_NACK_SENT;	// Data written & No Ack received 
		
		else
			return DATA_W_FAILED;		// Data transmission failed
 2b4:	8a e0       	ldi	r24, 0x0A	; 10
 2b6:	08 95       	ret
		*data = TWDR; // Reading data in TWI data register
		
		// Check state on TWI Status register
		status = (TWSR & 0xF8); // Reading TWI status register
		if( status == DATA_R_ACK_STATE )
			return DATA_R_ACK_SENT; // Data transmitted with ACK
 2b8:	8b e0       	ldi	r24, 0x0B	; 11
 2ba:	08 95       	ret
		else if( status == DATA_R_NACK_STATE )
			return DATA_R_NACK_SENT; // Data transmitted with NO ACK
		else
			return DATA_R_FAILED; // Data transmission failed 
 2bc:	8d e0       	ldi	r24, 0x0D	; 13
	}
}
 2be:	08 95       	ret

000002c0 <TWI_stop>:

void TWI_stop()
{
	TWCR = (1 << TWSTO) | (1 << TWINT) | (1 << TWEN);// Enable TWI, generate stop
 2c0:	84 e9       	ldi	r24, 0x94	; 148
 2c2:	86 bf       	out	0x36, r24	; 54
	while( TWCR & (1 << TWSTO) );	// Wait until stop condition execution 
 2c4:	06 b6       	in	r0, 0x36	; 54
 2c6:	04 fc       	sbrc	r0, 4
 2c8:	fd cf       	rjmp	.-6      	; 0x2c4 <TWI_stop+0x4>
}
 2ca:	08 95       	ret

000002cc <__subsf3>:
 2cc:	50 58       	subi	r21, 0x80	; 128

000002ce <__addsf3>:
 2ce:	bb 27       	eor	r27, r27
 2d0:	aa 27       	eor	r26, r26
 2d2:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__addsf3x>
 2d6:	0c 94 c8 02 	jmp	0x590	; 0x590 <__fp_round>
 2da:	0e 94 ba 02 	call	0x574	; 0x574 <__fp_pscA>
 2de:	38 f0       	brcs	.+14     	; 0x2ee <__addsf3+0x20>
 2e0:	0e 94 c1 02 	call	0x582	; 0x582 <__fp_pscB>
 2e4:	20 f0       	brcs	.+8      	; 0x2ee <__addsf3+0x20>
 2e6:	39 f4       	brne	.+14     	; 0x2f6 <__addsf3+0x28>
 2e8:	9f 3f       	cpi	r25, 0xFF	; 255
 2ea:	19 f4       	brne	.+6      	; 0x2f2 <__addsf3+0x24>
 2ec:	26 f4       	brtc	.+8      	; 0x2f6 <__addsf3+0x28>
 2ee:	0c 94 b7 02 	jmp	0x56e	; 0x56e <__fp_nan>
 2f2:	0e f4       	brtc	.+2      	; 0x2f6 <__addsf3+0x28>
 2f4:	e0 95       	com	r30
 2f6:	e7 fb       	bst	r30, 7
 2f8:	0c 94 b1 02 	jmp	0x562	; 0x562 <__fp_inf>

000002fc <__addsf3x>:
 2fc:	e9 2f       	mov	r30, r25
 2fe:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__fp_split3>
 302:	58 f3       	brcs	.-42     	; 0x2da <__addsf3+0xc>
 304:	ba 17       	cp	r27, r26
 306:	62 07       	cpc	r22, r18
 308:	73 07       	cpc	r23, r19
 30a:	84 07       	cpc	r24, r20
 30c:	95 07       	cpc	r25, r21
 30e:	20 f0       	brcs	.+8      	; 0x318 <__addsf3x+0x1c>
 310:	79 f4       	brne	.+30     	; 0x330 <__addsf3x+0x34>
 312:	a6 f5       	brtc	.+104    	; 0x37c <__addsf3x+0x80>
 314:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__fp_zero>
 318:	0e f4       	brtc	.+2      	; 0x31c <__addsf3x+0x20>
 31a:	e0 95       	com	r30
 31c:	0b 2e       	mov	r0, r27
 31e:	ba 2f       	mov	r27, r26
 320:	a0 2d       	mov	r26, r0
 322:	0b 01       	movw	r0, r22
 324:	b9 01       	movw	r22, r18
 326:	90 01       	movw	r18, r0
 328:	0c 01       	movw	r0, r24
 32a:	ca 01       	movw	r24, r20
 32c:	a0 01       	movw	r20, r0
 32e:	11 24       	eor	r1, r1
 330:	ff 27       	eor	r31, r31
 332:	59 1b       	sub	r21, r25
 334:	99 f0       	breq	.+38     	; 0x35c <__addsf3x+0x60>
 336:	59 3f       	cpi	r21, 0xF9	; 249
 338:	50 f4       	brcc	.+20     	; 0x34e <__addsf3x+0x52>
 33a:	50 3e       	cpi	r21, 0xE0	; 224
 33c:	68 f1       	brcs	.+90     	; 0x398 <__addsf3x+0x9c>
 33e:	1a 16       	cp	r1, r26
 340:	f0 40       	sbci	r31, 0x00	; 0
 342:	a2 2f       	mov	r26, r18
 344:	23 2f       	mov	r18, r19
 346:	34 2f       	mov	r19, r20
 348:	44 27       	eor	r20, r20
 34a:	58 5f       	subi	r21, 0xF8	; 248
 34c:	f3 cf       	rjmp	.-26     	; 0x334 <__addsf3x+0x38>
 34e:	46 95       	lsr	r20
 350:	37 95       	ror	r19
 352:	27 95       	ror	r18
 354:	a7 95       	ror	r26
 356:	f0 40       	sbci	r31, 0x00	; 0
 358:	53 95       	inc	r21
 35a:	c9 f7       	brne	.-14     	; 0x34e <__addsf3x+0x52>
 35c:	7e f4       	brtc	.+30     	; 0x37c <__addsf3x+0x80>
 35e:	1f 16       	cp	r1, r31
 360:	ba 0b       	sbc	r27, r26
 362:	62 0b       	sbc	r22, r18
 364:	73 0b       	sbc	r23, r19
 366:	84 0b       	sbc	r24, r20
 368:	ba f0       	brmi	.+46     	; 0x398 <__addsf3x+0x9c>
 36a:	91 50       	subi	r25, 0x01	; 1
 36c:	a1 f0       	breq	.+40     	; 0x396 <__addsf3x+0x9a>
 36e:	ff 0f       	add	r31, r31
 370:	bb 1f       	adc	r27, r27
 372:	66 1f       	adc	r22, r22
 374:	77 1f       	adc	r23, r23
 376:	88 1f       	adc	r24, r24
 378:	c2 f7       	brpl	.-16     	; 0x36a <__addsf3x+0x6e>
 37a:	0e c0       	rjmp	.+28     	; 0x398 <__addsf3x+0x9c>
 37c:	ba 0f       	add	r27, r26
 37e:	62 1f       	adc	r22, r18
 380:	73 1f       	adc	r23, r19
 382:	84 1f       	adc	r24, r20
 384:	48 f4       	brcc	.+18     	; 0x398 <__addsf3x+0x9c>
 386:	87 95       	ror	r24
 388:	77 95       	ror	r23
 38a:	67 95       	ror	r22
 38c:	b7 95       	ror	r27
 38e:	f7 95       	ror	r31
 390:	9e 3f       	cpi	r25, 0xFE	; 254
 392:	08 f0       	brcs	.+2      	; 0x396 <__addsf3x+0x9a>
 394:	b0 cf       	rjmp	.-160    	; 0x2f6 <__addsf3+0x28>
 396:	93 95       	inc	r25
 398:	88 0f       	add	r24, r24
 39a:	08 f0       	brcs	.+2      	; 0x39e <__addsf3x+0xa2>
 39c:	99 27       	eor	r25, r25
 39e:	ee 0f       	add	r30, r30
 3a0:	97 95       	ror	r25
 3a2:	87 95       	ror	r24
 3a4:	08 95       	ret

000003a6 <__divsf3>:
 3a6:	0e 94 e7 01 	call	0x3ce	; 0x3ce <__divsf3x>
 3aa:	0c 94 c8 02 	jmp	0x590	; 0x590 <__fp_round>
 3ae:	0e 94 c1 02 	call	0x582	; 0x582 <__fp_pscB>
 3b2:	58 f0       	brcs	.+22     	; 0x3ca <__divsf3+0x24>
 3b4:	0e 94 ba 02 	call	0x574	; 0x574 <__fp_pscA>
 3b8:	40 f0       	brcs	.+16     	; 0x3ca <__divsf3+0x24>
 3ba:	29 f4       	brne	.+10     	; 0x3c6 <__divsf3+0x20>
 3bc:	5f 3f       	cpi	r21, 0xFF	; 255
 3be:	29 f0       	breq	.+10     	; 0x3ca <__divsf3+0x24>
 3c0:	0c 94 b1 02 	jmp	0x562	; 0x562 <__fp_inf>
 3c4:	51 11       	cpse	r21, r1
 3c6:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__fp_szero>
 3ca:	0c 94 b7 02 	jmp	0x56e	; 0x56e <__fp_nan>

000003ce <__divsf3x>:
 3ce:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__fp_split3>
 3d2:	68 f3       	brcs	.-38     	; 0x3ae <__divsf3+0x8>

000003d4 <__divsf3_pse>:
 3d4:	99 23       	and	r25, r25
 3d6:	b1 f3       	breq	.-20     	; 0x3c4 <__divsf3+0x1e>
 3d8:	55 23       	and	r21, r21
 3da:	91 f3       	breq	.-28     	; 0x3c0 <__divsf3+0x1a>
 3dc:	95 1b       	sub	r25, r21
 3de:	55 0b       	sbc	r21, r21
 3e0:	bb 27       	eor	r27, r27
 3e2:	aa 27       	eor	r26, r26
 3e4:	62 17       	cp	r22, r18
 3e6:	73 07       	cpc	r23, r19
 3e8:	84 07       	cpc	r24, r20
 3ea:	38 f0       	brcs	.+14     	; 0x3fa <__divsf3_pse+0x26>
 3ec:	9f 5f       	subi	r25, 0xFF	; 255
 3ee:	5f 4f       	sbci	r21, 0xFF	; 255
 3f0:	22 0f       	add	r18, r18
 3f2:	33 1f       	adc	r19, r19
 3f4:	44 1f       	adc	r20, r20
 3f6:	aa 1f       	adc	r26, r26
 3f8:	a9 f3       	breq	.-22     	; 0x3e4 <__divsf3_pse+0x10>
 3fa:	35 d0       	rcall	.+106    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 3fc:	0e 2e       	mov	r0, r30
 3fe:	3a f0       	brmi	.+14     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 400:	e0 e8       	ldi	r30, 0x80	; 128
 402:	32 d0       	rcall	.+100    	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 404:	91 50       	subi	r25, 0x01	; 1
 406:	50 40       	sbci	r21, 0x00	; 0
 408:	e6 95       	lsr	r30
 40a:	00 1c       	adc	r0, r0
 40c:	ca f7       	brpl	.-14     	; 0x400 <__EEPROM_REGION_LENGTH__>
 40e:	2b d0       	rcall	.+86     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 410:	fe 2f       	mov	r31, r30
 412:	29 d0       	rcall	.+82     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 414:	66 0f       	add	r22, r22
 416:	77 1f       	adc	r23, r23
 418:	88 1f       	adc	r24, r24
 41a:	bb 1f       	adc	r27, r27
 41c:	26 17       	cp	r18, r22
 41e:	37 07       	cpc	r19, r23
 420:	48 07       	cpc	r20, r24
 422:	ab 07       	cpc	r26, r27
 424:	b0 e8       	ldi	r27, 0x80	; 128
 426:	09 f0       	breq	.+2      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 428:	bb 0b       	sbc	r27, r27
 42a:	80 2d       	mov	r24, r0
 42c:	bf 01       	movw	r22, r30
 42e:	ff 27       	eor	r31, r31
 430:	93 58       	subi	r25, 0x83	; 131
 432:	5f 4f       	sbci	r21, 0xFF	; 255
 434:	3a f0       	brmi	.+14     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 436:	9e 3f       	cpi	r25, 0xFE	; 254
 438:	51 05       	cpc	r21, r1
 43a:	78 f0       	brcs	.+30     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 43c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__fp_inf>
 440:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__fp_szero>
 444:	5f 3f       	cpi	r21, 0xFF	; 255
 446:	e4 f3       	brlt	.-8      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 448:	98 3e       	cpi	r25, 0xE8	; 232
 44a:	d4 f3       	brlt	.-12     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 44c:	86 95       	lsr	r24
 44e:	77 95       	ror	r23
 450:	67 95       	ror	r22
 452:	b7 95       	ror	r27
 454:	f7 95       	ror	r31
 456:	9f 5f       	subi	r25, 0xFF	; 255
 458:	c9 f7       	brne	.-14     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 45a:	88 0f       	add	r24, r24
 45c:	91 1d       	adc	r25, r1
 45e:	96 95       	lsr	r25
 460:	87 95       	ror	r24
 462:	97 f9       	bld	r25, 7
 464:	08 95       	ret
 466:	e1 e0       	ldi	r30, 0x01	; 1
 468:	66 0f       	add	r22, r22
 46a:	77 1f       	adc	r23, r23
 46c:	88 1f       	adc	r24, r24
 46e:	bb 1f       	adc	r27, r27
 470:	62 17       	cp	r22, r18
 472:	73 07       	cpc	r23, r19
 474:	84 07       	cpc	r24, r20
 476:	ba 07       	cpc	r27, r26
 478:	20 f0       	brcs	.+8      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 47a:	62 1b       	sub	r22, r18
 47c:	73 0b       	sbc	r23, r19
 47e:	84 0b       	sbc	r24, r20
 480:	ba 0b       	sbc	r27, r26
 482:	ee 1f       	adc	r30, r30
 484:	88 f7       	brcc	.-30     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 486:	e0 95       	com	r30
 488:	08 95       	ret

0000048a <__fixunssfsi>:
 48a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__fp_splitA>
 48e:	88 f0       	brcs	.+34     	; 0x4b2 <__fixunssfsi+0x28>
 490:	9f 57       	subi	r25, 0x7F	; 127
 492:	98 f0       	brcs	.+38     	; 0x4ba <__fixunssfsi+0x30>
 494:	b9 2f       	mov	r27, r25
 496:	99 27       	eor	r25, r25
 498:	b7 51       	subi	r27, 0x17	; 23
 49a:	b0 f0       	brcs	.+44     	; 0x4c8 <__fixunssfsi+0x3e>
 49c:	e1 f0       	breq	.+56     	; 0x4d6 <__fixunssfsi+0x4c>
 49e:	66 0f       	add	r22, r22
 4a0:	77 1f       	adc	r23, r23
 4a2:	88 1f       	adc	r24, r24
 4a4:	99 1f       	adc	r25, r25
 4a6:	1a f0       	brmi	.+6      	; 0x4ae <__fixunssfsi+0x24>
 4a8:	ba 95       	dec	r27
 4aa:	c9 f7       	brne	.-14     	; 0x49e <__fixunssfsi+0x14>
 4ac:	14 c0       	rjmp	.+40     	; 0x4d6 <__fixunssfsi+0x4c>
 4ae:	b1 30       	cpi	r27, 0x01	; 1
 4b0:	91 f0       	breq	.+36     	; 0x4d6 <__fixunssfsi+0x4c>
 4b2:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__fp_zero>
 4b6:	b1 e0       	ldi	r27, 0x01	; 1
 4b8:	08 95       	ret
 4ba:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__fp_zero>
 4be:	67 2f       	mov	r22, r23
 4c0:	78 2f       	mov	r23, r24
 4c2:	88 27       	eor	r24, r24
 4c4:	b8 5f       	subi	r27, 0xF8	; 248
 4c6:	39 f0       	breq	.+14     	; 0x4d6 <__fixunssfsi+0x4c>
 4c8:	b9 3f       	cpi	r27, 0xF9	; 249
 4ca:	cc f3       	brlt	.-14     	; 0x4be <__fixunssfsi+0x34>
 4cc:	86 95       	lsr	r24
 4ce:	77 95       	ror	r23
 4d0:	67 95       	ror	r22
 4d2:	b3 95       	inc	r27
 4d4:	d9 f7       	brne	.-10     	; 0x4cc <__fixunssfsi+0x42>
 4d6:	3e f4       	brtc	.+14     	; 0x4e6 <__fixunssfsi+0x5c>
 4d8:	90 95       	com	r25
 4da:	80 95       	com	r24
 4dc:	70 95       	com	r23
 4de:	61 95       	neg	r22
 4e0:	7f 4f       	sbci	r23, 0xFF	; 255
 4e2:	8f 4f       	sbci	r24, 0xFF	; 255
 4e4:	9f 4f       	sbci	r25, 0xFF	; 255
 4e6:	08 95       	ret

000004e8 <__floatunsisf>:
 4e8:	e8 94       	clt
 4ea:	09 c0       	rjmp	.+18     	; 0x4fe <__floatsisf+0x12>

000004ec <__floatsisf>:
 4ec:	97 fb       	bst	r25, 7
 4ee:	3e f4       	brtc	.+14     	; 0x4fe <__floatsisf+0x12>
 4f0:	90 95       	com	r25
 4f2:	80 95       	com	r24
 4f4:	70 95       	com	r23
 4f6:	61 95       	neg	r22
 4f8:	7f 4f       	sbci	r23, 0xFF	; 255
 4fa:	8f 4f       	sbci	r24, 0xFF	; 255
 4fc:	9f 4f       	sbci	r25, 0xFF	; 255
 4fe:	99 23       	and	r25, r25
 500:	a9 f0       	breq	.+42     	; 0x52c <__floatsisf+0x40>
 502:	f9 2f       	mov	r31, r25
 504:	96 e9       	ldi	r25, 0x96	; 150
 506:	bb 27       	eor	r27, r27
 508:	93 95       	inc	r25
 50a:	f6 95       	lsr	r31
 50c:	87 95       	ror	r24
 50e:	77 95       	ror	r23
 510:	67 95       	ror	r22
 512:	b7 95       	ror	r27
 514:	f1 11       	cpse	r31, r1
 516:	f8 cf       	rjmp	.-16     	; 0x508 <__floatsisf+0x1c>
 518:	fa f4       	brpl	.+62     	; 0x558 <__floatsisf+0x6c>
 51a:	bb 0f       	add	r27, r27
 51c:	11 f4       	brne	.+4      	; 0x522 <__floatsisf+0x36>
 51e:	60 ff       	sbrs	r22, 0
 520:	1b c0       	rjmp	.+54     	; 0x558 <__floatsisf+0x6c>
 522:	6f 5f       	subi	r22, 0xFF	; 255
 524:	7f 4f       	sbci	r23, 0xFF	; 255
 526:	8f 4f       	sbci	r24, 0xFF	; 255
 528:	9f 4f       	sbci	r25, 0xFF	; 255
 52a:	16 c0       	rjmp	.+44     	; 0x558 <__floatsisf+0x6c>
 52c:	88 23       	and	r24, r24
 52e:	11 f0       	breq	.+4      	; 0x534 <__floatsisf+0x48>
 530:	96 e9       	ldi	r25, 0x96	; 150
 532:	11 c0       	rjmp	.+34     	; 0x556 <__floatsisf+0x6a>
 534:	77 23       	and	r23, r23
 536:	21 f0       	breq	.+8      	; 0x540 <__floatsisf+0x54>
 538:	9e e8       	ldi	r25, 0x8E	; 142
 53a:	87 2f       	mov	r24, r23
 53c:	76 2f       	mov	r23, r22
 53e:	05 c0       	rjmp	.+10     	; 0x54a <__floatsisf+0x5e>
 540:	66 23       	and	r22, r22
 542:	71 f0       	breq	.+28     	; 0x560 <__floatsisf+0x74>
 544:	96 e8       	ldi	r25, 0x86	; 134
 546:	86 2f       	mov	r24, r22
 548:	70 e0       	ldi	r23, 0x00	; 0
 54a:	60 e0       	ldi	r22, 0x00	; 0
 54c:	2a f0       	brmi	.+10     	; 0x558 <__floatsisf+0x6c>
 54e:	9a 95       	dec	r25
 550:	66 0f       	add	r22, r22
 552:	77 1f       	adc	r23, r23
 554:	88 1f       	adc	r24, r24
 556:	da f7       	brpl	.-10     	; 0x54e <__floatsisf+0x62>
 558:	88 0f       	add	r24, r24
 55a:	96 95       	lsr	r25
 55c:	87 95       	ror	r24
 55e:	97 f9       	bld	r25, 7
 560:	08 95       	ret

00000562 <__fp_inf>:
 562:	97 f9       	bld	r25, 7
 564:	9f 67       	ori	r25, 0x7F	; 127
 566:	80 e8       	ldi	r24, 0x80	; 128
 568:	70 e0       	ldi	r23, 0x00	; 0
 56a:	60 e0       	ldi	r22, 0x00	; 0
 56c:	08 95       	ret

0000056e <__fp_nan>:
 56e:	9f ef       	ldi	r25, 0xFF	; 255
 570:	80 ec       	ldi	r24, 0xC0	; 192
 572:	08 95       	ret

00000574 <__fp_pscA>:
 574:	00 24       	eor	r0, r0
 576:	0a 94       	dec	r0
 578:	16 16       	cp	r1, r22
 57a:	17 06       	cpc	r1, r23
 57c:	18 06       	cpc	r1, r24
 57e:	09 06       	cpc	r0, r25
 580:	08 95       	ret

00000582 <__fp_pscB>:
 582:	00 24       	eor	r0, r0
 584:	0a 94       	dec	r0
 586:	12 16       	cp	r1, r18
 588:	13 06       	cpc	r1, r19
 58a:	14 06       	cpc	r1, r20
 58c:	05 06       	cpc	r0, r21
 58e:	08 95       	ret

00000590 <__fp_round>:
 590:	09 2e       	mov	r0, r25
 592:	03 94       	inc	r0
 594:	00 0c       	add	r0, r0
 596:	11 f4       	brne	.+4      	; 0x59c <__fp_round+0xc>
 598:	88 23       	and	r24, r24
 59a:	52 f0       	brmi	.+20     	; 0x5b0 <__fp_round+0x20>
 59c:	bb 0f       	add	r27, r27
 59e:	40 f4       	brcc	.+16     	; 0x5b0 <__fp_round+0x20>
 5a0:	bf 2b       	or	r27, r31
 5a2:	11 f4       	brne	.+4      	; 0x5a8 <__fp_round+0x18>
 5a4:	60 ff       	sbrs	r22, 0
 5a6:	04 c0       	rjmp	.+8      	; 0x5b0 <__fp_round+0x20>
 5a8:	6f 5f       	subi	r22, 0xFF	; 255
 5aa:	7f 4f       	sbci	r23, 0xFF	; 255
 5ac:	8f 4f       	sbci	r24, 0xFF	; 255
 5ae:	9f 4f       	sbci	r25, 0xFF	; 255
 5b0:	08 95       	ret

000005b2 <__fp_split3>:
 5b2:	57 fd       	sbrc	r21, 7
 5b4:	90 58       	subi	r25, 0x80	; 128
 5b6:	44 0f       	add	r20, r20
 5b8:	55 1f       	adc	r21, r21
 5ba:	59 f0       	breq	.+22     	; 0x5d2 <__fp_splitA+0x10>
 5bc:	5f 3f       	cpi	r21, 0xFF	; 255
 5be:	71 f0       	breq	.+28     	; 0x5dc <__fp_splitA+0x1a>
 5c0:	47 95       	ror	r20

000005c2 <__fp_splitA>:
 5c2:	88 0f       	add	r24, r24
 5c4:	97 fb       	bst	r25, 7
 5c6:	99 1f       	adc	r25, r25
 5c8:	61 f0       	breq	.+24     	; 0x5e2 <__fp_splitA+0x20>
 5ca:	9f 3f       	cpi	r25, 0xFF	; 255
 5cc:	79 f0       	breq	.+30     	; 0x5ec <__fp_splitA+0x2a>
 5ce:	87 95       	ror	r24
 5d0:	08 95       	ret
 5d2:	12 16       	cp	r1, r18
 5d4:	13 06       	cpc	r1, r19
 5d6:	14 06       	cpc	r1, r20
 5d8:	55 1f       	adc	r21, r21
 5da:	f2 cf       	rjmp	.-28     	; 0x5c0 <__fp_split3+0xe>
 5dc:	46 95       	lsr	r20
 5de:	f1 df       	rcall	.-30     	; 0x5c2 <__fp_splitA>
 5e0:	08 c0       	rjmp	.+16     	; 0x5f2 <__fp_splitA+0x30>
 5e2:	16 16       	cp	r1, r22
 5e4:	17 06       	cpc	r1, r23
 5e6:	18 06       	cpc	r1, r24
 5e8:	99 1f       	adc	r25, r25
 5ea:	f1 cf       	rjmp	.-30     	; 0x5ce <__fp_splitA+0xc>
 5ec:	86 95       	lsr	r24
 5ee:	71 05       	cpc	r23, r1
 5f0:	61 05       	cpc	r22, r1
 5f2:	08 94       	sec
 5f4:	08 95       	ret

000005f6 <__fp_zero>:
 5f6:	e8 94       	clt

000005f8 <__fp_szero>:
 5f8:	bb 27       	eor	r27, r27
 5fa:	66 27       	eor	r22, r22
 5fc:	77 27       	eor	r23, r23
 5fe:	cb 01       	movw	r24, r22
 600:	97 f9       	bld	r25, 7
 602:	08 95       	ret

00000604 <pow>:
 604:	fa 01       	movw	r30, r20
 606:	ee 0f       	add	r30, r30
 608:	ff 1f       	adc	r31, r31
 60a:	30 96       	adiw	r30, 0x00	; 0
 60c:	21 05       	cpc	r18, r1
 60e:	31 05       	cpc	r19, r1
 610:	a1 f1       	breq	.+104    	; 0x67a <pow+0x76>
 612:	61 15       	cp	r22, r1
 614:	71 05       	cpc	r23, r1
 616:	61 f4       	brne	.+24     	; 0x630 <pow+0x2c>
 618:	80 38       	cpi	r24, 0x80	; 128
 61a:	bf e3       	ldi	r27, 0x3F	; 63
 61c:	9b 07       	cpc	r25, r27
 61e:	49 f1       	breq	.+82     	; 0x672 <pow+0x6e>
 620:	68 94       	set
 622:	90 38       	cpi	r25, 0x80	; 128
 624:	81 05       	cpc	r24, r1
 626:	61 f0       	breq	.+24     	; 0x640 <pow+0x3c>
 628:	80 38       	cpi	r24, 0x80	; 128
 62a:	bf ef       	ldi	r27, 0xFF	; 255
 62c:	9b 07       	cpc	r25, r27
 62e:	41 f0       	breq	.+16     	; 0x640 <pow+0x3c>
 630:	99 23       	and	r25, r25
 632:	4a f5       	brpl	.+82     	; 0x686 <pow+0x82>
 634:	ff 3f       	cpi	r31, 0xFF	; 255
 636:	e1 05       	cpc	r30, r1
 638:	31 05       	cpc	r19, r1
 63a:	21 05       	cpc	r18, r1
 63c:	19 f1       	breq	.+70     	; 0x684 <pow+0x80>
 63e:	e8 94       	clt
 640:	08 94       	sec
 642:	e7 95       	ror	r30
 644:	d9 01       	movw	r26, r18
 646:	aa 23       	and	r26, r26
 648:	29 f4       	brne	.+10     	; 0x654 <pow+0x50>
 64a:	ab 2f       	mov	r26, r27
 64c:	be 2f       	mov	r27, r30
 64e:	f8 5f       	subi	r31, 0xF8	; 248
 650:	d0 f3       	brcs	.-12     	; 0x646 <pow+0x42>
 652:	10 c0       	rjmp	.+32     	; 0x674 <pow+0x70>
 654:	ff 5f       	subi	r31, 0xFF	; 255
 656:	70 f4       	brcc	.+28     	; 0x674 <pow+0x70>
 658:	a6 95       	lsr	r26
 65a:	e0 f7       	brcc	.-8      	; 0x654 <pow+0x50>
 65c:	f7 39       	cpi	r31, 0x97	; 151
 65e:	50 f0       	brcs	.+20     	; 0x674 <pow+0x70>
 660:	19 f0       	breq	.+6      	; 0x668 <pow+0x64>
 662:	ff 3a       	cpi	r31, 0xAF	; 175
 664:	38 f4       	brcc	.+14     	; 0x674 <pow+0x70>
 666:	9f 77       	andi	r25, 0x7F	; 127
 668:	9f 93       	push	r25
 66a:	0d d0       	rcall	.+26     	; 0x686 <pow+0x82>
 66c:	0f 90       	pop	r0
 66e:	07 fc       	sbrc	r0, 7
 670:	90 58       	subi	r25, 0x80	; 128
 672:	08 95       	ret
 674:	46 f0       	brts	.+16     	; 0x686 <pow+0x82>
 676:	0c 94 b7 02 	jmp	0x56e	; 0x56e <__fp_nan>
 67a:	60 e0       	ldi	r22, 0x00	; 0
 67c:	70 e0       	ldi	r23, 0x00	; 0
 67e:	80 e8       	ldi	r24, 0x80	; 128
 680:	9f e3       	ldi	r25, 0x3F	; 63
 682:	08 95       	ret
 684:	4f e7       	ldi	r20, 0x7F	; 127
 686:	9f 77       	andi	r25, 0x7F	; 127
 688:	5f 93       	push	r21
 68a:	4f 93       	push	r20
 68c:	3f 93       	push	r19
 68e:	2f 93       	push	r18
 690:	0e 94 fd 03 	call	0x7fa	; 0x7fa <log>
 694:	2f 91       	pop	r18
 696:	3f 91       	pop	r19
 698:	4f 91       	pop	r20
 69a:	5f 91       	pop	r21
 69c:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__mulsf3>
 6a0:	0c 94 5a 03 	jmp	0x6b4	; 0x6b4 <exp>
 6a4:	29 f4       	brne	.+10     	; 0x6b0 <pow+0xac>
 6a6:	16 f0       	brts	.+4      	; 0x6ac <pow+0xa8>
 6a8:	0c 94 b1 02 	jmp	0x562	; 0x562 <__fp_inf>
 6ac:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__fp_zero>
 6b0:	0c 94 b7 02 	jmp	0x56e	; 0x56e <__fp_nan>

000006b4 <exp>:
 6b4:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__fp_splitA>
 6b8:	a8 f3       	brcs	.-22     	; 0x6a4 <pow+0xa0>
 6ba:	96 38       	cpi	r25, 0x86	; 134
 6bc:	a0 f7       	brcc	.-24     	; 0x6a6 <pow+0xa2>
 6be:	07 f8       	bld	r0, 7
 6c0:	0f 92       	push	r0
 6c2:	e8 94       	clt
 6c4:	2b e3       	ldi	r18, 0x3B	; 59
 6c6:	3a ea       	ldi	r19, 0xAA	; 170
 6c8:	48 eb       	ldi	r20, 0xB8	; 184
 6ca:	5f e7       	ldi	r21, 0x7F	; 127
 6cc:	0e 94 8f 04 	call	0x91e	; 0x91e <__mulsf3_pse>
 6d0:	0f 92       	push	r0
 6d2:	0f 92       	push	r0
 6d4:	0f 92       	push	r0
 6d6:	4d b7       	in	r20, 0x3d	; 61
 6d8:	5e b7       	in	r21, 0x3e	; 62
 6da:	0f 92       	push	r0
 6dc:	0e 94 45 04 	call	0x88a	; 0x88a <modf>
 6e0:	e4 e5       	ldi	r30, 0x54	; 84
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	0e 94 8c 03 	call	0x718	; 0x718 <__fp_powser>
 6e8:	4f 91       	pop	r20
 6ea:	5f 91       	pop	r21
 6ec:	ef 91       	pop	r30
 6ee:	ff 91       	pop	r31
 6f0:	e5 95       	asr	r30
 6f2:	ee 1f       	adc	r30, r30
 6f4:	ff 1f       	adc	r31, r31
 6f6:	49 f0       	breq	.+18     	; 0x70a <exp+0x56>
 6f8:	fe 57       	subi	r31, 0x7E	; 126
 6fa:	e0 68       	ori	r30, 0x80	; 128
 6fc:	44 27       	eor	r20, r20
 6fe:	ee 0f       	add	r30, r30
 700:	44 1f       	adc	r20, r20
 702:	fa 95       	dec	r31
 704:	e1 f7       	brne	.-8      	; 0x6fe <exp+0x4a>
 706:	41 95       	neg	r20
 708:	55 0b       	sbc	r21, r21
 70a:	0e 94 bf 03 	call	0x77e	; 0x77e <ldexp>
 70e:	0f 90       	pop	r0
 710:	07 fe       	sbrs	r0, 7
 712:	0c 94 b3 03 	jmp	0x766	; 0x766 <inverse>
 716:	08 95       	ret

00000718 <__fp_powser>:
 718:	df 93       	push	r29
 71a:	cf 93       	push	r28
 71c:	1f 93       	push	r17
 71e:	0f 93       	push	r16
 720:	ff 92       	push	r15
 722:	ef 92       	push	r14
 724:	df 92       	push	r13
 726:	7b 01       	movw	r14, r22
 728:	8c 01       	movw	r16, r24
 72a:	68 94       	set
 72c:	06 c0       	rjmp	.+12     	; 0x73a <__fp_powser+0x22>
 72e:	da 2e       	mov	r13, r26
 730:	ef 01       	movw	r28, r30
 732:	0e 94 8c 04 	call	0x918	; 0x918 <__mulsf3x>
 736:	fe 01       	movw	r30, r28
 738:	e8 94       	clt
 73a:	a5 91       	lpm	r26, Z+
 73c:	25 91       	lpm	r18, Z+
 73e:	35 91       	lpm	r19, Z+
 740:	45 91       	lpm	r20, Z+
 742:	55 91       	lpm	r21, Z+
 744:	a6 f3       	brts	.-24     	; 0x72e <__fp_powser+0x16>
 746:	ef 01       	movw	r28, r30
 748:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__addsf3x>
 74c:	fe 01       	movw	r30, r28
 74e:	97 01       	movw	r18, r14
 750:	a8 01       	movw	r20, r16
 752:	da 94       	dec	r13
 754:	69 f7       	brne	.-38     	; 0x730 <__fp_powser+0x18>
 756:	df 90       	pop	r13
 758:	ef 90       	pop	r14
 75a:	ff 90       	pop	r15
 75c:	0f 91       	pop	r16
 75e:	1f 91       	pop	r17
 760:	cf 91       	pop	r28
 762:	df 91       	pop	r29
 764:	08 95       	ret

00000766 <inverse>:
 766:	9b 01       	movw	r18, r22
 768:	ac 01       	movw	r20, r24
 76a:	60 e0       	ldi	r22, 0x00	; 0
 76c:	70 e0       	ldi	r23, 0x00	; 0
 76e:	80 e8       	ldi	r24, 0x80	; 128
 770:	9f e3       	ldi	r25, 0x3F	; 63
 772:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__divsf3>
 776:	0c 94 b1 02 	jmp	0x562	; 0x562 <__fp_inf>
 77a:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__fp_mpack>

0000077e <ldexp>:
 77e:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__fp_splitA>
 782:	d8 f3       	brcs	.-10     	; 0x77a <inverse+0x14>
 784:	99 23       	and	r25, r25
 786:	c9 f3       	breq	.-14     	; 0x77a <inverse+0x14>
 788:	94 0f       	add	r25, r20
 78a:	51 1d       	adc	r21, r1
 78c:	a3 f3       	brvs	.-24     	; 0x776 <inverse+0x10>
 78e:	91 50       	subi	r25, 0x01	; 1
 790:	50 40       	sbci	r21, 0x00	; 0
 792:	94 f0       	brlt	.+36     	; 0x7b8 <ldexp+0x3a>
 794:	59 f0       	breq	.+22     	; 0x7ac <ldexp+0x2e>
 796:	88 23       	and	r24, r24
 798:	32 f0       	brmi	.+12     	; 0x7a6 <ldexp+0x28>
 79a:	66 0f       	add	r22, r22
 79c:	77 1f       	adc	r23, r23
 79e:	88 1f       	adc	r24, r24
 7a0:	91 50       	subi	r25, 0x01	; 1
 7a2:	50 40       	sbci	r21, 0x00	; 0
 7a4:	c1 f7       	brne	.-16     	; 0x796 <ldexp+0x18>
 7a6:	9e 3f       	cpi	r25, 0xFE	; 254
 7a8:	51 05       	cpc	r21, r1
 7aa:	2c f7       	brge	.-54     	; 0x776 <inverse+0x10>
 7ac:	88 0f       	add	r24, r24
 7ae:	91 1d       	adc	r25, r1
 7b0:	96 95       	lsr	r25
 7b2:	87 95       	ror	r24
 7b4:	97 f9       	bld	r25, 7
 7b6:	08 95       	ret
 7b8:	5f 3f       	cpi	r21, 0xFF	; 255
 7ba:	ac f0       	brlt	.+42     	; 0x7e6 <ldexp+0x68>
 7bc:	98 3e       	cpi	r25, 0xE8	; 232
 7be:	9c f0       	brlt	.+38     	; 0x7e6 <ldexp+0x68>
 7c0:	bb 27       	eor	r27, r27
 7c2:	86 95       	lsr	r24
 7c4:	77 95       	ror	r23
 7c6:	67 95       	ror	r22
 7c8:	b7 95       	ror	r27
 7ca:	08 f4       	brcc	.+2      	; 0x7ce <ldexp+0x50>
 7cc:	b1 60       	ori	r27, 0x01	; 1
 7ce:	93 95       	inc	r25
 7d0:	c1 f7       	brne	.-16     	; 0x7c2 <ldexp+0x44>
 7d2:	bb 0f       	add	r27, r27
 7d4:	58 f7       	brcc	.-42     	; 0x7ac <ldexp+0x2e>
 7d6:	11 f4       	brne	.+4      	; 0x7dc <ldexp+0x5e>
 7d8:	60 ff       	sbrs	r22, 0
 7da:	e8 cf       	rjmp	.-48     	; 0x7ac <ldexp+0x2e>
 7dc:	6f 5f       	subi	r22, 0xFF	; 255
 7de:	7f 4f       	sbci	r23, 0xFF	; 255
 7e0:	8f 4f       	sbci	r24, 0xFF	; 255
 7e2:	9f 4f       	sbci	r25, 0xFF	; 255
 7e4:	e3 cf       	rjmp	.-58     	; 0x7ac <ldexp+0x2e>
 7e6:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__fp_szero>
 7ea:	16 f0       	brts	.+4      	; 0x7f0 <ldexp+0x72>
 7ec:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__fp_mpack>
 7f0:	0c 94 b7 02 	jmp	0x56e	; 0x56e <__fp_nan>
 7f4:	68 94       	set
 7f6:	0c 94 b1 02 	jmp	0x562	; 0x562 <__fp_inf>

000007fa <log>:
 7fa:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__fp_splitA>
 7fe:	a8 f3       	brcs	.-22     	; 0x7ea <ldexp+0x6c>
 800:	99 23       	and	r25, r25
 802:	c1 f3       	breq	.-16     	; 0x7f4 <ldexp+0x76>
 804:	ae f3       	brts	.-22     	; 0x7f0 <ldexp+0x72>
 806:	df 93       	push	r29
 808:	cf 93       	push	r28
 80a:	1f 93       	push	r17
 80c:	0f 93       	push	r16
 80e:	ff 92       	push	r15
 810:	c9 2f       	mov	r28, r25
 812:	dd 27       	eor	r29, r29
 814:	88 23       	and	r24, r24
 816:	2a f0       	brmi	.+10     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 818:	21 97       	sbiw	r28, 0x01	; 1
 81a:	66 0f       	add	r22, r22
 81c:	77 1f       	adc	r23, r23
 81e:	88 1f       	adc	r24, r24
 820:	da f7       	brpl	.-10     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 822:	20 e0       	ldi	r18, 0x00	; 0
 824:	30 e0       	ldi	r19, 0x00	; 0
 826:	40 e8       	ldi	r20, 0x80	; 128
 828:	5f eb       	ldi	r21, 0xBF	; 191
 82a:	9f e3       	ldi	r25, 0x3F	; 63
 82c:	88 39       	cpi	r24, 0x98	; 152
 82e:	20 f0       	brcs	.+8      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 830:	80 3e       	cpi	r24, 0xE0	; 224
 832:	38 f0       	brcs	.+14     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 834:	21 96       	adiw	r28, 0x01	; 1
 836:	8f 77       	andi	r24, 0x7F	; 127
 838:	0e 94 67 01 	call	0x2ce	; 0x2ce <__addsf3>
 83c:	ec e7       	ldi	r30, 0x7C	; 124
 83e:	f0 e0       	ldi	r31, 0x00	; 0
 840:	04 c0       	rjmp	.+8      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 842:	0e 94 67 01 	call	0x2ce	; 0x2ce <__addsf3>
 846:	e9 ea       	ldi	r30, 0xA9	; 169
 848:	f0 e0       	ldi	r31, 0x00	; 0
 84a:	0e 94 8c 03 	call	0x718	; 0x718 <__fp_powser>
 84e:	8b 01       	movw	r16, r22
 850:	be 01       	movw	r22, r28
 852:	ec 01       	movw	r28, r24
 854:	fb 2e       	mov	r15, r27
 856:	6f 57       	subi	r22, 0x7F	; 127
 858:	71 09       	sbc	r23, r1
 85a:	75 95       	asr	r23
 85c:	77 1f       	adc	r23, r23
 85e:	88 0b       	sbc	r24, r24
 860:	99 0b       	sbc	r25, r25
 862:	0e 94 76 02 	call	0x4ec	; 0x4ec <__floatsisf>
 866:	28 e1       	ldi	r18, 0x18	; 24
 868:	32 e7       	ldi	r19, 0x72	; 114
 86a:	41 e3       	ldi	r20, 0x31	; 49
 86c:	5f e3       	ldi	r21, 0x3F	; 63
 86e:	0e 94 8c 04 	call	0x918	; 0x918 <__mulsf3x>
 872:	af 2d       	mov	r26, r15
 874:	98 01       	movw	r18, r16
 876:	ae 01       	movw	r20, r28
 878:	ff 90       	pop	r15
 87a:	0f 91       	pop	r16
 87c:	1f 91       	pop	r17
 87e:	cf 91       	pop	r28
 880:	df 91       	pop	r29
 882:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__addsf3x>
 886:	0c 94 c8 02 	jmp	0x590	; 0x590 <__fp_round>

0000088a <modf>:
 88a:	fa 01       	movw	r30, r20
 88c:	dc 01       	movw	r26, r24
 88e:	aa 0f       	add	r26, r26
 890:	bb 1f       	adc	r27, r27
 892:	9b 01       	movw	r18, r22
 894:	ac 01       	movw	r20, r24
 896:	bf 57       	subi	r27, 0x7F	; 127
 898:	28 f4       	brcc	.+10     	; 0x8a4 <modf+0x1a>
 89a:	22 27       	eor	r18, r18
 89c:	33 27       	eor	r19, r19
 89e:	44 27       	eor	r20, r20
 8a0:	50 78       	andi	r21, 0x80	; 128
 8a2:	20 c0       	rjmp	.+64     	; 0x8e4 <modf+0x5a>
 8a4:	b7 51       	subi	r27, 0x17	; 23
 8a6:	90 f4       	brcc	.+36     	; 0x8cc <modf+0x42>
 8a8:	ab 2f       	mov	r26, r27
 8aa:	00 24       	eor	r0, r0
 8ac:	46 95       	lsr	r20
 8ae:	37 95       	ror	r19
 8b0:	27 95       	ror	r18
 8b2:	01 1c       	adc	r0, r1
 8b4:	a3 95       	inc	r26
 8b6:	d2 f3       	brmi	.-12     	; 0x8ac <modf+0x22>
 8b8:	00 20       	and	r0, r0
 8ba:	71 f0       	breq	.+28     	; 0x8d8 <modf+0x4e>
 8bc:	22 0f       	add	r18, r18
 8be:	33 1f       	adc	r19, r19
 8c0:	44 1f       	adc	r20, r20
 8c2:	b3 95       	inc	r27
 8c4:	da f3       	brmi	.-10     	; 0x8bc <modf+0x32>
 8c6:	0e d0       	rcall	.+28     	; 0x8e4 <modf+0x5a>
 8c8:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__subsf3>
 8cc:	61 30       	cpi	r22, 0x01	; 1
 8ce:	71 05       	cpc	r23, r1
 8d0:	a0 e8       	ldi	r26, 0x80	; 128
 8d2:	8a 07       	cpc	r24, r26
 8d4:	b9 46       	sbci	r27, 0x69	; 105
 8d6:	30 f4       	brcc	.+12     	; 0x8e4 <modf+0x5a>
 8d8:	9b 01       	movw	r18, r22
 8da:	ac 01       	movw	r20, r24
 8dc:	66 27       	eor	r22, r22
 8de:	77 27       	eor	r23, r23
 8e0:	88 27       	eor	r24, r24
 8e2:	90 78       	andi	r25, 0x80	; 128
 8e4:	30 96       	adiw	r30, 0x00	; 0
 8e6:	21 f0       	breq	.+8      	; 0x8f0 <modf+0x66>
 8e8:	20 83       	st	Z, r18
 8ea:	31 83       	std	Z+1, r19	; 0x01
 8ec:	42 83       	std	Z+2, r20	; 0x02
 8ee:	53 83       	std	Z+3, r21	; 0x03
 8f0:	08 95       	ret

000008f2 <__mulsf3>:
 8f2:	0e 94 8c 04 	call	0x918	; 0x918 <__mulsf3x>
 8f6:	0c 94 c8 02 	jmp	0x590	; 0x590 <__fp_round>
 8fa:	0e 94 ba 02 	call	0x574	; 0x574 <__fp_pscA>
 8fe:	38 f0       	brcs	.+14     	; 0x90e <__mulsf3+0x1c>
 900:	0e 94 c1 02 	call	0x582	; 0x582 <__fp_pscB>
 904:	20 f0       	brcs	.+8      	; 0x90e <__mulsf3+0x1c>
 906:	95 23       	and	r25, r21
 908:	11 f0       	breq	.+4      	; 0x90e <__mulsf3+0x1c>
 90a:	0c 94 b1 02 	jmp	0x562	; 0x562 <__fp_inf>
 90e:	0c 94 b7 02 	jmp	0x56e	; 0x56e <__fp_nan>
 912:	11 24       	eor	r1, r1
 914:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__fp_szero>

00000918 <__mulsf3x>:
 918:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__fp_split3>
 91c:	70 f3       	brcs	.-36     	; 0x8fa <__mulsf3+0x8>

0000091e <__mulsf3_pse>:
 91e:	95 9f       	mul	r25, r21
 920:	c1 f3       	breq	.-16     	; 0x912 <__mulsf3+0x20>
 922:	95 0f       	add	r25, r21
 924:	50 e0       	ldi	r21, 0x00	; 0
 926:	55 1f       	adc	r21, r21
 928:	62 9f       	mul	r22, r18
 92a:	f0 01       	movw	r30, r0
 92c:	72 9f       	mul	r23, r18
 92e:	bb 27       	eor	r27, r27
 930:	f0 0d       	add	r31, r0
 932:	b1 1d       	adc	r27, r1
 934:	63 9f       	mul	r22, r19
 936:	aa 27       	eor	r26, r26
 938:	f0 0d       	add	r31, r0
 93a:	b1 1d       	adc	r27, r1
 93c:	aa 1f       	adc	r26, r26
 93e:	64 9f       	mul	r22, r20
 940:	66 27       	eor	r22, r22
 942:	b0 0d       	add	r27, r0
 944:	a1 1d       	adc	r26, r1
 946:	66 1f       	adc	r22, r22
 948:	82 9f       	mul	r24, r18
 94a:	22 27       	eor	r18, r18
 94c:	b0 0d       	add	r27, r0
 94e:	a1 1d       	adc	r26, r1
 950:	62 1f       	adc	r22, r18
 952:	73 9f       	mul	r23, r19
 954:	b0 0d       	add	r27, r0
 956:	a1 1d       	adc	r26, r1
 958:	62 1f       	adc	r22, r18
 95a:	83 9f       	mul	r24, r19
 95c:	a0 0d       	add	r26, r0
 95e:	61 1d       	adc	r22, r1
 960:	22 1f       	adc	r18, r18
 962:	74 9f       	mul	r23, r20
 964:	33 27       	eor	r19, r19
 966:	a0 0d       	add	r26, r0
 968:	61 1d       	adc	r22, r1
 96a:	23 1f       	adc	r18, r19
 96c:	84 9f       	mul	r24, r20
 96e:	60 0d       	add	r22, r0
 970:	21 1d       	adc	r18, r1
 972:	82 2f       	mov	r24, r18
 974:	76 2f       	mov	r23, r22
 976:	6a 2f       	mov	r22, r26
 978:	11 24       	eor	r1, r1
 97a:	9f 57       	subi	r25, 0x7F	; 127
 97c:	50 40       	sbci	r21, 0x00	; 0
 97e:	9a f0       	brmi	.+38     	; 0x9a6 <__mulsf3_pse+0x88>
 980:	f1 f0       	breq	.+60     	; 0x9be <__mulsf3_pse+0xa0>
 982:	88 23       	and	r24, r24
 984:	4a f0       	brmi	.+18     	; 0x998 <__mulsf3_pse+0x7a>
 986:	ee 0f       	add	r30, r30
 988:	ff 1f       	adc	r31, r31
 98a:	bb 1f       	adc	r27, r27
 98c:	66 1f       	adc	r22, r22
 98e:	77 1f       	adc	r23, r23
 990:	88 1f       	adc	r24, r24
 992:	91 50       	subi	r25, 0x01	; 1
 994:	50 40       	sbci	r21, 0x00	; 0
 996:	a9 f7       	brne	.-22     	; 0x982 <__mulsf3_pse+0x64>
 998:	9e 3f       	cpi	r25, 0xFE	; 254
 99a:	51 05       	cpc	r21, r1
 99c:	80 f0       	brcs	.+32     	; 0x9be <__mulsf3_pse+0xa0>
 99e:	0c 94 b1 02 	jmp	0x562	; 0x562 <__fp_inf>
 9a2:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__fp_szero>
 9a6:	5f 3f       	cpi	r21, 0xFF	; 255
 9a8:	e4 f3       	brlt	.-8      	; 0x9a2 <__mulsf3_pse+0x84>
 9aa:	98 3e       	cpi	r25, 0xE8	; 232
 9ac:	d4 f3       	brlt	.-12     	; 0x9a2 <__mulsf3_pse+0x84>
 9ae:	86 95       	lsr	r24
 9b0:	77 95       	ror	r23
 9b2:	67 95       	ror	r22
 9b4:	b7 95       	ror	r27
 9b6:	f7 95       	ror	r31
 9b8:	e7 95       	ror	r30
 9ba:	9f 5f       	subi	r25, 0xFF	; 255
 9bc:	c1 f7       	brne	.-16     	; 0x9ae <__mulsf3_pse+0x90>
 9be:	fe 2b       	or	r31, r30
 9c0:	88 0f       	add	r24, r24
 9c2:	91 1d       	adc	r25, r1
 9c4:	96 95       	lsr	r25
 9c6:	87 95       	ror	r24
 9c8:	97 f9       	bld	r25, 7
 9ca:	08 95       	ret

000009cc <__fp_mpack>:
 9cc:	9f 3f       	cpi	r25, 0xFF	; 255
 9ce:	31 f0       	breq	.+12     	; 0x9dc <__fp_mpack_finite+0xc>

000009d0 <__fp_mpack_finite>:
 9d0:	91 50       	subi	r25, 0x01	; 1
 9d2:	20 f4       	brcc	.+8      	; 0x9dc <__fp_mpack_finite+0xc>
 9d4:	87 95       	ror	r24
 9d6:	77 95       	ror	r23
 9d8:	67 95       	ror	r22
 9da:	b7 95       	ror	r27
 9dc:	88 0f       	add	r24, r24
 9de:	91 1d       	adc	r25, r1
 9e0:	96 95       	lsr	r25
 9e2:	87 95       	ror	r24
 9e4:	97 f9       	bld	r25, 7
 9e6:	08 95       	ret

000009e8 <_exit>:
 9e8:	f8 94       	cli

000009ea <__stop_program>:
 9ea:	ff cf       	rjmp	.-2      	; 0x9ea <__stop_program>
