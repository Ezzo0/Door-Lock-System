
MCU_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000034e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000034e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000034e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008b8  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000068e  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000052d  00000000  00000000  00001392  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  000018c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037f  00000000  00000000  0000198c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000278  00000000  00000000  00001d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00001f83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
uint16_t data =0;


int main(void)
{
	DIO_init(PORT_A, 0, OUT);
  7c:	41 e0       	ldi	r20, 0x01	; 1
  7e:	60 e0       	ldi	r22, 0x00	; 0
  80:	81 e4       	ldi	r24, 0x41	; 65
  82:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_init>
	UART_init();
  86:	0e 94 4e 01 	call	0x29c	; 0x29c <UART_init>
    
    while (1) 
    {
		UART_recieve();
  8a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <UART_recieve>
		if(data == 0){
  8e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  92:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  96:	00 97       	sbiw	r24, 0x00	; 0
  98:	31 f4       	brne	.+12     	; 0xa6 <main+0x2a>
			DIO_write(PORT_A, 0, LOW);
  9a:	40 e0       	ldi	r20, 0x00	; 0
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	81 e4       	ldi	r24, 0x41	; 65
  a0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_write>
  a4:	f2 cf       	rjmp	.-28     	; 0x8a <main+0xe>
		}else if(data ==1){
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	81 f7       	brne	.-32     	; 0x8a <main+0xe>
			DIO_write(PORT_A, 0, HIGH);
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	60 e0       	ldi	r22, 0x00	; 0
  ae:	81 e4       	ldi	r24, 0x41	; 65
  b0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_write>
  b4:	ea cf       	rjmp	.-44     	; 0x8a <main+0xe>

000000b6 <DIO_init>:
#include "DIO.h"

// Set pin direction in a specific port (input or output)
void DIO_init(uint8_t portname, uint8_t pinnum, uint8_t direction){
	
	switch(portname){
  b6:	82 34       	cpi	r24, 0x42	; 66
  b8:	29 f1       	breq	.+74     	; 0x104 <DIO_init+0x4e>
  ba:	18 f4       	brcc	.+6      	; 0xc2 <DIO_init+0xc>
  bc:	81 34       	cpi	r24, 0x41	; 65
  be:	39 f0       	breq	.+14     	; 0xce <DIO_init+0x18>
  c0:	08 95       	ret
  c2:	83 34       	cpi	r24, 0x43	; 67
  c4:	d1 f1       	breq	.+116    	; 0x13a <DIO_init+0x84>
  c6:	84 34       	cpi	r24, 0x44	; 68
  c8:	09 f4       	brne	.+2      	; 0xcc <DIO_init+0x16>
  ca:	52 c0       	rjmp	.+164    	; 0x170 <DIO_init+0xba>
  cc:	08 95       	ret
		case PORT_A:
			if(direction==OUT){
  ce:	41 30       	cpi	r20, 0x01	; 1
  d0:	59 f4       	brne	.+22     	; 0xe8 <DIO_init+0x32>
				set_pin(DDRA, pinnum);
  d2:	2a b3       	in	r18, 0x1a	; 26
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_init+0x28>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_init+0x24>
  e2:	82 2b       	or	r24, r18
  e4:	8a bb       	out	0x1a, r24	; 26
  e6:	08 95       	ret
			}else if(direction==IN){
  e8:	41 11       	cpse	r20, r1
  ea:	5c c0       	rjmp	.+184    	; 0x1a4 <DIO_init+0xee>
				clr_pin(DDRA, pinnum);
  ec:	2a b3       	in	r18, 0x1a	; 26
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_init+0x42>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_init+0x3e>
  fc:	80 95       	com	r24
  fe:	82 23       	and	r24, r18
 100:	8a bb       	out	0x1a, r24	; 26
 102:	08 95       	ret
			}
			break;
			
		case PORT_B:
			if(direction==OUT){
 104:	41 30       	cpi	r20, 0x01	; 1
 106:	59 f4       	brne	.+22     	; 0x11e <DIO_init+0x68>
				set_pin(DDRB, pinnum);
 108:	27 b3       	in	r18, 0x17	; 23
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_init+0x5e>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_init+0x5a>
 118:	82 2b       	or	r24, r18
 11a:	87 bb       	out	0x17, r24	; 23
 11c:	08 95       	ret
			}else if(direction==IN){
 11e:	41 11       	cpse	r20, r1
 120:	41 c0       	rjmp	.+130    	; 0x1a4 <DIO_init+0xee>
				clr_pin(DDRB, pinnum);
 122:	27 b3       	in	r18, 0x17	; 23
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_init+0x78>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_init+0x74>
 132:	80 95       	com	r24
 134:	82 23       	and	r24, r18
 136:	87 bb       	out	0x17, r24	; 23
 138:	08 95       	ret
			}
			break;
		
		case PORT_C:
			if(direction==OUT){
 13a:	41 30       	cpi	r20, 0x01	; 1
 13c:	59 f4       	brne	.+22     	; 0x154 <DIO_init+0x9e>
				set_pin(DDRC, pinnum);
 13e:	24 b3       	in	r18, 0x14	; 20
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_init+0x94>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_init+0x90>
 14e:	82 2b       	or	r24, r18
 150:	84 bb       	out	0x14, r24	; 20
 152:	08 95       	ret
			}else if(direction==IN){
 154:	41 11       	cpse	r20, r1
 156:	26 c0       	rjmp	.+76     	; 0x1a4 <DIO_init+0xee>
				clr_pin(DDRC, pinnum);
 158:	24 b3       	in	r18, 0x14	; 20
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_init+0xae>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	6a 95       	dec	r22
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_init+0xaa>
 168:	80 95       	com	r24
 16a:	82 23       	and	r24, r18
 16c:	84 bb       	out	0x14, r24	; 20
 16e:	08 95       	ret
			}
			break;
		
		case PORT_D:
			if(direction==OUT){
 170:	41 30       	cpi	r20, 0x01	; 1
 172:	59 f4       	brne	.+22     	; 0x18a <DIO_init+0xd4>
				set_pin(DDRD, pinnum);
 174:	21 b3       	in	r18, 0x11	; 17
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <DIO_init+0xca>
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <DIO_init+0xc6>
 184:	82 2b       	or	r24, r18
 186:	81 bb       	out	0x11, r24	; 17
 188:	08 95       	ret
			}else if(direction==IN){
 18a:	41 11       	cpse	r20, r1
 18c:	0b c0       	rjmp	.+22     	; 0x1a4 <DIO_init+0xee>
				clr_pin(DDRD, pinnum);
 18e:	21 b3       	in	r18, 0x11	; 17
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_init+0xe4>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_init+0xe0>
 19e:	80 95       	com	r24
 1a0:	82 23       	and	r24, r18
 1a2:	81 bb       	out	0x11, r24	; 17
 1a4:	08 95       	ret

000001a6 <DIO_write>:
	
}

// Set pin state in a specific port (high or low)
void DIO_write(uint8_t portname, uint8_t pinnum, uint8_t state){
	switch(portname){
 1a6:	82 34       	cpi	r24, 0x42	; 66
 1a8:	29 f1       	breq	.+74     	; 0x1f4 <DIO_write+0x4e>
 1aa:	18 f4       	brcc	.+6      	; 0x1b2 <DIO_write+0xc>
 1ac:	81 34       	cpi	r24, 0x41	; 65
 1ae:	39 f0       	breq	.+14     	; 0x1be <DIO_write+0x18>
 1b0:	08 95       	ret
 1b2:	83 34       	cpi	r24, 0x43	; 67
 1b4:	d1 f1       	breq	.+116    	; 0x22a <DIO_write+0x84>
 1b6:	84 34       	cpi	r24, 0x44	; 68
 1b8:	09 f4       	brne	.+2      	; 0x1bc <DIO_write+0x16>
 1ba:	52 c0       	rjmp	.+164    	; 0x260 <DIO_write+0xba>
 1bc:	08 95       	ret
		case PORT_A:
			if(state==HIGH){
 1be:	41 30       	cpi	r20, 0x01	; 1
 1c0:	59 f4       	brne	.+22     	; 0x1d8 <DIO_write+0x32>
				set_pin(PORTA, pinnum);
 1c2:	2b b3       	in	r18, 0x1b	; 27
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <DIO_write+0x28>
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	6a 95       	dec	r22
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <DIO_write+0x24>
 1d2:	82 2b       	or	r24, r18
 1d4:	8b bb       	out	0x1b, r24	; 27
 1d6:	08 95       	ret
			}else if(state==LOW){
 1d8:	41 11       	cpse	r20, r1
 1da:	5c c0       	rjmp	.+184    	; 0x294 <DIO_write+0xee>
				clr_pin(PORTA, pinnum);
 1dc:	2b b3       	in	r18, 0x1b	; 27
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_write+0x42>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	6a 95       	dec	r22
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_write+0x3e>
 1ec:	80 95       	com	r24
 1ee:	82 23       	and	r24, r18
 1f0:	8b bb       	out	0x1b, r24	; 27
 1f2:	08 95       	ret
			}
			break;
		
		case PORT_B:
			if(state==HIGH){
 1f4:	41 30       	cpi	r20, 0x01	; 1
 1f6:	59 f4       	brne	.+22     	; 0x20e <DIO_write+0x68>
				set_pin(PORTB, pinnum);
 1f8:	28 b3       	in	r18, 0x18	; 24
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_write+0x5e>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	6a 95       	dec	r22
 206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_write+0x5a>
 208:	82 2b       	or	r24, r18
 20a:	88 bb       	out	0x18, r24	; 24
 20c:	08 95       	ret
				}else if(state==LOW){
 20e:	41 11       	cpse	r20, r1
 210:	41 c0       	rjmp	.+130    	; 0x294 <DIO_write+0xee>
				clr_pin(PORTB, pinnum);
 212:	28 b3       	in	r18, 0x18	; 24
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_write+0x78>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	6a 95       	dec	r22
 220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_write+0x74>
 222:	80 95       	com	r24
 224:	82 23       	and	r24, r18
 226:	88 bb       	out	0x18, r24	; 24
 228:	08 95       	ret
			}
			break;
		
		case PORT_C:
			if(state==HIGH){
 22a:	41 30       	cpi	r20, 0x01	; 1
 22c:	59 f4       	brne	.+22     	; 0x244 <DIO_write+0x9e>
				set_pin(PORTC, pinnum);
 22e:	25 b3       	in	r18, 0x15	; 21
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_write+0x94>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_write+0x90>
 23e:	82 2b       	or	r24, r18
 240:	85 bb       	out	0x15, r24	; 21
 242:	08 95       	ret
			}else if(state==LOW){
 244:	41 11       	cpse	r20, r1
 246:	26 c0       	rjmp	.+76     	; 0x294 <DIO_write+0xee>
				clr_pin(PORTC, pinnum);
 248:	25 b3       	in	r18, 0x15	; 21
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_write+0xae>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_write+0xaa>
 258:	80 95       	com	r24
 25a:	82 23       	and	r24, r18
 25c:	85 bb       	out	0x15, r24	; 21
 25e:	08 95       	ret
			}
			break;
		
		case PORT_D:
			if(state==HIGH){
 260:	41 30       	cpi	r20, 0x01	; 1
 262:	59 f4       	brne	.+22     	; 0x27a <DIO_write+0xd4>
				set_pin(PORTD, pinnum);
 264:	22 b3       	in	r18, 0x12	; 18
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_write+0xca>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	6a 95       	dec	r22
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_write+0xc6>
 274:	82 2b       	or	r24, r18
 276:	82 bb       	out	0x12, r24	; 18
 278:	08 95       	ret
			}else if(state==LOW){
 27a:	41 11       	cpse	r20, r1
 27c:	0b c0       	rjmp	.+22     	; 0x294 <DIO_write+0xee>
				clr_pin(PORTD, pinnum);
 27e:	22 b3       	in	r18, 0x12	; 18
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_write+0xe4>
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	6a 95       	dec	r22
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_write+0xe0>
 28e:	80 95       	com	r24
 290:	82 23       	and	r24, r18
 292:	82 bb       	out	0x12, r24	; 18
 294:	08 95       	ret

00000296 <UART_set_baud_rate>:
	
	
}

void UART_set_baud_rate(uint16_t baud_rate){
	UBRRH = (uint8_t)(baud_rate >> 8);
 296:	90 bd       	out	0x20, r25	; 32
	UBRRL = (uint8_t) baud_rate;
 298:	89 b9       	out	0x09, r24	; 9
 29a:	08 95       	ret

0000029c <UART_init>:

void UART_init(){
	
	// Baud rate settings
	//rate= 9600, freq= 8MH
	UART_set_baud_rate(51);
 29c:	83 e3       	ldi	r24, 0x33	; 51
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 4b 01 	call	0x296	; 0x296 <UART_set_baud_rate>
	
	//UART enable tx and rx
	set_pin(UCSRB, 3);
 2a4:	8a b1       	in	r24, 0x0a	; 10
 2a6:	88 60       	ori	r24, 0x08	; 8
 2a8:	8a b9       	out	0x0a, r24	; 10
	set_pin(UCSRB, 4);
 2aa:	8a b1       	in	r24, 0x0a	; 10
 2ac:	80 61       	ori	r24, 0x10	; 16
 2ae:	8a b9       	out	0x0a, r24	; 10
	
	// Set character size
	set_pin(UCSRC,7);
 2b0:	80 b5       	in	r24, 0x20	; 32
 2b2:	80 68       	ori	r24, 0x80	; 128
 2b4:	80 bd       	out	0x20, r24	; 32
	set_pin(UCSRC,1);
 2b6:	80 b5       	in	r24, 0x20	; 32
 2b8:	82 60       	ori	r24, 0x02	; 2
 2ba:	80 bd       	out	0x20, r24	; 32
	set_pin(UCSRC,2);
 2bc:	80 b5       	in	r24, 0x20	; 32
 2be:	84 60       	ori	r24, 0x04	; 4
 2c0:	80 bd       	out	0x20, r24	; 32
 2c2:	08 95       	ret

000002c4 <UART_recieve>:
	UBRRL = (uint8_t) baud_rate;
	
}

void UART_recieve(){
	while(get_pin(UCSRA, 7) == 0);
 2c4:	5f 9b       	sbis	0x0b, 7	; 11
 2c6:	fe cf       	rjmp	.-4      	; 0x2c4 <UART_recieve>
	data = UDR;
 2c8:	8c b1       	in	r24, 0x0c	; 12
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2d0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 2d4:	08 95       	ret

000002d6 <_exit>:
 2d6:	f8 94       	cli

000002d8 <__stop_program>:
 2d8:	ff cf       	rjmp	.-2      	; 0x2d8 <__stop_program>
