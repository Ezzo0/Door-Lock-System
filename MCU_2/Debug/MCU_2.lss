
MCU_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000e30  00000ec4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  00800074  00800074  00000ed8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ed8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00000f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001554  00000000  00000000  000010fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a6e  00000000  00000000  00002650  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e48  00000000  00000000  000030be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f0  00000000  00000000  00003f08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000709  00000000  00000000  000041f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007bb  00000000  00000000  00004901  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  000050bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
   4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
   8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
   c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  54:	07 63       	ori	r16, 0x37	; 55
  56:	42 36       	cpi	r20, 0x62	; 98
  58:	b7 9b       	sbis	0x16, 7	; 22
  5a:	d8 a7       	std	Y+40, r29	; 0x28
  5c:	1a 39       	cpi	r17, 0x9A	; 154
  5e:	68 56       	subi	r22, 0x68	; 104
  60:	18 ae       	std	Y+56, r1	; 0x38
  62:	ba ab       	std	Y+50, r27	; 0x32
  64:	55 8c       	ldd	r5, Z+29	; 0x1d
  66:	1d 3c       	cpi	r17, 0xCD	; 205
  68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
  6a:	57 63       	ori	r21, 0x37	; 55
  6c:	bd 6d       	ori	r27, 0xDD	; 221
  6e:	ed fd       	.word	0xfded	; ????
  70:	75 3e       	cpi	r23, 0xE5	; 229
  72:	f6 17       	cp	r31, r22
  74:	72 31       	cpi	r23, 0x12	; 18
  76:	bf 00       	.word	0x00bf	; ????
  78:	00 00       	nop
  7a:	80 3f       	cpi	r24, 0xF0	; 240
  7c:	08 00       	.word	0x0008	; ????
  7e:	00 00       	nop
  80:	be 92       	st	-X, r11
  82:	24 49       	sbci	r18, 0x94	; 148
  84:	12 3e       	cpi	r17, 0xE2	; 226
  86:	ab aa       	std	Y+51, r10	; 0x33
  88:	aa 2a       	or	r10, r26
  8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
  8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
  8e:	4c 3e       	cpi	r20, 0xEC	; 236
  90:	00 00       	nop
  92:	00 80       	ld	r0, Z
  94:	be ab       	std	Y+54, r27	; 0x36
  96:	aa aa       	std	Y+50, r10	; 0x32
  98:	aa 3e       	cpi	r26, 0xEA	; 234
  9a:	00 00       	nop
  9c:	00 00       	nop
  9e:	bf 00       	.word	0x00bf	; ????
  a0:	00 00       	nop
  a2:	80 3f       	cpi	r24, 0xF0	; 240
  a4:	00 00       	nop
  a6:	00 00       	nop
  a8:	00 08       	sbc	r0, r0
  aa:	41 78       	andi	r20, 0x81	; 129
  ac:	d3 bb       	out	0x13, r29	; 19
  ae:	43 87       	std	Z+11, r20	; 0x0b
  b0:	d1 13       	cpse	r29, r17
  b2:	3d 19       	sub	r19, r13
  b4:	0e 3c       	cpi	r16, 0xCE	; 206
  b6:	c3 bd       	out	0x23, r28	; 35
  b8:	42 82       	std	Z+2, r4	; 0x02
  ba:	ad 2b       	or	r26, r29
  bc:	3e 68       	ori	r19, 0x8E	; 142
  be:	ec 82       	std	Y+4, r14	; 0x04
  c0:	76 be       	out	0x36, r7	; 54
  c2:	d9 8f       	std	Y+25, r29	; 0x19
  c4:	e1 a9       	ldd	r30, Z+49	; 0x31
  c6:	3e 4c       	sbci	r19, 0xCE	; 206
  c8:	80 ef       	ldi	r24, 0xF0	; 240
  ca:	ff be       	out	0x3f, r15	; 63
  cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <__fixunssfsi+0x2>
  ce:	ff 7f       	andi	r31, 0xFF	; 255
  d0:	3f 00       	.word	0x003f	; ????
  d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
  d6:	11 24       	eor	r1, r1
  d8:	1f be       	out	0x3f, r1	; 63
  da:	cf e5       	ldi	r28, 0x5F	; 95
  dc:	d8 e0       	ldi	r29, 0x08	; 8
  de:	de bf       	out	0x3e, r29	; 62
  e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
  e2:	10 e0       	ldi	r17, 0x00	; 0
  e4:	a0 e6       	ldi	r26, 0x60	; 96
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	e0 e3       	ldi	r30, 0x30	; 48
  ea:	fe e0       	ldi	r31, 0x0E	; 14
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
  ee:	05 90       	lpm	r0, Z+
  f0:	0d 92       	st	X+, r0
  f2:	a4 37       	cpi	r26, 0x74	; 116
  f4:	b1 07       	cpc	r27, r17
  f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
  f8:	20 e0       	ldi	r18, 0x00	; 0
  fa:	a4 e7       	ldi	r26, 0x74	; 116
  fc:	b0 e0       	ldi	r27, 0x00	; 0
  fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
 100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
 102:	a8 39       	cpi	r26, 0x98	; 152
 104:	b2 07       	cpc	r27, r18
 106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
 108:	0e 94 b2 01 	call	0x364	; 0x364 <main>
 10c:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <_exit>

00000110 <__bad_interrupt>:
 110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <app_init>:
uint8_t clr[17] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF, 0xFF};
uint8_t opt = 0;
uint8_t chs_opt =0;

void app_init(){
	UART_init();
 114:	0e 94 5e 03 	call	0x6bc	; 0x6bc <UART_init>
	EEPROM_init();
 118:	0e 94 02 01 	call	0x204	; 0x204 <EEPROM_init>
	motor_init();
 11c:	0e 94 45 01 	call	0x28a	; 0x28a <motor_init>
	DDRA = 0xFF;
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	8a bb       	out	0x1a, r24	; 26
 124:	08 95       	ret

00000126 <reset_pass_array>:
}


void reset_pass_array()
{
	for(uint8_t i=0; i<17; i++){
 126:	20 e0       	ldi	r18, 0x00	; 0
 128:	0b c0       	rjmp	.+22     	; 0x140 <reset_pass_array+0x1a>
		pass_recieve_cmpr[i] = '\0';
 12a:	82 2f       	mov	r24, r18
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	fc 01       	movw	r30, r24
 130:	ea 58       	subi	r30, 0x8A	; 138
 132:	ff 4f       	sbci	r31, 0xFF	; 255
 134:	10 82       	st	Z, r1
		pass_recieve_save[i] = '\0';
 136:	fc 01       	movw	r30, r24
 138:	e9 57       	subi	r30, 0x79	; 121
 13a:	ff 4f       	sbci	r31, 0xFF	; 255
 13c:	10 82       	st	Z, r1
}


void reset_pass_array()
{
	for(uint8_t i=0; i<17; i++){
 13e:	2f 5f       	subi	r18, 0xFF	; 255
 140:	21 31       	cpi	r18, 0x11	; 17
 142:	98 f3       	brcs	.-26     	; 0x12a <reset_pass_array+0x4>
		pass_recieve_cmpr[i] = '\0';
		pass_recieve_save[i] = '\0';
	}
}
 144:	08 95       	ret

00000146 <compare_incoming_pass>:

void compare_incoming_pass()
{
	UART_receiveString(pass_recieve_cmpr);
 146:	86 e7       	ldi	r24, 0x76	; 118
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 75 03 	call	0x6ea	; 0x6ea <UART_receiveString>
	EEPROM_read_string(pass_recieve_save);
 14e:	87 e8       	ldi	r24, 0x87	; 135
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 23 01 	call	0x246	; 0x246 <EEPROM_read_string>
	
	
	for(uint8_t i=0; i<16; i++){
 156:	20 e0       	ldi	r18, 0x00	; 0
 158:	0e c0       	rjmp	.+28     	; 0x176 <compare_incoming_pass+0x30>
		if(pass_recieve_save[i] != pass_recieve_cmpr[i]){
 15a:	82 2f       	mov	r24, r18
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	fc 01       	movw	r30, r24
 160:	e9 57       	subi	r30, 0x79	; 121
 162:	ff 4f       	sbci	r31, 0xFF	; 255
 164:	30 81       	ld	r19, Z
 166:	fc 01       	movw	r30, r24
 168:	ea 58       	subi	r30, 0x8A	; 138
 16a:	ff 4f       	sbci	r31, 0xFF	; 255
 16c:	80 81       	ld	r24, Z
 16e:	38 13       	cpse	r19, r24
			pass_match = 0;
 170:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <pass_match>
{
	UART_receiveString(pass_recieve_cmpr);
	EEPROM_read_string(pass_recieve_save);
	
	
	for(uint8_t i=0; i<16; i++){
 174:	2f 5f       	subi	r18, 0xFF	; 255
 176:	20 31       	cpi	r18, 0x10	; 16
 178:	80 f3       	brcs	.-32     	; 0x15a <compare_incoming_pass+0x14>
		if(pass_recieve_save[i] != pass_recieve_cmpr[i]){
			pass_match = 0;
		}
	}
	UART_transmit(pass_match);
 17a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <pass_match>
 17e:	0e 94 6d 03 	call	0x6da	; 0x6da <UART_transmit>
 182:	08 95       	ret

00000184 <set_new_pass>:
}

void set_new_pass()
{
	UART_receiveString(pass_recieve_save);
 184:	87 e8       	ldi	r24, 0x87	; 135
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 75 03 	call	0x6ea	; 0x6ea <UART_receiveString>
	EEPROM_write_string(pass_recieve_save);
 18c:	87 e8       	ldi	r24, 0x87	; 135
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 05 01 	call	0x20a	; 0x20a <EEPROM_write_string>
 194:	08 95       	ret

00000196 <app_start>:


void app_start()
{
	while(1){
		pass_match = 1;
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <pass_match>
		pass_check = UART_receive();
 19c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <UART_receive>
 1a0:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <pass_check>
		
		
		if(pass_check == Password_was_entered)
 1a4:	81 30       	cpi	r24, 0x01	; 1
 1a6:	39 f5       	brne	.+78     	; 0x1f6 <app_start+0x60>
		{
			chs_opt = UART_receive();
 1a8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <UART_receive>
 1ac:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
			
			if(chs_opt == Choosed)
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	89 f7       	brne	.-30     	; 0x196 <app_start>
			{
				
				reset_pass_array();
 1b4:	0e 94 93 00 	call	0x126	; 0x126 <reset_pass_array>
				
				opt = UART_receive();
 1b8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <UART_receive>
 1bc:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <opt>
				
				compare_incoming_pass();
 1c0:	0e 94 a3 00 	call	0x146	; 0x146 <compare_incoming_pass>
				
				
				if(pass_match)
 1c4:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <pass_match>
 1c8:	88 23       	and	r24, r24
 1ca:	29 f3       	breq	.-54     	; 0x196 <app_start>
				{
					if(opt == First_option)
 1cc:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <opt>
 1d0:	81 33       	cpi	r24, 0x31	; 49
 1d2:	19 f4       	brne	.+6      	; 0x1da <app_start+0x44>
					{
						motor_response();
 1d4:	0e 94 85 01 	call	0x30a	; 0x30a <motor_response>
 1d8:	de cf       	rjmp	.-68     	; 0x196 <app_start>
					}
					else if(opt == Second_option)
 1da:	82 33       	cpi	r24, 0x32	; 50
 1dc:	e1 f6       	brne	.-72     	; 0x196 <app_start>
					{
						
						EEPROM_write_string(clr);
 1de:	80 e6       	ldi	r24, 0x60	; 96
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 05 01 	call	0x20a	; 0x20a <EEPROM_write_string>
						
						reset_pass_array();
 1e6:	0e 94 93 00 	call	0x126	; 0x126 <reset_pass_array>
						set_new_pass();
 1ea:	0e 94 c2 00 	call	0x184	; 0x184 <set_new_pass>
						UART_transmit(Matched);
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	0e 94 6d 03 	call	0x6da	; 0x6da <UART_transmit>
 1f4:	d0 cf       	rjmp	.-96     	; 0x196 <app_start>
					}
				}
			}

		}
		else if(pass_check == Password_was_not_entered)
 1f6:	8f 3f       	cpi	r24, 0xFF	; 255
 1f8:	71 f6       	brne	.-100    	; 0x196 <app_start>
		{
			set_new_pass();
 1fa:	0e 94 c2 00 	call	0x184	; 0x184 <set_new_pass>
			reset_pass_array();
 1fe:	0e 94 93 00 	call	0x126	; 0x126 <reset_pass_array>
 202:	c9 cf       	rjmp	.-110    	; 0x196 <app_start>

00000204 <EEPROM_init>:
	TWI_write_addr(0x00);
	TWI_stop();
	TWI_start(0b10100110+Read);
	TWI_read_nack(*data);
	TWI_stop();
}
 204:	0e 94 ad 02 	call	0x55a	; 0x55a <TWI_init>
 208:	08 95       	ret

0000020a <EEPROM_write_string>:

void EEPROM_write_string(uint8_t *data)
{
 20a:	0f 93       	push	r16
 20c:	1f 93       	push	r17
 20e:	cf 93       	push	r28
 210:	8c 01       	movw	r16, r24
	TWI_start(0b10100110+Write);
 212:	86 ea       	ldi	r24, 0xA6	; 166
 214:	0e 94 cd 02 	call	0x59a	; 0x59a <TWI_start>
	TWI_write_addr(0x00);
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <TWI_write_addr>
	TWI_write_addr(0x00);
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <TWI_write_addr>
	
	for(uint8_t i=0; i<16; i++){
 224:	c0 e0       	ldi	r28, 0x00	; 0
 226:	07 c0       	rjmp	.+14     	; 0x236 <EEPROM_write_string+0x2c>
		TWI_write_data(*(data+i));
 228:	f8 01       	movw	r30, r16
 22a:	ec 0f       	add	r30, r28
 22c:	f1 1d       	adc	r31, r1
 22e:	80 81       	ld	r24, Z
 230:	0e 94 ef 02 	call	0x5de	; 0x5de <TWI_write_data>
{
	TWI_start(0b10100110+Write);
	TWI_write_addr(0x00);
	TWI_write_addr(0x00);
	
	for(uint8_t i=0; i<16; i++){
 234:	cf 5f       	subi	r28, 0xFF	; 255
 236:	c0 31       	cpi	r28, 0x10	; 16
 238:	b8 f3       	brcs	.-18     	; 0x228 <EEPROM_write_string+0x1e>
		TWI_write_data(*(data+i));
	}
	
	TWI_stop();
 23a:	0e 94 0a 03 	call	0x614	; 0x614 <TWI_stop>
}
 23e:	cf 91       	pop	r28
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	08 95       	ret

00000246 <EEPROM_read_string>:

void EEPROM_read_string(uint8_t *data)
{
 246:	0f 93       	push	r16
 248:	1f 93       	push	r17
 24a:	cf 93       	push	r28
 24c:	8c 01       	movw	r16, r24
	TWI_start(0b10100110+Write);
 24e:	86 ea       	ldi	r24, 0xA6	; 166
 250:	0e 94 cd 02 	call	0x59a	; 0x59a <TWI_start>
	TWI_write_addr(0x00);
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <TWI_write_addr>
	TWI_write_addr(0x00);
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <TWI_write_addr>
	TWI_stop();
 260:	0e 94 0a 03 	call	0x614	; 0x614 <TWI_stop>
	TWI_start(0b10100110+Read);
 264:	87 ea       	ldi	r24, 0xA7	; 167
 266:	0e 94 cd 02 	call	0x59a	; 0x59a <TWI_start>
	
	for(uint8_t i=0; i<16; i++){
 26a:	c0 e0       	ldi	r28, 0x00	; 0
 26c:	06 c0       	rjmp	.+12     	; 0x27a <EEPROM_read_string+0x34>
		TWI_read_ack(data+i);
 26e:	c8 01       	movw	r24, r16
 270:	8c 0f       	add	r24, r28
 272:	91 1d       	adc	r25, r1
 274:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <TWI_read_ack>
	TWI_write_addr(0x00);
	TWI_write_addr(0x00);
	TWI_stop();
	TWI_start(0b10100110+Read);
	
	for(uint8_t i=0; i<16; i++){
 278:	cf 5f       	subi	r28, 0xFF	; 255
 27a:	c0 31       	cpi	r28, 0x10	; 16
 27c:	c0 f3       	brcs	.-16     	; 0x26e <EEPROM_read_string+0x28>
		TWI_read_ack(data+i);
	}
	
	TWI_stop();
 27e:	0e 94 0a 03 	call	0x614	; 0x614 <TWI_stop>
}
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	0f 91       	pop	r16
 288:	08 95       	ret

0000028a <motor_init>:
 */ 
#include "motor.h"

void motor_init()
{
	DIO_init(port_B,PIN_5,OUT);
 28a:	41 e0       	ldi	r20, 0x01	; 1
 28c:	65 e0       	ldi	r22, 0x05	; 5
 28e:	82 e4       	ldi	r24, 0x42	; 66
 290:	0e 94 b9 01 	call	0x372	; 0x372 <DIO_init>
	DIO_init(port_B,PIN_6,OUT);
 294:	41 e0       	ldi	r20, 0x01	; 1
 296:	66 e0       	ldi	r22, 0x06	; 6
 298:	82 e4       	ldi	r24, 0x42	; 66
 29a:	0e 94 b9 01 	call	0x372	; 0x372 <DIO_init>
	DIO_init(port_B,PIN_7,OUT);
 29e:	41 e0       	ldi	r20, 0x01	; 1
 2a0:	67 e0       	ldi	r22, 0x07	; 7
 2a2:	82 e4       	ldi	r24, 0x42	; 66
 2a4:	0e 94 b9 01 	call	0x372	; 0x372 <DIO_init>
 2a8:	08 95       	ret

000002aa <motor_turn_cw>:
}

void motor_turn_cw()
{
	DIO_write(port_B,PIN_5,HIGH);
 2aa:	41 e0       	ldi	r20, 0x01	; 1
 2ac:	65 e0       	ldi	r22, 0x05	; 5
 2ae:	82 e4       	ldi	r24, 0x42	; 66
 2b0:	0e 94 33 02 	call	0x466	; 0x466 <DIO_write>
	DIO_write(port_B,PIN_6,HIGH);
 2b4:	41 e0       	ldi	r20, 0x01	; 1
 2b6:	66 e0       	ldi	r22, 0x06	; 6
 2b8:	82 e4       	ldi	r24, 0x42	; 66
 2ba:	0e 94 33 02 	call	0x466	; 0x466 <DIO_write>
	DIO_write(port_B,PIN_7,LOW);
 2be:	40 e0       	ldi	r20, 0x00	; 0
 2c0:	67 e0       	ldi	r22, 0x07	; 7
 2c2:	82 e4       	ldi	r24, 0x42	; 66
 2c4:	0e 94 33 02 	call	0x466	; 0x466 <DIO_write>
 2c8:	08 95       	ret

000002ca <motor_turn_anti_cw>:
}

void motor_turn_anti_cw()
{
	DIO_write(port_B,PIN_5,HIGH);
 2ca:	41 e0       	ldi	r20, 0x01	; 1
 2cc:	65 e0       	ldi	r22, 0x05	; 5
 2ce:	82 e4       	ldi	r24, 0x42	; 66
 2d0:	0e 94 33 02 	call	0x466	; 0x466 <DIO_write>
	DIO_write(port_B,PIN_6,LOW);
 2d4:	40 e0       	ldi	r20, 0x00	; 0
 2d6:	66 e0       	ldi	r22, 0x06	; 6
 2d8:	82 e4       	ldi	r24, 0x42	; 66
 2da:	0e 94 33 02 	call	0x466	; 0x466 <DIO_write>
	DIO_write(port_B,PIN_7,HIGH);
 2de:	41 e0       	ldi	r20, 0x01	; 1
 2e0:	67 e0       	ldi	r22, 0x07	; 7
 2e2:	82 e4       	ldi	r24, 0x42	; 66
 2e4:	0e 94 33 02 	call	0x466	; 0x466 <DIO_write>
 2e8:	08 95       	ret

000002ea <motor_brake>:
}

void motor_brake()
{
	DIO_write(port_B,PIN_5,HIGH);
 2ea:	41 e0       	ldi	r20, 0x01	; 1
 2ec:	65 e0       	ldi	r22, 0x05	; 5
 2ee:	82 e4       	ldi	r24, 0x42	; 66
 2f0:	0e 94 33 02 	call	0x466	; 0x466 <DIO_write>
	DIO_write(port_B,PIN_6,HIGH);
 2f4:	41 e0       	ldi	r20, 0x01	; 1
 2f6:	66 e0       	ldi	r22, 0x06	; 6
 2f8:	82 e4       	ldi	r24, 0x42	; 66
 2fa:	0e 94 33 02 	call	0x466	; 0x466 <DIO_write>
	DIO_write(port_B,PIN_7,HIGH);
 2fe:	41 e0       	ldi	r20, 0x01	; 1
 300:	67 e0       	ldi	r22, 0x07	; 7
 302:	82 e4       	ldi	r24, 0x42	; 66
 304:	0e 94 33 02 	call	0x466	; 0x466 <DIO_write>
 308:	08 95       	ret

0000030a <motor_response>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 30a:	2f e3       	ldi	r18, 0x3F	; 63
 30c:	8d e0       	ldi	r24, 0x0D	; 13
 30e:	93 e0       	ldi	r25, 0x03	; 3
 310:	21 50       	subi	r18, 0x01	; 1
 312:	80 40       	sbci	r24, 0x00	; 0
 314:	90 40       	sbci	r25, 0x00	; 0
 316:	e1 f7       	brne	.-8      	; 0x310 <motor_response+0x6>
 318:	00 c0       	rjmp	.+0      	; 0x31a <motor_response+0x10>
 31a:	00 00       	nop
}

void motor_response()
{
	_delay_ms(1000);
	motor_turn_cw();
 31c:	0e 94 55 01 	call	0x2aa	; 0x2aa <motor_turn_cw>
 320:	2f ed       	ldi	r18, 0xDF	; 223
 322:	83 e9       	ldi	r24, 0x93	; 147
 324:	94 e0       	ldi	r25, 0x04	; 4
 326:	21 50       	subi	r18, 0x01	; 1
 328:	80 40       	sbci	r24, 0x00	; 0
 32a:	90 40       	sbci	r25, 0x00	; 0
 32c:	e1 f7       	brne	.-8      	; 0x326 <motor_response+0x1c>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <motor_response+0x26>
 330:	00 00       	nop
	_delay_ms(1500);
	motor_brake();
 332:	0e 94 75 01 	call	0x2ea	; 0x2ea <motor_brake>
 336:	2f ed       	ldi	r18, 0xDF	; 223
 338:	83 e9       	ldi	r24, 0x93	; 147
 33a:	94 e0       	ldi	r25, 0x04	; 4
 33c:	21 50       	subi	r18, 0x01	; 1
 33e:	80 40       	sbci	r24, 0x00	; 0
 340:	90 40       	sbci	r25, 0x00	; 0
 342:	e1 f7       	brne	.-8      	; 0x33c <motor_response+0x32>
 344:	00 c0       	rjmp	.+0      	; 0x346 <motor_response+0x3c>
 346:	00 00       	nop
	_delay_ms(1500);
	motor_turn_anti_cw();
 348:	0e 94 65 01 	call	0x2ca	; 0x2ca <motor_turn_anti_cw>
 34c:	2f e7       	ldi	r18, 0x7F	; 127
 34e:	8a e1       	ldi	r24, 0x1A	; 26
 350:	96 e0       	ldi	r25, 0x06	; 6
 352:	21 50       	subi	r18, 0x01	; 1
 354:	80 40       	sbci	r24, 0x00	; 0
 356:	90 40       	sbci	r25, 0x00	; 0
 358:	e1 f7       	brne	.-8      	; 0x352 <motor_response+0x48>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <motor_response+0x52>
 35c:	00 00       	nop
	_delay_ms(2000);
	motor_brake();
 35e:	0e 94 75 01 	call	0x2ea	; 0x2ea <motor_brake>
 362:	08 95       	ret

00000364 <main>:



int main(void)
{
	app_init();
 364:	0e 94 8a 00 	call	0x114	; 0x114 <app_init>
	app_start();
 368:	0e 94 cb 00 	call	0x196	; 0x196 <app_start>
}
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	08 95       	ret

00000372 <DIO_init>:

#include "DIO_2.h"

void DIO_init(uint8_t portnum,uint8_t pinnum, uint8_t direction)
{
	switch(portnum)
 372:	82 34       	cpi	r24, 0x42	; 66
 374:	31 f1       	breq	.+76     	; 0x3c2 <DIO_init+0x50>
 376:	18 f4       	brcc	.+6      	; 0x37e <DIO_init+0xc>
 378:	81 34       	cpi	r24, 0x41	; 65
 37a:	39 f0       	breq	.+14     	; 0x38a <DIO_init+0x18>
 37c:	08 95       	ret
 37e:	83 34       	cpi	r24, 0x43	; 67
 380:	e1 f1       	breq	.+120    	; 0x3fa <DIO_init+0x88>
 382:	84 34       	cpi	r24, 0x44	; 68
 384:	09 f4       	brne	.+2      	; 0x388 <DIO_init+0x16>
 386:	54 c0       	rjmp	.+168    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 388:	08 95       	ret
	{
		case port_A:
			if(direction == IN)
 38a:	41 11       	cpse	r20, r1
 38c:	0c c0       	rjmp	.+24     	; 0x3a6 <DIO_init+0x34>
				clr_pin(DDRA,pinnum); // Make pin number (pinnum) in port A an input pin
 38e:	2a b3       	in	r18, 0x1a	; 26
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	02 c0       	rjmp	.+4      	; 0x39a <DIO_init+0x28>
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	6a 95       	dec	r22
 39c:	e2 f7       	brpl	.-8      	; 0x396 <DIO_init+0x24>
 39e:	80 95       	com	r24
 3a0:	82 23       	and	r24, r18
 3a2:	8a bb       	out	0x1a, r24	; 26
 3a4:	08 95       	ret
			
			else if(direction == OUT)
 3a6:	41 30       	cpi	r20, 0x01	; 1
 3a8:	09 f0       	breq	.+2      	; 0x3ac <DIO_init+0x3a>
 3aa:	5c c0       	rjmp	.+184    	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
				set_pin(DDRA,pinnum);	// Make pin number (pinnum) in port A an output pin
 3ac:	2a b3       	in	r18, 0x1a	; 26
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <DIO_init+0x46>
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	6a 95       	dec	r22
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <DIO_init+0x42>
 3bc:	82 2b       	or	r24, r18
 3be:	8a bb       	out	0x1a, r24	; 26
 3c0:	08 95       	ret
				//Error Handling
			}
		break;
		
		case port_B:
			if(direction == IN)
 3c2:	41 11       	cpse	r20, r1
 3c4:	0c c0       	rjmp	.+24     	; 0x3de <DIO_init+0x6c>
				clr_pin(DDRB,pinnum); // Make pin number (pinnum) in port B an input pin
 3c6:	27 b3       	in	r18, 0x17	; 23
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <DIO_init+0x60>
 3ce:	88 0f       	add	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	6a 95       	dec	r22
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <DIO_init+0x5c>
 3d6:	80 95       	com	r24
 3d8:	82 23       	and	r24, r18
 3da:	87 bb       	out	0x17, r24	; 23
 3dc:	08 95       	ret
			
			else if(direction == OUT)
 3de:	41 30       	cpi	r20, 0x01	; 1
 3e0:	09 f0       	breq	.+2      	; 0x3e4 <DIO_init+0x72>
 3e2:	40 c0       	rjmp	.+128    	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
				set_pin(DDRB,pinnum);	// Make pin number (pinnum) in port B an output pin
 3e4:	27 b3       	in	r18, 0x17	; 23
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <DIO_init+0x7e>
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	6a 95       	dec	r22
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <DIO_init+0x7a>
 3f4:	82 2b       	or	r24, r18
 3f6:	87 bb       	out	0x17, r24	; 23
 3f8:	08 95       	ret
				//Error Handling
			}
		break;
		
		case port_C:
			if(direction == IN)
 3fa:	41 11       	cpse	r20, r1
 3fc:	0c c0       	rjmp	.+24     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
				clr_pin(DDRC,pinnum); // Make pin number (pinnum) in port C an input pin
 3fe:	24 b3       	in	r18, 0x14	; 20
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	02 c0       	rjmp	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	6a 95       	dec	r22
 40c:	e2 f7       	brpl	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40e:	80 95       	com	r24
 410:	82 23       	and	r24, r18
 412:	84 bb       	out	0x14, r24	; 20
 414:	08 95       	ret
		
			else if(direction == OUT)
 416:	41 30       	cpi	r20, 0x01	; 1
 418:	29 f5       	brne	.+74     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
				set_pin(DDRC,pinnum);	// Make pin number (pinnum) in port C an output pin
 41a:	24 b3       	in	r18, 0x14	; 20
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	02 c0       	rjmp	.+4      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	6a 95       	dec	r22
 428:	e2 f7       	brpl	.-8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 42a:	82 2b       	or	r24, r18
 42c:	84 bb       	out	0x14, r24	; 20
 42e:	08 95       	ret
				//Error Handling
			}
		break;
		
		case port_D:
			if(direction == IN)
 430:	41 11       	cpse	r20, r1
 432:	0c c0       	rjmp	.+24     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
				clr_pin(DDRD,pinnum); // Make pin number (pinnum) in port D an input pin
 434:	21 b3       	in	r18, 0x11	; 17
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	02 c0       	rjmp	.+4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	6a 95       	dec	r22
 442:	e2 f7       	brpl	.-8      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 444:	80 95       	com	r24
 446:	82 23       	and	r24, r18
 448:	81 bb       	out	0x11, r24	; 17
 44a:	08 95       	ret
		
			else if(direction == OUT)
 44c:	41 30       	cpi	r20, 0x01	; 1
 44e:	51 f4       	brne	.+20     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
				set_pin(DDRD,pinnum);	// Make pin number (pinnum) in port D an input pin
 450:	21 b3       	in	r18, 0x11	; 17
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	02 c0       	rjmp	.+4      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 458:	88 0f       	add	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	6a 95       	dec	r22
 45e:	e2 f7       	brpl	.-8      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 460:	82 2b       	or	r24, r18
 462:	81 bb       	out	0x11, r24	; 17
 464:	08 95       	ret

00000466 <DIO_write>:
	}
}

void DIO_write(uint8_t portnum,uint8_t pinnum, uint8_t value)
{
	switch(portnum)
 466:	82 34       	cpi	r24, 0x42	; 66
 468:	31 f1       	breq	.+76     	; 0x4b6 <DIO_write+0x50>
 46a:	18 f4       	brcc	.+6      	; 0x472 <DIO_write+0xc>
 46c:	81 34       	cpi	r24, 0x41	; 65
 46e:	39 f0       	breq	.+14     	; 0x47e <DIO_write+0x18>
 470:	08 95       	ret
 472:	83 34       	cpi	r24, 0x43	; 67
 474:	e1 f1       	breq	.+120    	; 0x4ee <DIO_write+0x88>
 476:	84 34       	cpi	r24, 0x44	; 68
 478:	09 f4       	brne	.+2      	; 0x47c <DIO_write+0x16>
 47a:	54 c0       	rjmp	.+168    	; 0x524 <DIO_write+0xbe>
 47c:	08 95       	ret
	{
		case port_A:
			if(value == LOW)
 47e:	41 11       	cpse	r20, r1
 480:	0c c0       	rjmp	.+24     	; 0x49a <DIO_write+0x34>
				clr_pin(PORTA,pinnum); // make pin number (pinnum) in port A has a value of 0
 482:	2b b3       	in	r18, 0x1b	; 27
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	02 c0       	rjmp	.+4      	; 0x48e <DIO_write+0x28>
 48a:	88 0f       	add	r24, r24
 48c:	99 1f       	adc	r25, r25
 48e:	6a 95       	dec	r22
 490:	e2 f7       	brpl	.-8      	; 0x48a <DIO_write+0x24>
 492:	80 95       	com	r24
 494:	82 23       	and	r24, r18
 496:	8b bb       	out	0x1b, r24	; 27
 498:	08 95       	ret
			
			else if(value == HIGH)
 49a:	41 30       	cpi	r20, 0x01	; 1
 49c:	09 f0       	breq	.+2      	; 0x4a0 <DIO_write+0x3a>
 49e:	5c c0       	rjmp	.+184    	; 0x558 <DIO_write+0xf2>
				set_pin(PORTA,pinnum); // make pin number (pinnum) in port A has a value of 1
 4a0:	2b b3       	in	r18, 0x1b	; 27
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <DIO_write+0x46>
 4a8:	88 0f       	add	r24, r24
 4aa:	99 1f       	adc	r25, r25
 4ac:	6a 95       	dec	r22
 4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <DIO_write+0x42>
 4b0:	82 2b       	or	r24, r18
 4b2:	8b bb       	out	0x1b, r24	; 27
 4b4:	08 95       	ret
				//Error Handling
			}
		break;
		
		case port_B:
			if(value == LOW)
 4b6:	41 11       	cpse	r20, r1
 4b8:	0c c0       	rjmp	.+24     	; 0x4d2 <DIO_write+0x6c>
				clr_pin(PORTB,pinnum); // make pin number (pinnum) in port B has a value of 0
 4ba:	28 b3       	in	r18, 0x18	; 24
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <DIO_write+0x60>
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	6a 95       	dec	r22
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <DIO_write+0x5c>
 4ca:	80 95       	com	r24
 4cc:	82 23       	and	r24, r18
 4ce:	88 bb       	out	0x18, r24	; 24
 4d0:	08 95       	ret
		
			else if(value == HIGH)
 4d2:	41 30       	cpi	r20, 0x01	; 1
 4d4:	09 f0       	breq	.+2      	; 0x4d8 <DIO_write+0x72>
 4d6:	40 c0       	rjmp	.+128    	; 0x558 <DIO_write+0xf2>
				set_pin(PORTB,pinnum); // make pin number (pinnum) in port B has a value of 1
 4d8:	28 b3       	in	r18, 0x18	; 24
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <DIO_write+0x7e>
 4e0:	88 0f       	add	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	6a 95       	dec	r22
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <DIO_write+0x7a>
 4e8:	82 2b       	or	r24, r18
 4ea:	88 bb       	out	0x18, r24	; 24
 4ec:	08 95       	ret
				//Error Handling
			}
		break;
		
		case port_C:
			if(value == LOW)
 4ee:	41 11       	cpse	r20, r1
 4f0:	0c c0       	rjmp	.+24     	; 0x50a <DIO_write+0xa4>
				clr_pin(PORTC,pinnum); // make pin number (pinnum) in port C has a value of 0
 4f2:	25 b3       	in	r18, 0x15	; 21
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <DIO_write+0x98>
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	6a 95       	dec	r22
 500:	e2 f7       	brpl	.-8      	; 0x4fa <DIO_write+0x94>
 502:	80 95       	com	r24
 504:	82 23       	and	r24, r18
 506:	85 bb       	out	0x15, r24	; 21
 508:	08 95       	ret
		
			else if(value == HIGH)
 50a:	41 30       	cpi	r20, 0x01	; 1
 50c:	29 f5       	brne	.+74     	; 0x558 <DIO_write+0xf2>
				set_pin(PORTC,pinnum); // make pin number (pinnum) in port C has a value of 1
 50e:	25 b3       	in	r18, 0x15	; 21
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	02 c0       	rjmp	.+4      	; 0x51a <DIO_write+0xb4>
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	6a 95       	dec	r22
 51c:	e2 f7       	brpl	.-8      	; 0x516 <DIO_write+0xb0>
 51e:	82 2b       	or	r24, r18
 520:	85 bb       	out	0x15, r24	; 21
 522:	08 95       	ret
				//Error Handling
			}
		break;
		
		case port_D:
			if(value == LOW)
 524:	41 11       	cpse	r20, r1
 526:	0c c0       	rjmp	.+24     	; 0x540 <DIO_write+0xda>
				clr_pin(PORTD,pinnum); // make pin number (pinnum) in port D has a value of 0
 528:	22 b3       	in	r18, 0x12	; 18
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	02 c0       	rjmp	.+4      	; 0x534 <DIO_write+0xce>
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	6a 95       	dec	r22
 536:	e2 f7       	brpl	.-8      	; 0x530 <DIO_write+0xca>
 538:	80 95       	com	r24
 53a:	82 23       	and	r24, r18
 53c:	82 bb       	out	0x12, r24	; 18
 53e:	08 95       	ret
		
			else if(value == HIGH)
 540:	41 30       	cpi	r20, 0x01	; 1
 542:	51 f4       	brne	.+20     	; 0x558 <DIO_write+0xf2>
				set_pin(PORTD,pinnum); // make pin number (pinnum) in port D has a value of 1
 544:	22 b3       	in	r18, 0x12	; 18
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	02 c0       	rjmp	.+4      	; 0x550 <DIO_write+0xea>
 54c:	88 0f       	add	r24, r24
 54e:	99 1f       	adc	r25, r25
 550:	6a 95       	dec	r22
 552:	e2 f7       	brpl	.-8      	; 0x54c <DIO_write+0xe6>
 554:	82 2b       	or	r24, r18
 556:	82 bb       	out	0x12, r24	; 18
 558:	08 95       	ret

0000055a <TWI_init>:
	set_pin(TWCR,TWINT);
	set_pin(TWCR,TWEN);
	
	while (!( TWCR & (1 << TWINT) )); // Wait for TWINT Flag set
	
	*data = TWDR;
 55a:	11 b8       	out	0x01, r1	; 1
 55c:	61 b1       	in	r22, 0x01	; 1
 55e:	63 70       	andi	r22, 0x03	; 3
 560:	70 e0       	ldi	r23, 0x00	; 0
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	0e 94 98 04 	call	0x930	; 0x930 <__floatsisf>
 56a:	9b 01       	movw	r18, r22
 56c:	ac 01       	movw	r20, r24
 56e:	60 e0       	ldi	r22, 0x00	; 0
 570:	70 e0       	ldi	r23, 0x00	; 0
 572:	80 e8       	ldi	r24, 0x80	; 128
 574:	90 e4       	ldi	r25, 0x40	; 64
 576:	0e 94 24 05 	call	0xa48	; 0xa48 <pow>
 57a:	9b 01       	movw	r18, r22
 57c:	ac 01       	movw	r20, r24
 57e:	0e 94 89 03 	call	0x712	; 0x712 <__addsf3>
 582:	9b 01       	movw	r18, r22
 584:	ac 01       	movw	r20, r24
 586:	60 e0       	ldi	r22, 0x00	; 0
 588:	70 e0       	ldi	r23, 0x00	; 0
 58a:	80 e8       	ldi	r24, 0x80	; 128
 58c:	9f e4       	ldi	r25, 0x4F	; 79
 58e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__divsf3>
 592:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fixunssfsi>
 596:	60 b9       	out	0x00, r22	; 0
 598:	08 95       	ret

0000059a <TWI_start>:
 59a:	96 b7       	in	r25, 0x36	; 54
 59c:	90 68       	ori	r25, 0x80	; 128
 59e:	96 bf       	out	0x36, r25	; 54
 5a0:	96 b7       	in	r25, 0x36	; 54
 5a2:	90 62       	ori	r25, 0x20	; 32
 5a4:	96 bf       	out	0x36, r25	; 54
 5a6:	96 b7       	in	r25, 0x36	; 54
 5a8:	94 60       	ori	r25, 0x04	; 4
 5aa:	96 bf       	out	0x36, r25	; 54
 5ac:	06 b6       	in	r0, 0x36	; 54
 5ae:	07 fe       	sbrs	r0, 7
 5b0:	fd cf       	rjmp	.-6      	; 0x5ac <TWI_start+0x12>
 5b2:	83 b9       	out	0x03, r24	; 3
 5b4:	86 b7       	in	r24, 0x36	; 54
 5b6:	80 68       	ori	r24, 0x80	; 128
 5b8:	86 bf       	out	0x36, r24	; 54
 5ba:	86 b7       	in	r24, 0x36	; 54
 5bc:	84 60       	ori	r24, 0x04	; 4
 5be:	86 bf       	out	0x36, r24	; 54
 5c0:	06 b6       	in	r0, 0x36	; 54
 5c2:	07 fe       	sbrs	r0, 7
 5c4:	fd cf       	rjmp	.-6      	; 0x5c0 <TWI_start+0x26>
 5c6:	08 95       	ret

000005c8 <TWI_write_addr>:
 5c8:	83 b9       	out	0x03, r24	; 3
 5ca:	86 b7       	in	r24, 0x36	; 54
 5cc:	80 68       	ori	r24, 0x80	; 128
 5ce:	86 bf       	out	0x36, r24	; 54
 5d0:	86 b7       	in	r24, 0x36	; 54
 5d2:	84 60       	ori	r24, 0x04	; 4
 5d4:	86 bf       	out	0x36, r24	; 54
 5d6:	06 b6       	in	r0, 0x36	; 54
 5d8:	07 fe       	sbrs	r0, 7
 5da:	fd cf       	rjmp	.-6      	; 0x5d6 <TWI_write_addr+0xe>
 5dc:	08 95       	ret

000005de <TWI_write_data>:
 5de:	83 b9       	out	0x03, r24	; 3
 5e0:	86 b7       	in	r24, 0x36	; 54
 5e2:	80 68       	ori	r24, 0x80	; 128
 5e4:	86 bf       	out	0x36, r24	; 54
 5e6:	86 b7       	in	r24, 0x36	; 54
 5e8:	84 60       	ori	r24, 0x04	; 4
 5ea:	86 bf       	out	0x36, r24	; 54
 5ec:	06 b6       	in	r0, 0x36	; 54
 5ee:	07 fe       	sbrs	r0, 7
 5f0:	fd cf       	rjmp	.-6      	; 0x5ec <TWI_write_data+0xe>
 5f2:	08 95       	ret

000005f4 <TWI_read_ack>:
 5f4:	fc 01       	movw	r30, r24
 5f6:	96 b7       	in	r25, 0x36	; 54
 5f8:	90 68       	ori	r25, 0x80	; 128
 5fa:	96 bf       	out	0x36, r25	; 54
 5fc:	96 b7       	in	r25, 0x36	; 54
 5fe:	94 60       	ori	r25, 0x04	; 4
 600:	96 bf       	out	0x36, r25	; 54
 602:	96 b7       	in	r25, 0x36	; 54
 604:	90 64       	ori	r25, 0x40	; 64
 606:	96 bf       	out	0x36, r25	; 54
 608:	06 b6       	in	r0, 0x36	; 54
 60a:	07 fe       	sbrs	r0, 7
 60c:	fd cf       	rjmp	.-6      	; 0x608 <TWI_read_ack+0x14>
 60e:	83 b1       	in	r24, 0x03	; 3
 610:	80 83       	st	Z, r24
 612:	08 95       	ret

00000614 <TWI_stop>:
}


void TWI_stop()
{
	TWCR = (1 << TWSTO) | (1 << TWINT) | (1 << TWEN);// Enable TWI, generate stop
 614:	84 e9       	ldi	r24, 0x94	; 148
 616:	86 bf       	out	0x36, r24	; 54
	while( TWCR & (1 << TWSTO) );	// Wait until stop condition execution 
 618:	06 b6       	in	r0, 0x36	; 54
 61a:	04 fc       	sbrc	r0, 4
 61c:	fd cf       	rjmp	.-6      	; 0x618 <TWI_stop+0x4>
}
 61e:	08 95       	ret

00000620 <UART_set_BAUD>:
	UART_set_frame(Data_bits,Stop_bits);
}

void UART_set_BAUD(uint16_t baud)
{
	UBRRH = (uint8_t)(baud >> 8); // Higher nibble
 620:	90 bd       	out	0x20, r25	; 32
	UBRRL = (uint8_t)baud; // lower nibble
 622:	89 b9       	out	0x09, r24	; 9
 624:	08 95       	ret

00000626 <UART_set_frame>:
}

void UART_set_frame(uint8_t bitnum, uint8_t stopbits)
{
	switch(bitnum)
 626:	87 30       	cpi	r24, 0x07	; 7
 628:	f9 f0       	breq	.+62     	; 0x668 <UART_set_frame+0x42>
 62a:	28 f4       	brcc	.+10     	; 0x636 <UART_set_frame+0x10>
 62c:	85 30       	cpi	r24, 0x05	; 5
 62e:	41 f0       	breq	.+16     	; 0x640 <UART_set_frame+0x1a>
 630:	86 30       	cpi	r24, 0x06	; 6
 632:	81 f0       	breq	.+32     	; 0x654 <UART_set_frame+0x2e>
 634:	36 c0       	rjmp	.+108    	; 0x6a2 <UART_set_frame+0x7c>
 636:	88 30       	cpi	r24, 0x08	; 8
 638:	09 f1       	breq	.+66     	; 0x67c <UART_set_frame+0x56>
 63a:	89 30       	cpi	r24, 0x09	; 9
 63c:	49 f1       	breq	.+82     	; 0x690 <UART_set_frame+0x6a>
 63e:	31 c0       	rjmp	.+98     	; 0x6a2 <UART_set_frame+0x7c>
	{
		// 5 bits character size
		case 5:
		clr_pin(UCSRC,UCSZ0);
 640:	80 b5       	in	r24, 0x20	; 32
 642:	8d 7f       	andi	r24, 0xFD	; 253
 644:	80 bd       	out	0x20, r24	; 32
		clr_pin(UCSRC,UCSZ1);
 646:	80 b5       	in	r24, 0x20	; 32
 648:	8b 7f       	andi	r24, 0xFB	; 251
 64a:	80 bd       	out	0x20, r24	; 32
		clr_pin(UCSRB,UCSZ2);
 64c:	8a b1       	in	r24, 0x0a	; 10
 64e:	8b 7f       	andi	r24, 0xFB	; 251
 650:	8a b9       	out	0x0a, r24	; 10
		break;
 652:	27 c0       	rjmp	.+78     	; 0x6a2 <UART_set_frame+0x7c>
		// 6 bits character size
		case 6:
		set_pin(UCSRC,UCSZ0);
 654:	80 b5       	in	r24, 0x20	; 32
 656:	82 60       	ori	r24, 0x02	; 2
 658:	80 bd       	out	0x20, r24	; 32
		clr_pin(UCSRC,UCSZ1);
 65a:	80 b5       	in	r24, 0x20	; 32
 65c:	8b 7f       	andi	r24, 0xFB	; 251
 65e:	80 bd       	out	0x20, r24	; 32
		clr_pin(UCSRB,UCSZ2);
 660:	8a b1       	in	r24, 0x0a	; 10
 662:	8b 7f       	andi	r24, 0xFB	; 251
 664:	8a b9       	out	0x0a, r24	; 10
		break;
 666:	1d c0       	rjmp	.+58     	; 0x6a2 <UART_set_frame+0x7c>
		// 7 bits character size
		case 7:
		clr_pin(UCSRC,UCSZ0);
 668:	80 b5       	in	r24, 0x20	; 32
 66a:	8d 7f       	andi	r24, 0xFD	; 253
 66c:	80 bd       	out	0x20, r24	; 32
		set_pin(UCSRC,UCSZ1);
 66e:	80 b5       	in	r24, 0x20	; 32
 670:	84 60       	ori	r24, 0x04	; 4
 672:	80 bd       	out	0x20, r24	; 32
		clr_pin(UCSRB,UCSZ2);
 674:	8a b1       	in	r24, 0x0a	; 10
 676:	8b 7f       	andi	r24, 0xFB	; 251
 678:	8a b9       	out	0x0a, r24	; 10
		break;
 67a:	13 c0       	rjmp	.+38     	; 0x6a2 <UART_set_frame+0x7c>
		// 8 bits character size
		case 8:
		set_pin(UCSRC,UCSZ0);
 67c:	80 b5       	in	r24, 0x20	; 32
 67e:	82 60       	ori	r24, 0x02	; 2
 680:	80 bd       	out	0x20, r24	; 32
		set_pin(UCSRC,UCSZ1);
 682:	80 b5       	in	r24, 0x20	; 32
 684:	84 60       	ori	r24, 0x04	; 4
 686:	80 bd       	out	0x20, r24	; 32
		clr_pin(UCSRB,UCSZ2);
 688:	8a b1       	in	r24, 0x0a	; 10
 68a:	8b 7f       	andi	r24, 0xFB	; 251
 68c:	8a b9       	out	0x0a, r24	; 10
		break;
 68e:	09 c0       	rjmp	.+18     	; 0x6a2 <UART_set_frame+0x7c>
		// 9 bits character size
		case 9:
		set_pin(UCSRC,UCSZ0);
 690:	80 b5       	in	r24, 0x20	; 32
 692:	82 60       	ori	r24, 0x02	; 2
 694:	80 bd       	out	0x20, r24	; 32
		set_pin(UCSRC,UCSZ1);
 696:	80 b5       	in	r24, 0x20	; 32
 698:	84 60       	ori	r24, 0x04	; 4
 69a:	80 bd       	out	0x20, r24	; 32
		set_pin(UCSRB,UCSZ2);
 69c:	8a b1       	in	r24, 0x0a	; 10
 69e:	84 60       	ori	r24, 0x04	; 4
 6a0:	8a b9       	out	0x0a, r24	; 10
		default:
		{
			// error handling
		}
	}
	switch(stopbits)
 6a2:	61 30       	cpi	r22, 0x01	; 1
 6a4:	19 f0       	breq	.+6      	; 0x6ac <UART_set_frame+0x86>
 6a6:	62 30       	cpi	r22, 0x02	; 2
 6a8:	29 f0       	breq	.+10     	; 0x6b4 <UART_set_frame+0x8e>
 6aa:	08 95       	ret
	{
		// 1 stop bit
		case 1:
		clr_pin(UCSRC,USBS);
 6ac:	80 b5       	in	r24, 0x20	; 32
 6ae:	87 7f       	andi	r24, 0xF7	; 247
 6b0:	80 bd       	out	0x20, r24	; 32
		break;
 6b2:	08 95       	ret
		// 2 stop bit
		case 2:
		set_pin(UCSRC,USBS);
 6b4:	80 b5       	in	r24, 0x20	; 32
 6b6:	88 60       	ori	r24, 0x08	; 8
 6b8:	80 bd       	out	0x20, r24	; 32
 6ba:	08 95       	ret

000006bc <UART_init>:
#include "UART_2.h"

void UART_init()
{
	// Set baud rate
	UART_set_BAUD(BAUD_rate);
 6bc:	83 e3       	ldi	r24, 0x33	; 51
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	0e 94 10 03 	call	0x620	; 0x620 <UART_set_BAUD>
	
	// Enable receiver and transmitter
	set_pin(UCSRB,RXEN);
 6c4:	8a b1       	in	r24, 0x0a	; 10
 6c6:	80 61       	ori	r24, 0x10	; 16
 6c8:	8a b9       	out	0x0a, r24	; 10
	set_pin(UCSRB,TXEN);
 6ca:	8a b1       	in	r24, 0x0a	; 10
 6cc:	88 60       	ori	r24, 0x08	; 8
 6ce:	8a b9       	out	0x0a, r24	; 10
	
	// Set frame format
	UART_set_frame(Data_bits,Stop_bits);
 6d0:	61 e0       	ldi	r22, 0x01	; 1
 6d2:	88 e0       	ldi	r24, 0x08	; 8
 6d4:	0e 94 13 03 	call	0x626	; 0x626 <UART_set_frame>
 6d8:	08 95       	ret

000006da <UART_transmit>:
}

void UART_transmit(uint8_t data)
{
	// Wait for empty transmit buffer
	while ( !( UCSRA & (1 << UDRE)) );
 6da:	5d 9b       	sbis	0x0b, 5	; 11
 6dc:	fe cf       	rjmp	.-4      	; 0x6da <UART_transmit>
	
	// Put data into buffer, sends the data
	UDR = data;
 6de:	8c b9       	out	0x0c, r24	; 12
 6e0:	08 95       	ret

000006e2 <UART_receive>:
}

uint8_t UART_receive()
{
	/* Wait for data to be received */
	while ( !( UCSRA & (1 << RXC)) );
 6e2:	5f 9b       	sbis	0x0b, 7	; 11
 6e4:	fe cf       	rjmp	.-4      	; 0x6e2 <UART_receive>
	
	/* Get and return received data from buffer */
	return UDR;
 6e6:	8c b1       	in	r24, 0x0c	; 12
}
 6e8:	08 95       	ret

000006ea <UART_receiveString>:

void UART_receiveString(uint8_t *string)
{
 6ea:	0f 93       	push	r16
 6ec:	1f 93       	push	r17
 6ee:	cf 93       	push	r28
 6f0:	8c 01       	movw	r16, r24
	for(uint8_t cnt=0; ; cnt++)
 6f2:	c0 e0       	ldi	r28, 0x00	; 0
	{
		*(string + cnt) = UART_receive();
 6f4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <UART_receive>
 6f8:	f8 01       	movw	r30, r16
 6fa:	ec 0f       	add	r30, r28
 6fc:	f1 1d       	adc	r31, r1
 6fe:	80 83       	st	Z, r24
		if(*(string + cnt) == '\0')
 700:	88 23       	and	r24, r24
 702:	11 f0       	breq	.+4      	; 0x708 <UART_receiveString+0x1e>
	return UDR;
}

void UART_receiveString(uint8_t *string)
{
	for(uint8_t cnt=0; ; cnt++)
 704:	cf 5f       	subi	r28, 0xFF	; 255
	{
		*(string + cnt) = UART_receive();
		if(*(string + cnt) == '\0')
			break;
	}
 706:	f6 cf       	rjmp	.-20     	; 0x6f4 <UART_receiveString+0xa>
 708:	cf 91       	pop	r28
 70a:	1f 91       	pop	r17
 70c:	0f 91       	pop	r16
 70e:	08 95       	ret

00000710 <__subsf3>:
 710:	50 58       	subi	r21, 0x80	; 128

00000712 <__addsf3>:
 712:	bb 27       	eor	r27, r27
 714:	aa 27       	eor	r26, r26
 716:	0e 94 a0 03 	call	0x740	; 0x740 <__addsf3x>
 71a:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__fp_round>
 71e:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__fp_pscA>
 722:	38 f0       	brcs	.+14     	; 0x732 <__addsf3+0x20>
 724:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fp_pscB>
 728:	20 f0       	brcs	.+8      	; 0x732 <__addsf3+0x20>
 72a:	39 f4       	brne	.+14     	; 0x73a <__addsf3+0x28>
 72c:	9f 3f       	cpi	r25, 0xFF	; 255
 72e:	19 f4       	brne	.+6      	; 0x736 <__addsf3+0x24>
 730:	26 f4       	brtc	.+8      	; 0x73a <__addsf3+0x28>
 732:	0c 94 d9 04 	jmp	0x9b2	; 0x9b2 <__fp_nan>
 736:	0e f4       	brtc	.+2      	; 0x73a <__addsf3+0x28>
 738:	e0 95       	com	r30
 73a:	e7 fb       	bst	r30, 7
 73c:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__fp_inf>

00000740 <__addsf3x>:
 740:	e9 2f       	mov	r30, r25
 742:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__fp_split3>
 746:	58 f3       	brcs	.-42     	; 0x71e <__addsf3+0xc>
 748:	ba 17       	cp	r27, r26
 74a:	62 07       	cpc	r22, r18
 74c:	73 07       	cpc	r23, r19
 74e:	84 07       	cpc	r24, r20
 750:	95 07       	cpc	r25, r21
 752:	20 f0       	brcs	.+8      	; 0x75c <__addsf3x+0x1c>
 754:	79 f4       	brne	.+30     	; 0x774 <__addsf3x+0x34>
 756:	a6 f5       	brtc	.+104    	; 0x7c0 <__addsf3x+0x80>
 758:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <__fp_zero>
 75c:	0e f4       	brtc	.+2      	; 0x760 <__addsf3x+0x20>
 75e:	e0 95       	com	r30
 760:	0b 2e       	mov	r0, r27
 762:	ba 2f       	mov	r27, r26
 764:	a0 2d       	mov	r26, r0
 766:	0b 01       	movw	r0, r22
 768:	b9 01       	movw	r22, r18
 76a:	90 01       	movw	r18, r0
 76c:	0c 01       	movw	r0, r24
 76e:	ca 01       	movw	r24, r20
 770:	a0 01       	movw	r20, r0
 772:	11 24       	eor	r1, r1
 774:	ff 27       	eor	r31, r31
 776:	59 1b       	sub	r21, r25
 778:	99 f0       	breq	.+38     	; 0x7a0 <__addsf3x+0x60>
 77a:	59 3f       	cpi	r21, 0xF9	; 249
 77c:	50 f4       	brcc	.+20     	; 0x792 <__addsf3x+0x52>
 77e:	50 3e       	cpi	r21, 0xE0	; 224
 780:	68 f1       	brcs	.+90     	; 0x7dc <__addsf3x+0x9c>
 782:	1a 16       	cp	r1, r26
 784:	f0 40       	sbci	r31, 0x00	; 0
 786:	a2 2f       	mov	r26, r18
 788:	23 2f       	mov	r18, r19
 78a:	34 2f       	mov	r19, r20
 78c:	44 27       	eor	r20, r20
 78e:	58 5f       	subi	r21, 0xF8	; 248
 790:	f3 cf       	rjmp	.-26     	; 0x778 <__addsf3x+0x38>
 792:	46 95       	lsr	r20
 794:	37 95       	ror	r19
 796:	27 95       	ror	r18
 798:	a7 95       	ror	r26
 79a:	f0 40       	sbci	r31, 0x00	; 0
 79c:	53 95       	inc	r21
 79e:	c9 f7       	brne	.-14     	; 0x792 <__addsf3x+0x52>
 7a0:	7e f4       	brtc	.+30     	; 0x7c0 <__addsf3x+0x80>
 7a2:	1f 16       	cp	r1, r31
 7a4:	ba 0b       	sbc	r27, r26
 7a6:	62 0b       	sbc	r22, r18
 7a8:	73 0b       	sbc	r23, r19
 7aa:	84 0b       	sbc	r24, r20
 7ac:	ba f0       	brmi	.+46     	; 0x7dc <__addsf3x+0x9c>
 7ae:	91 50       	subi	r25, 0x01	; 1
 7b0:	a1 f0       	breq	.+40     	; 0x7da <__addsf3x+0x9a>
 7b2:	ff 0f       	add	r31, r31
 7b4:	bb 1f       	adc	r27, r27
 7b6:	66 1f       	adc	r22, r22
 7b8:	77 1f       	adc	r23, r23
 7ba:	88 1f       	adc	r24, r24
 7bc:	c2 f7       	brpl	.-16     	; 0x7ae <__addsf3x+0x6e>
 7be:	0e c0       	rjmp	.+28     	; 0x7dc <__addsf3x+0x9c>
 7c0:	ba 0f       	add	r27, r26
 7c2:	62 1f       	adc	r22, r18
 7c4:	73 1f       	adc	r23, r19
 7c6:	84 1f       	adc	r24, r20
 7c8:	48 f4       	brcc	.+18     	; 0x7dc <__addsf3x+0x9c>
 7ca:	87 95       	ror	r24
 7cc:	77 95       	ror	r23
 7ce:	67 95       	ror	r22
 7d0:	b7 95       	ror	r27
 7d2:	f7 95       	ror	r31
 7d4:	9e 3f       	cpi	r25, 0xFE	; 254
 7d6:	08 f0       	brcs	.+2      	; 0x7da <__addsf3x+0x9a>
 7d8:	b0 cf       	rjmp	.-160    	; 0x73a <__addsf3+0x28>
 7da:	93 95       	inc	r25
 7dc:	88 0f       	add	r24, r24
 7de:	08 f0       	brcs	.+2      	; 0x7e2 <__addsf3x+0xa2>
 7e0:	99 27       	eor	r25, r25
 7e2:	ee 0f       	add	r30, r30
 7e4:	97 95       	ror	r25
 7e6:	87 95       	ror	r24
 7e8:	08 95       	ret

000007ea <__divsf3>:
 7ea:	0e 94 09 04 	call	0x812	; 0x812 <__divsf3x>
 7ee:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__fp_round>
 7f2:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fp_pscB>
 7f6:	58 f0       	brcs	.+22     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7f8:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__fp_pscA>
 7fc:	40 f0       	brcs	.+16     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7fe:	29 f4       	brne	.+10     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 800:	5f 3f       	cpi	r21, 0xFF	; 255
 802:	29 f0       	breq	.+10     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 804:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__fp_inf>
 808:	51 11       	cpse	r21, r1
 80a:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__fp_szero>
 80e:	0c 94 d9 04 	jmp	0x9b2	; 0x9b2 <__fp_nan>

00000812 <__divsf3x>:
 812:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__fp_split3>
 816:	68 f3       	brcs	.-38     	; 0x7f2 <__divsf3+0x8>

00000818 <__divsf3_pse>:
 818:	99 23       	and	r25, r25
 81a:	b1 f3       	breq	.-20     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 81c:	55 23       	and	r21, r21
 81e:	91 f3       	breq	.-28     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 820:	95 1b       	sub	r25, r21
 822:	55 0b       	sbc	r21, r21
 824:	bb 27       	eor	r27, r27
 826:	aa 27       	eor	r26, r26
 828:	62 17       	cp	r22, r18
 82a:	73 07       	cpc	r23, r19
 82c:	84 07       	cpc	r24, r20
 82e:	38 f0       	brcs	.+14     	; 0x83e <__divsf3_pse+0x26>
 830:	9f 5f       	subi	r25, 0xFF	; 255
 832:	5f 4f       	sbci	r21, 0xFF	; 255
 834:	22 0f       	add	r18, r18
 836:	33 1f       	adc	r19, r19
 838:	44 1f       	adc	r20, r20
 83a:	aa 1f       	adc	r26, r26
 83c:	a9 f3       	breq	.-22     	; 0x828 <__divsf3_pse+0x10>
 83e:	35 d0       	rcall	.+106    	; 0x8aa <__stack+0x4b>
 840:	0e 2e       	mov	r0, r30
 842:	3a f0       	brmi	.+14     	; 0x852 <__divsf3_pse+0x3a>
 844:	e0 e8       	ldi	r30, 0x80	; 128
 846:	32 d0       	rcall	.+100    	; 0x8ac <__stack+0x4d>
 848:	91 50       	subi	r25, 0x01	; 1
 84a:	50 40       	sbci	r21, 0x00	; 0
 84c:	e6 95       	lsr	r30
 84e:	00 1c       	adc	r0, r0
 850:	ca f7       	brpl	.-14     	; 0x844 <__divsf3_pse+0x2c>
 852:	2b d0       	rcall	.+86     	; 0x8aa <__stack+0x4b>
 854:	fe 2f       	mov	r31, r30
 856:	29 d0       	rcall	.+82     	; 0x8aa <__stack+0x4b>
 858:	66 0f       	add	r22, r22
 85a:	77 1f       	adc	r23, r23
 85c:	88 1f       	adc	r24, r24
 85e:	bb 1f       	adc	r27, r27
 860:	26 17       	cp	r18, r22
 862:	37 07       	cpc	r19, r23
 864:	48 07       	cpc	r20, r24
 866:	ab 07       	cpc	r26, r27
 868:	b0 e8       	ldi	r27, 0x80	; 128
 86a:	09 f0       	breq	.+2      	; 0x86e <__stack+0xf>
 86c:	bb 0b       	sbc	r27, r27
 86e:	80 2d       	mov	r24, r0
 870:	bf 01       	movw	r22, r30
 872:	ff 27       	eor	r31, r31
 874:	93 58       	subi	r25, 0x83	; 131
 876:	5f 4f       	sbci	r21, 0xFF	; 255
 878:	3a f0       	brmi	.+14     	; 0x888 <__stack+0x29>
 87a:	9e 3f       	cpi	r25, 0xFE	; 254
 87c:	51 05       	cpc	r21, r1
 87e:	78 f0       	brcs	.+30     	; 0x89e <__stack+0x3f>
 880:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__fp_inf>
 884:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__fp_szero>
 888:	5f 3f       	cpi	r21, 0xFF	; 255
 88a:	e4 f3       	brlt	.-8      	; 0x884 <__stack+0x25>
 88c:	98 3e       	cpi	r25, 0xE8	; 232
 88e:	d4 f3       	brlt	.-12     	; 0x884 <__stack+0x25>
 890:	86 95       	lsr	r24
 892:	77 95       	ror	r23
 894:	67 95       	ror	r22
 896:	b7 95       	ror	r27
 898:	f7 95       	ror	r31
 89a:	9f 5f       	subi	r25, 0xFF	; 255
 89c:	c9 f7       	brne	.-14     	; 0x890 <__stack+0x31>
 89e:	88 0f       	add	r24, r24
 8a0:	91 1d       	adc	r25, r1
 8a2:	96 95       	lsr	r25
 8a4:	87 95       	ror	r24
 8a6:	97 f9       	bld	r25, 7
 8a8:	08 95       	ret
 8aa:	e1 e0       	ldi	r30, 0x01	; 1
 8ac:	66 0f       	add	r22, r22
 8ae:	77 1f       	adc	r23, r23
 8b0:	88 1f       	adc	r24, r24
 8b2:	bb 1f       	adc	r27, r27
 8b4:	62 17       	cp	r22, r18
 8b6:	73 07       	cpc	r23, r19
 8b8:	84 07       	cpc	r24, r20
 8ba:	ba 07       	cpc	r27, r26
 8bc:	20 f0       	brcs	.+8      	; 0x8c6 <__stack+0x67>
 8be:	62 1b       	sub	r22, r18
 8c0:	73 0b       	sbc	r23, r19
 8c2:	84 0b       	sbc	r24, r20
 8c4:	ba 0b       	sbc	r27, r26
 8c6:	ee 1f       	adc	r30, r30
 8c8:	88 f7       	brcc	.-30     	; 0x8ac <__stack+0x4d>
 8ca:	e0 95       	com	r30
 8cc:	08 95       	ret

000008ce <__fixunssfsi>:
 8ce:	0e 94 03 05 	call	0xa06	; 0xa06 <__fp_splitA>
 8d2:	88 f0       	brcs	.+34     	; 0x8f6 <__fixunssfsi+0x28>
 8d4:	9f 57       	subi	r25, 0x7F	; 127
 8d6:	98 f0       	brcs	.+38     	; 0x8fe <__fixunssfsi+0x30>
 8d8:	b9 2f       	mov	r27, r25
 8da:	99 27       	eor	r25, r25
 8dc:	b7 51       	subi	r27, 0x17	; 23
 8de:	b0 f0       	brcs	.+44     	; 0x90c <__fixunssfsi+0x3e>
 8e0:	e1 f0       	breq	.+56     	; 0x91a <__fixunssfsi+0x4c>
 8e2:	66 0f       	add	r22, r22
 8e4:	77 1f       	adc	r23, r23
 8e6:	88 1f       	adc	r24, r24
 8e8:	99 1f       	adc	r25, r25
 8ea:	1a f0       	brmi	.+6      	; 0x8f2 <__fixunssfsi+0x24>
 8ec:	ba 95       	dec	r27
 8ee:	c9 f7       	brne	.-14     	; 0x8e2 <__fixunssfsi+0x14>
 8f0:	14 c0       	rjmp	.+40     	; 0x91a <__fixunssfsi+0x4c>
 8f2:	b1 30       	cpi	r27, 0x01	; 1
 8f4:	91 f0       	breq	.+36     	; 0x91a <__fixunssfsi+0x4c>
 8f6:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__fp_zero>
 8fa:	b1 e0       	ldi	r27, 0x01	; 1
 8fc:	08 95       	ret
 8fe:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <__fp_zero>
 902:	67 2f       	mov	r22, r23
 904:	78 2f       	mov	r23, r24
 906:	88 27       	eor	r24, r24
 908:	b8 5f       	subi	r27, 0xF8	; 248
 90a:	39 f0       	breq	.+14     	; 0x91a <__fixunssfsi+0x4c>
 90c:	b9 3f       	cpi	r27, 0xF9	; 249
 90e:	cc f3       	brlt	.-14     	; 0x902 <__fixunssfsi+0x34>
 910:	86 95       	lsr	r24
 912:	77 95       	ror	r23
 914:	67 95       	ror	r22
 916:	b3 95       	inc	r27
 918:	d9 f7       	brne	.-10     	; 0x910 <__fixunssfsi+0x42>
 91a:	3e f4       	brtc	.+14     	; 0x92a <__fixunssfsi+0x5c>
 91c:	90 95       	com	r25
 91e:	80 95       	com	r24
 920:	70 95       	com	r23
 922:	61 95       	neg	r22
 924:	7f 4f       	sbci	r23, 0xFF	; 255
 926:	8f 4f       	sbci	r24, 0xFF	; 255
 928:	9f 4f       	sbci	r25, 0xFF	; 255
 92a:	08 95       	ret

0000092c <__floatunsisf>:
 92c:	e8 94       	clt
 92e:	09 c0       	rjmp	.+18     	; 0x942 <__floatsisf+0x12>

00000930 <__floatsisf>:
 930:	97 fb       	bst	r25, 7
 932:	3e f4       	brtc	.+14     	; 0x942 <__floatsisf+0x12>
 934:	90 95       	com	r25
 936:	80 95       	com	r24
 938:	70 95       	com	r23
 93a:	61 95       	neg	r22
 93c:	7f 4f       	sbci	r23, 0xFF	; 255
 93e:	8f 4f       	sbci	r24, 0xFF	; 255
 940:	9f 4f       	sbci	r25, 0xFF	; 255
 942:	99 23       	and	r25, r25
 944:	a9 f0       	breq	.+42     	; 0x970 <__floatsisf+0x40>
 946:	f9 2f       	mov	r31, r25
 948:	96 e9       	ldi	r25, 0x96	; 150
 94a:	bb 27       	eor	r27, r27
 94c:	93 95       	inc	r25
 94e:	f6 95       	lsr	r31
 950:	87 95       	ror	r24
 952:	77 95       	ror	r23
 954:	67 95       	ror	r22
 956:	b7 95       	ror	r27
 958:	f1 11       	cpse	r31, r1
 95a:	f8 cf       	rjmp	.-16     	; 0x94c <__floatsisf+0x1c>
 95c:	fa f4       	brpl	.+62     	; 0x99c <__floatsisf+0x6c>
 95e:	bb 0f       	add	r27, r27
 960:	11 f4       	brne	.+4      	; 0x966 <__floatsisf+0x36>
 962:	60 ff       	sbrs	r22, 0
 964:	1b c0       	rjmp	.+54     	; 0x99c <__floatsisf+0x6c>
 966:	6f 5f       	subi	r22, 0xFF	; 255
 968:	7f 4f       	sbci	r23, 0xFF	; 255
 96a:	8f 4f       	sbci	r24, 0xFF	; 255
 96c:	9f 4f       	sbci	r25, 0xFF	; 255
 96e:	16 c0       	rjmp	.+44     	; 0x99c <__floatsisf+0x6c>
 970:	88 23       	and	r24, r24
 972:	11 f0       	breq	.+4      	; 0x978 <__floatsisf+0x48>
 974:	96 e9       	ldi	r25, 0x96	; 150
 976:	11 c0       	rjmp	.+34     	; 0x99a <__floatsisf+0x6a>
 978:	77 23       	and	r23, r23
 97a:	21 f0       	breq	.+8      	; 0x984 <__floatsisf+0x54>
 97c:	9e e8       	ldi	r25, 0x8E	; 142
 97e:	87 2f       	mov	r24, r23
 980:	76 2f       	mov	r23, r22
 982:	05 c0       	rjmp	.+10     	; 0x98e <__floatsisf+0x5e>
 984:	66 23       	and	r22, r22
 986:	71 f0       	breq	.+28     	; 0x9a4 <__floatsisf+0x74>
 988:	96 e8       	ldi	r25, 0x86	; 134
 98a:	86 2f       	mov	r24, r22
 98c:	70 e0       	ldi	r23, 0x00	; 0
 98e:	60 e0       	ldi	r22, 0x00	; 0
 990:	2a f0       	brmi	.+10     	; 0x99c <__floatsisf+0x6c>
 992:	9a 95       	dec	r25
 994:	66 0f       	add	r22, r22
 996:	77 1f       	adc	r23, r23
 998:	88 1f       	adc	r24, r24
 99a:	da f7       	brpl	.-10     	; 0x992 <__floatsisf+0x62>
 99c:	88 0f       	add	r24, r24
 99e:	96 95       	lsr	r25
 9a0:	87 95       	ror	r24
 9a2:	97 f9       	bld	r25, 7
 9a4:	08 95       	ret

000009a6 <__fp_inf>:
 9a6:	97 f9       	bld	r25, 7
 9a8:	9f 67       	ori	r25, 0x7F	; 127
 9aa:	80 e8       	ldi	r24, 0x80	; 128
 9ac:	70 e0       	ldi	r23, 0x00	; 0
 9ae:	60 e0       	ldi	r22, 0x00	; 0
 9b0:	08 95       	ret

000009b2 <__fp_nan>:
 9b2:	9f ef       	ldi	r25, 0xFF	; 255
 9b4:	80 ec       	ldi	r24, 0xC0	; 192
 9b6:	08 95       	ret

000009b8 <__fp_pscA>:
 9b8:	00 24       	eor	r0, r0
 9ba:	0a 94       	dec	r0
 9bc:	16 16       	cp	r1, r22
 9be:	17 06       	cpc	r1, r23
 9c0:	18 06       	cpc	r1, r24
 9c2:	09 06       	cpc	r0, r25
 9c4:	08 95       	ret

000009c6 <__fp_pscB>:
 9c6:	00 24       	eor	r0, r0
 9c8:	0a 94       	dec	r0
 9ca:	12 16       	cp	r1, r18
 9cc:	13 06       	cpc	r1, r19
 9ce:	14 06       	cpc	r1, r20
 9d0:	05 06       	cpc	r0, r21
 9d2:	08 95       	ret

000009d4 <__fp_round>:
 9d4:	09 2e       	mov	r0, r25
 9d6:	03 94       	inc	r0
 9d8:	00 0c       	add	r0, r0
 9da:	11 f4       	brne	.+4      	; 0x9e0 <__fp_round+0xc>
 9dc:	88 23       	and	r24, r24
 9de:	52 f0       	brmi	.+20     	; 0x9f4 <__fp_round+0x20>
 9e0:	bb 0f       	add	r27, r27
 9e2:	40 f4       	brcc	.+16     	; 0x9f4 <__fp_round+0x20>
 9e4:	bf 2b       	or	r27, r31
 9e6:	11 f4       	brne	.+4      	; 0x9ec <__fp_round+0x18>
 9e8:	60 ff       	sbrs	r22, 0
 9ea:	04 c0       	rjmp	.+8      	; 0x9f4 <__fp_round+0x20>
 9ec:	6f 5f       	subi	r22, 0xFF	; 255
 9ee:	7f 4f       	sbci	r23, 0xFF	; 255
 9f0:	8f 4f       	sbci	r24, 0xFF	; 255
 9f2:	9f 4f       	sbci	r25, 0xFF	; 255
 9f4:	08 95       	ret

000009f6 <__fp_split3>:
 9f6:	57 fd       	sbrc	r21, 7
 9f8:	90 58       	subi	r25, 0x80	; 128
 9fa:	44 0f       	add	r20, r20
 9fc:	55 1f       	adc	r21, r21
 9fe:	59 f0       	breq	.+22     	; 0xa16 <__fp_splitA+0x10>
 a00:	5f 3f       	cpi	r21, 0xFF	; 255
 a02:	71 f0       	breq	.+28     	; 0xa20 <__fp_splitA+0x1a>
 a04:	47 95       	ror	r20

00000a06 <__fp_splitA>:
 a06:	88 0f       	add	r24, r24
 a08:	97 fb       	bst	r25, 7
 a0a:	99 1f       	adc	r25, r25
 a0c:	61 f0       	breq	.+24     	; 0xa26 <__fp_splitA+0x20>
 a0e:	9f 3f       	cpi	r25, 0xFF	; 255
 a10:	79 f0       	breq	.+30     	; 0xa30 <__fp_splitA+0x2a>
 a12:	87 95       	ror	r24
 a14:	08 95       	ret
 a16:	12 16       	cp	r1, r18
 a18:	13 06       	cpc	r1, r19
 a1a:	14 06       	cpc	r1, r20
 a1c:	55 1f       	adc	r21, r21
 a1e:	f2 cf       	rjmp	.-28     	; 0xa04 <__fp_split3+0xe>
 a20:	46 95       	lsr	r20
 a22:	f1 df       	rcall	.-30     	; 0xa06 <__fp_splitA>
 a24:	08 c0       	rjmp	.+16     	; 0xa36 <__fp_splitA+0x30>
 a26:	16 16       	cp	r1, r22
 a28:	17 06       	cpc	r1, r23
 a2a:	18 06       	cpc	r1, r24
 a2c:	99 1f       	adc	r25, r25
 a2e:	f1 cf       	rjmp	.-30     	; 0xa12 <__fp_splitA+0xc>
 a30:	86 95       	lsr	r24
 a32:	71 05       	cpc	r23, r1
 a34:	61 05       	cpc	r22, r1
 a36:	08 94       	sec
 a38:	08 95       	ret

00000a3a <__fp_zero>:
 a3a:	e8 94       	clt

00000a3c <__fp_szero>:
 a3c:	bb 27       	eor	r27, r27
 a3e:	66 27       	eor	r22, r22
 a40:	77 27       	eor	r23, r23
 a42:	cb 01       	movw	r24, r22
 a44:	97 f9       	bld	r25, 7
 a46:	08 95       	ret

00000a48 <pow>:
 a48:	fa 01       	movw	r30, r20
 a4a:	ee 0f       	add	r30, r30
 a4c:	ff 1f       	adc	r31, r31
 a4e:	30 96       	adiw	r30, 0x00	; 0
 a50:	21 05       	cpc	r18, r1
 a52:	31 05       	cpc	r19, r1
 a54:	a1 f1       	breq	.+104    	; 0xabe <pow+0x76>
 a56:	61 15       	cp	r22, r1
 a58:	71 05       	cpc	r23, r1
 a5a:	61 f4       	brne	.+24     	; 0xa74 <pow+0x2c>
 a5c:	80 38       	cpi	r24, 0x80	; 128
 a5e:	bf e3       	ldi	r27, 0x3F	; 63
 a60:	9b 07       	cpc	r25, r27
 a62:	49 f1       	breq	.+82     	; 0xab6 <pow+0x6e>
 a64:	68 94       	set
 a66:	90 38       	cpi	r25, 0x80	; 128
 a68:	81 05       	cpc	r24, r1
 a6a:	61 f0       	breq	.+24     	; 0xa84 <pow+0x3c>
 a6c:	80 38       	cpi	r24, 0x80	; 128
 a6e:	bf ef       	ldi	r27, 0xFF	; 255
 a70:	9b 07       	cpc	r25, r27
 a72:	41 f0       	breq	.+16     	; 0xa84 <pow+0x3c>
 a74:	99 23       	and	r25, r25
 a76:	4a f5       	brpl	.+82     	; 0xaca <pow+0x82>
 a78:	ff 3f       	cpi	r31, 0xFF	; 255
 a7a:	e1 05       	cpc	r30, r1
 a7c:	31 05       	cpc	r19, r1
 a7e:	21 05       	cpc	r18, r1
 a80:	19 f1       	breq	.+70     	; 0xac8 <pow+0x80>
 a82:	e8 94       	clt
 a84:	08 94       	sec
 a86:	e7 95       	ror	r30
 a88:	d9 01       	movw	r26, r18
 a8a:	aa 23       	and	r26, r26
 a8c:	29 f4       	brne	.+10     	; 0xa98 <pow+0x50>
 a8e:	ab 2f       	mov	r26, r27
 a90:	be 2f       	mov	r27, r30
 a92:	f8 5f       	subi	r31, 0xF8	; 248
 a94:	d0 f3       	brcs	.-12     	; 0xa8a <pow+0x42>
 a96:	10 c0       	rjmp	.+32     	; 0xab8 <pow+0x70>
 a98:	ff 5f       	subi	r31, 0xFF	; 255
 a9a:	70 f4       	brcc	.+28     	; 0xab8 <pow+0x70>
 a9c:	a6 95       	lsr	r26
 a9e:	e0 f7       	brcc	.-8      	; 0xa98 <pow+0x50>
 aa0:	f7 39       	cpi	r31, 0x97	; 151
 aa2:	50 f0       	brcs	.+20     	; 0xab8 <pow+0x70>
 aa4:	19 f0       	breq	.+6      	; 0xaac <pow+0x64>
 aa6:	ff 3a       	cpi	r31, 0xAF	; 175
 aa8:	38 f4       	brcc	.+14     	; 0xab8 <pow+0x70>
 aaa:	9f 77       	andi	r25, 0x7F	; 127
 aac:	9f 93       	push	r25
 aae:	0d d0       	rcall	.+26     	; 0xaca <pow+0x82>
 ab0:	0f 90       	pop	r0
 ab2:	07 fc       	sbrc	r0, 7
 ab4:	90 58       	subi	r25, 0x80	; 128
 ab6:	08 95       	ret
 ab8:	46 f0       	brts	.+16     	; 0xaca <pow+0x82>
 aba:	0c 94 d9 04 	jmp	0x9b2	; 0x9b2 <__fp_nan>
 abe:	60 e0       	ldi	r22, 0x00	; 0
 ac0:	70 e0       	ldi	r23, 0x00	; 0
 ac2:	80 e8       	ldi	r24, 0x80	; 128
 ac4:	9f e3       	ldi	r25, 0x3F	; 63
 ac6:	08 95       	ret
 ac8:	4f e7       	ldi	r20, 0x7F	; 127
 aca:	9f 77       	andi	r25, 0x7F	; 127
 acc:	5f 93       	push	r21
 ace:	4f 93       	push	r20
 ad0:	3f 93       	push	r19
 ad2:	2f 93       	push	r18
 ad4:	0e 94 1f 06 	call	0xc3e	; 0xc3e <log>
 ad8:	2f 91       	pop	r18
 ada:	3f 91       	pop	r19
 adc:	4f 91       	pop	r20
 ade:	5f 91       	pop	r21
 ae0:	0e 94 9b 06 	call	0xd36	; 0xd36 <__mulsf3>
 ae4:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <exp>
 ae8:	29 f4       	brne	.+10     	; 0xaf4 <pow+0xac>
 aea:	16 f0       	brts	.+4      	; 0xaf0 <pow+0xa8>
 aec:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__fp_inf>
 af0:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <__fp_zero>
 af4:	0c 94 d9 04 	jmp	0x9b2	; 0x9b2 <__fp_nan>

00000af8 <exp>:
 af8:	0e 94 03 05 	call	0xa06	; 0xa06 <__fp_splitA>
 afc:	a8 f3       	brcs	.-22     	; 0xae8 <pow+0xa0>
 afe:	96 38       	cpi	r25, 0x86	; 134
 b00:	a0 f7       	brcc	.-24     	; 0xaea <pow+0xa2>
 b02:	07 f8       	bld	r0, 7
 b04:	0f 92       	push	r0
 b06:	e8 94       	clt
 b08:	2b e3       	ldi	r18, 0x3B	; 59
 b0a:	3a ea       	ldi	r19, 0xAA	; 170
 b0c:	48 eb       	ldi	r20, 0xB8	; 184
 b0e:	5f e7       	ldi	r21, 0x7F	; 127
 b10:	0e 94 b1 06 	call	0xd62	; 0xd62 <__mulsf3_pse>
 b14:	0f 92       	push	r0
 b16:	0f 92       	push	r0
 b18:	0f 92       	push	r0
 b1a:	4d b7       	in	r20, 0x3d	; 61
 b1c:	5e b7       	in	r21, 0x3e	; 62
 b1e:	0f 92       	push	r0
 b20:	0e 94 67 06 	call	0xcce	; 0xcce <modf>
 b24:	e4 e5       	ldi	r30, 0x54	; 84
 b26:	f0 e0       	ldi	r31, 0x00	; 0
 b28:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__fp_powser>
 b2c:	4f 91       	pop	r20
 b2e:	5f 91       	pop	r21
 b30:	ef 91       	pop	r30
 b32:	ff 91       	pop	r31
 b34:	e5 95       	asr	r30
 b36:	ee 1f       	adc	r30, r30
 b38:	ff 1f       	adc	r31, r31
 b3a:	49 f0       	breq	.+18     	; 0xb4e <exp+0x56>
 b3c:	fe 57       	subi	r31, 0x7E	; 126
 b3e:	e0 68       	ori	r30, 0x80	; 128
 b40:	44 27       	eor	r20, r20
 b42:	ee 0f       	add	r30, r30
 b44:	44 1f       	adc	r20, r20
 b46:	fa 95       	dec	r31
 b48:	e1 f7       	brne	.-8      	; 0xb42 <exp+0x4a>
 b4a:	41 95       	neg	r20
 b4c:	55 0b       	sbc	r21, r21
 b4e:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <ldexp>
 b52:	0f 90       	pop	r0
 b54:	07 fe       	sbrs	r0, 7
 b56:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <inverse>
 b5a:	08 95       	ret

00000b5c <__fp_powser>:
 b5c:	df 93       	push	r29
 b5e:	cf 93       	push	r28
 b60:	1f 93       	push	r17
 b62:	0f 93       	push	r16
 b64:	ff 92       	push	r15
 b66:	ef 92       	push	r14
 b68:	df 92       	push	r13
 b6a:	7b 01       	movw	r14, r22
 b6c:	8c 01       	movw	r16, r24
 b6e:	68 94       	set
 b70:	06 c0       	rjmp	.+12     	; 0xb7e <__fp_powser+0x22>
 b72:	da 2e       	mov	r13, r26
 b74:	ef 01       	movw	r28, r30
 b76:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__mulsf3x>
 b7a:	fe 01       	movw	r30, r28
 b7c:	e8 94       	clt
 b7e:	a5 91       	lpm	r26, Z+
 b80:	25 91       	lpm	r18, Z+
 b82:	35 91       	lpm	r19, Z+
 b84:	45 91       	lpm	r20, Z+
 b86:	55 91       	lpm	r21, Z+
 b88:	a6 f3       	brts	.-24     	; 0xb72 <__fp_powser+0x16>
 b8a:	ef 01       	movw	r28, r30
 b8c:	0e 94 a0 03 	call	0x740	; 0x740 <__addsf3x>
 b90:	fe 01       	movw	r30, r28
 b92:	97 01       	movw	r18, r14
 b94:	a8 01       	movw	r20, r16
 b96:	da 94       	dec	r13
 b98:	69 f7       	brne	.-38     	; 0xb74 <__fp_powser+0x18>
 b9a:	df 90       	pop	r13
 b9c:	ef 90       	pop	r14
 b9e:	ff 90       	pop	r15
 ba0:	0f 91       	pop	r16
 ba2:	1f 91       	pop	r17
 ba4:	cf 91       	pop	r28
 ba6:	df 91       	pop	r29
 ba8:	08 95       	ret

00000baa <inverse>:
 baa:	9b 01       	movw	r18, r22
 bac:	ac 01       	movw	r20, r24
 bae:	60 e0       	ldi	r22, 0x00	; 0
 bb0:	70 e0       	ldi	r23, 0x00	; 0
 bb2:	80 e8       	ldi	r24, 0x80	; 128
 bb4:	9f e3       	ldi	r25, 0x3F	; 63
 bb6:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__divsf3>
 bba:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__fp_inf>
 bbe:	0c 94 08 07 	jmp	0xe10	; 0xe10 <__fp_mpack>

00000bc2 <ldexp>:
 bc2:	0e 94 03 05 	call	0xa06	; 0xa06 <__fp_splitA>
 bc6:	d8 f3       	brcs	.-10     	; 0xbbe <inverse+0x14>
 bc8:	99 23       	and	r25, r25
 bca:	c9 f3       	breq	.-14     	; 0xbbe <inverse+0x14>
 bcc:	94 0f       	add	r25, r20
 bce:	51 1d       	adc	r21, r1
 bd0:	a3 f3       	brvs	.-24     	; 0xbba <inverse+0x10>
 bd2:	91 50       	subi	r25, 0x01	; 1
 bd4:	50 40       	sbci	r21, 0x00	; 0
 bd6:	94 f0       	brlt	.+36     	; 0xbfc <ldexp+0x3a>
 bd8:	59 f0       	breq	.+22     	; 0xbf0 <ldexp+0x2e>
 bda:	88 23       	and	r24, r24
 bdc:	32 f0       	brmi	.+12     	; 0xbea <ldexp+0x28>
 bde:	66 0f       	add	r22, r22
 be0:	77 1f       	adc	r23, r23
 be2:	88 1f       	adc	r24, r24
 be4:	91 50       	subi	r25, 0x01	; 1
 be6:	50 40       	sbci	r21, 0x00	; 0
 be8:	c1 f7       	brne	.-16     	; 0xbda <ldexp+0x18>
 bea:	9e 3f       	cpi	r25, 0xFE	; 254
 bec:	51 05       	cpc	r21, r1
 bee:	2c f7       	brge	.-54     	; 0xbba <inverse+0x10>
 bf0:	88 0f       	add	r24, r24
 bf2:	91 1d       	adc	r25, r1
 bf4:	96 95       	lsr	r25
 bf6:	87 95       	ror	r24
 bf8:	97 f9       	bld	r25, 7
 bfa:	08 95       	ret
 bfc:	5f 3f       	cpi	r21, 0xFF	; 255
 bfe:	ac f0       	brlt	.+42     	; 0xc2a <ldexp+0x68>
 c00:	98 3e       	cpi	r25, 0xE8	; 232
 c02:	9c f0       	brlt	.+38     	; 0xc2a <ldexp+0x68>
 c04:	bb 27       	eor	r27, r27
 c06:	86 95       	lsr	r24
 c08:	77 95       	ror	r23
 c0a:	67 95       	ror	r22
 c0c:	b7 95       	ror	r27
 c0e:	08 f4       	brcc	.+2      	; 0xc12 <ldexp+0x50>
 c10:	b1 60       	ori	r27, 0x01	; 1
 c12:	93 95       	inc	r25
 c14:	c1 f7       	brne	.-16     	; 0xc06 <ldexp+0x44>
 c16:	bb 0f       	add	r27, r27
 c18:	58 f7       	brcc	.-42     	; 0xbf0 <ldexp+0x2e>
 c1a:	11 f4       	brne	.+4      	; 0xc20 <ldexp+0x5e>
 c1c:	60 ff       	sbrs	r22, 0
 c1e:	e8 cf       	rjmp	.-48     	; 0xbf0 <ldexp+0x2e>
 c20:	6f 5f       	subi	r22, 0xFF	; 255
 c22:	7f 4f       	sbci	r23, 0xFF	; 255
 c24:	8f 4f       	sbci	r24, 0xFF	; 255
 c26:	9f 4f       	sbci	r25, 0xFF	; 255
 c28:	e3 cf       	rjmp	.-58     	; 0xbf0 <ldexp+0x2e>
 c2a:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__fp_szero>
 c2e:	16 f0       	brts	.+4      	; 0xc34 <ldexp+0x72>
 c30:	0c 94 08 07 	jmp	0xe10	; 0xe10 <__fp_mpack>
 c34:	0c 94 d9 04 	jmp	0x9b2	; 0x9b2 <__fp_nan>
 c38:	68 94       	set
 c3a:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__fp_inf>

00000c3e <log>:
 c3e:	0e 94 03 05 	call	0xa06	; 0xa06 <__fp_splitA>
 c42:	a8 f3       	brcs	.-22     	; 0xc2e <ldexp+0x6c>
 c44:	99 23       	and	r25, r25
 c46:	c1 f3       	breq	.-16     	; 0xc38 <ldexp+0x76>
 c48:	ae f3       	brts	.-22     	; 0xc34 <ldexp+0x72>
 c4a:	df 93       	push	r29
 c4c:	cf 93       	push	r28
 c4e:	1f 93       	push	r17
 c50:	0f 93       	push	r16
 c52:	ff 92       	push	r15
 c54:	c9 2f       	mov	r28, r25
 c56:	dd 27       	eor	r29, r29
 c58:	88 23       	and	r24, r24
 c5a:	2a f0       	brmi	.+10     	; 0xc66 <log+0x28>
 c5c:	21 97       	sbiw	r28, 0x01	; 1
 c5e:	66 0f       	add	r22, r22
 c60:	77 1f       	adc	r23, r23
 c62:	88 1f       	adc	r24, r24
 c64:	da f7       	brpl	.-10     	; 0xc5c <log+0x1e>
 c66:	20 e0       	ldi	r18, 0x00	; 0
 c68:	30 e0       	ldi	r19, 0x00	; 0
 c6a:	40 e8       	ldi	r20, 0x80	; 128
 c6c:	5f eb       	ldi	r21, 0xBF	; 191
 c6e:	9f e3       	ldi	r25, 0x3F	; 63
 c70:	88 39       	cpi	r24, 0x98	; 152
 c72:	20 f0       	brcs	.+8      	; 0xc7c <log+0x3e>
 c74:	80 3e       	cpi	r24, 0xE0	; 224
 c76:	38 f0       	brcs	.+14     	; 0xc86 <log+0x48>
 c78:	21 96       	adiw	r28, 0x01	; 1
 c7a:	8f 77       	andi	r24, 0x7F	; 127
 c7c:	0e 94 89 03 	call	0x712	; 0x712 <__addsf3>
 c80:	ec e7       	ldi	r30, 0x7C	; 124
 c82:	f0 e0       	ldi	r31, 0x00	; 0
 c84:	04 c0       	rjmp	.+8      	; 0xc8e <log+0x50>
 c86:	0e 94 89 03 	call	0x712	; 0x712 <__addsf3>
 c8a:	e9 ea       	ldi	r30, 0xA9	; 169
 c8c:	f0 e0       	ldi	r31, 0x00	; 0
 c8e:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__fp_powser>
 c92:	8b 01       	movw	r16, r22
 c94:	be 01       	movw	r22, r28
 c96:	ec 01       	movw	r28, r24
 c98:	fb 2e       	mov	r15, r27
 c9a:	6f 57       	subi	r22, 0x7F	; 127
 c9c:	71 09       	sbc	r23, r1
 c9e:	75 95       	asr	r23
 ca0:	77 1f       	adc	r23, r23
 ca2:	88 0b       	sbc	r24, r24
 ca4:	99 0b       	sbc	r25, r25
 ca6:	0e 94 98 04 	call	0x930	; 0x930 <__floatsisf>
 caa:	28 e1       	ldi	r18, 0x18	; 24
 cac:	32 e7       	ldi	r19, 0x72	; 114
 cae:	41 e3       	ldi	r20, 0x31	; 49
 cb0:	5f e3       	ldi	r21, 0x3F	; 63
 cb2:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__mulsf3x>
 cb6:	af 2d       	mov	r26, r15
 cb8:	98 01       	movw	r18, r16
 cba:	ae 01       	movw	r20, r28
 cbc:	ff 90       	pop	r15
 cbe:	0f 91       	pop	r16
 cc0:	1f 91       	pop	r17
 cc2:	cf 91       	pop	r28
 cc4:	df 91       	pop	r29
 cc6:	0e 94 a0 03 	call	0x740	; 0x740 <__addsf3x>
 cca:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__fp_round>

00000cce <modf>:
 cce:	fa 01       	movw	r30, r20
 cd0:	dc 01       	movw	r26, r24
 cd2:	aa 0f       	add	r26, r26
 cd4:	bb 1f       	adc	r27, r27
 cd6:	9b 01       	movw	r18, r22
 cd8:	ac 01       	movw	r20, r24
 cda:	bf 57       	subi	r27, 0x7F	; 127
 cdc:	28 f4       	brcc	.+10     	; 0xce8 <modf+0x1a>
 cde:	22 27       	eor	r18, r18
 ce0:	33 27       	eor	r19, r19
 ce2:	44 27       	eor	r20, r20
 ce4:	50 78       	andi	r21, 0x80	; 128
 ce6:	20 c0       	rjmp	.+64     	; 0xd28 <modf+0x5a>
 ce8:	b7 51       	subi	r27, 0x17	; 23
 cea:	90 f4       	brcc	.+36     	; 0xd10 <modf+0x42>
 cec:	ab 2f       	mov	r26, r27
 cee:	00 24       	eor	r0, r0
 cf0:	46 95       	lsr	r20
 cf2:	37 95       	ror	r19
 cf4:	27 95       	ror	r18
 cf6:	01 1c       	adc	r0, r1
 cf8:	a3 95       	inc	r26
 cfa:	d2 f3       	brmi	.-12     	; 0xcf0 <modf+0x22>
 cfc:	00 20       	and	r0, r0
 cfe:	71 f0       	breq	.+28     	; 0xd1c <modf+0x4e>
 d00:	22 0f       	add	r18, r18
 d02:	33 1f       	adc	r19, r19
 d04:	44 1f       	adc	r20, r20
 d06:	b3 95       	inc	r27
 d08:	da f3       	brmi	.-10     	; 0xd00 <modf+0x32>
 d0a:	0e d0       	rcall	.+28     	; 0xd28 <modf+0x5a>
 d0c:	0c 94 88 03 	jmp	0x710	; 0x710 <__subsf3>
 d10:	61 30       	cpi	r22, 0x01	; 1
 d12:	71 05       	cpc	r23, r1
 d14:	a0 e8       	ldi	r26, 0x80	; 128
 d16:	8a 07       	cpc	r24, r26
 d18:	b9 46       	sbci	r27, 0x69	; 105
 d1a:	30 f4       	brcc	.+12     	; 0xd28 <modf+0x5a>
 d1c:	9b 01       	movw	r18, r22
 d1e:	ac 01       	movw	r20, r24
 d20:	66 27       	eor	r22, r22
 d22:	77 27       	eor	r23, r23
 d24:	88 27       	eor	r24, r24
 d26:	90 78       	andi	r25, 0x80	; 128
 d28:	30 96       	adiw	r30, 0x00	; 0
 d2a:	21 f0       	breq	.+8      	; 0xd34 <modf+0x66>
 d2c:	20 83       	st	Z, r18
 d2e:	31 83       	std	Z+1, r19	; 0x01
 d30:	42 83       	std	Z+2, r20	; 0x02
 d32:	53 83       	std	Z+3, r21	; 0x03
 d34:	08 95       	ret

00000d36 <__mulsf3>:
 d36:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__mulsf3x>
 d3a:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__fp_round>
 d3e:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__fp_pscA>
 d42:	38 f0       	brcs	.+14     	; 0xd52 <__mulsf3+0x1c>
 d44:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fp_pscB>
 d48:	20 f0       	brcs	.+8      	; 0xd52 <__mulsf3+0x1c>
 d4a:	95 23       	and	r25, r21
 d4c:	11 f0       	breq	.+4      	; 0xd52 <__mulsf3+0x1c>
 d4e:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__fp_inf>
 d52:	0c 94 d9 04 	jmp	0x9b2	; 0x9b2 <__fp_nan>
 d56:	11 24       	eor	r1, r1
 d58:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__fp_szero>

00000d5c <__mulsf3x>:
 d5c:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__fp_split3>
 d60:	70 f3       	brcs	.-36     	; 0xd3e <__mulsf3+0x8>

00000d62 <__mulsf3_pse>:
 d62:	95 9f       	mul	r25, r21
 d64:	c1 f3       	breq	.-16     	; 0xd56 <__mulsf3+0x20>
 d66:	95 0f       	add	r25, r21
 d68:	50 e0       	ldi	r21, 0x00	; 0
 d6a:	55 1f       	adc	r21, r21
 d6c:	62 9f       	mul	r22, r18
 d6e:	f0 01       	movw	r30, r0
 d70:	72 9f       	mul	r23, r18
 d72:	bb 27       	eor	r27, r27
 d74:	f0 0d       	add	r31, r0
 d76:	b1 1d       	adc	r27, r1
 d78:	63 9f       	mul	r22, r19
 d7a:	aa 27       	eor	r26, r26
 d7c:	f0 0d       	add	r31, r0
 d7e:	b1 1d       	adc	r27, r1
 d80:	aa 1f       	adc	r26, r26
 d82:	64 9f       	mul	r22, r20
 d84:	66 27       	eor	r22, r22
 d86:	b0 0d       	add	r27, r0
 d88:	a1 1d       	adc	r26, r1
 d8a:	66 1f       	adc	r22, r22
 d8c:	82 9f       	mul	r24, r18
 d8e:	22 27       	eor	r18, r18
 d90:	b0 0d       	add	r27, r0
 d92:	a1 1d       	adc	r26, r1
 d94:	62 1f       	adc	r22, r18
 d96:	73 9f       	mul	r23, r19
 d98:	b0 0d       	add	r27, r0
 d9a:	a1 1d       	adc	r26, r1
 d9c:	62 1f       	adc	r22, r18
 d9e:	83 9f       	mul	r24, r19
 da0:	a0 0d       	add	r26, r0
 da2:	61 1d       	adc	r22, r1
 da4:	22 1f       	adc	r18, r18
 da6:	74 9f       	mul	r23, r20
 da8:	33 27       	eor	r19, r19
 daa:	a0 0d       	add	r26, r0
 dac:	61 1d       	adc	r22, r1
 dae:	23 1f       	adc	r18, r19
 db0:	84 9f       	mul	r24, r20
 db2:	60 0d       	add	r22, r0
 db4:	21 1d       	adc	r18, r1
 db6:	82 2f       	mov	r24, r18
 db8:	76 2f       	mov	r23, r22
 dba:	6a 2f       	mov	r22, r26
 dbc:	11 24       	eor	r1, r1
 dbe:	9f 57       	subi	r25, 0x7F	; 127
 dc0:	50 40       	sbci	r21, 0x00	; 0
 dc2:	9a f0       	brmi	.+38     	; 0xdea <__mulsf3_pse+0x88>
 dc4:	f1 f0       	breq	.+60     	; 0xe02 <__mulsf3_pse+0xa0>
 dc6:	88 23       	and	r24, r24
 dc8:	4a f0       	brmi	.+18     	; 0xddc <__mulsf3_pse+0x7a>
 dca:	ee 0f       	add	r30, r30
 dcc:	ff 1f       	adc	r31, r31
 dce:	bb 1f       	adc	r27, r27
 dd0:	66 1f       	adc	r22, r22
 dd2:	77 1f       	adc	r23, r23
 dd4:	88 1f       	adc	r24, r24
 dd6:	91 50       	subi	r25, 0x01	; 1
 dd8:	50 40       	sbci	r21, 0x00	; 0
 dda:	a9 f7       	brne	.-22     	; 0xdc6 <__mulsf3_pse+0x64>
 ddc:	9e 3f       	cpi	r25, 0xFE	; 254
 dde:	51 05       	cpc	r21, r1
 de0:	80 f0       	brcs	.+32     	; 0xe02 <__mulsf3_pse+0xa0>
 de2:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__fp_inf>
 de6:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__fp_szero>
 dea:	5f 3f       	cpi	r21, 0xFF	; 255
 dec:	e4 f3       	brlt	.-8      	; 0xde6 <__mulsf3_pse+0x84>
 dee:	98 3e       	cpi	r25, 0xE8	; 232
 df0:	d4 f3       	brlt	.-12     	; 0xde6 <__mulsf3_pse+0x84>
 df2:	86 95       	lsr	r24
 df4:	77 95       	ror	r23
 df6:	67 95       	ror	r22
 df8:	b7 95       	ror	r27
 dfa:	f7 95       	ror	r31
 dfc:	e7 95       	ror	r30
 dfe:	9f 5f       	subi	r25, 0xFF	; 255
 e00:	c1 f7       	brne	.-16     	; 0xdf2 <__mulsf3_pse+0x90>
 e02:	fe 2b       	or	r31, r30
 e04:	88 0f       	add	r24, r24
 e06:	91 1d       	adc	r25, r1
 e08:	96 95       	lsr	r25
 e0a:	87 95       	ror	r24
 e0c:	97 f9       	bld	r25, 7
 e0e:	08 95       	ret

00000e10 <__fp_mpack>:
 e10:	9f 3f       	cpi	r25, 0xFF	; 255
 e12:	31 f0       	breq	.+12     	; 0xe20 <__fp_mpack_finite+0xc>

00000e14 <__fp_mpack_finite>:
 e14:	91 50       	subi	r25, 0x01	; 1
 e16:	20 f4       	brcc	.+8      	; 0xe20 <__fp_mpack_finite+0xc>
 e18:	87 95       	ror	r24
 e1a:	77 95       	ror	r23
 e1c:	67 95       	ror	r22
 e1e:	b7 95       	ror	r27
 e20:	88 0f       	add	r24, r24
 e22:	91 1d       	adc	r25, r1
 e24:	96 95       	lsr	r25
 e26:	87 95       	ror	r24
 e28:	97 f9       	bld	r25, 7
 e2a:	08 95       	ret

00000e2c <_exit>:
 e2c:	f8 94       	cli

00000e2e <__stop_program>:
 e2e:	ff cf       	rjmp	.-2      	; 0xe2e <__stop_program>
