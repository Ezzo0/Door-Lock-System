
MCU_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000011f4  00001288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002d  00800074  00800074  0000129c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000129c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000012cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a06  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b96  00000000  00000000  00002f76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000128a  00000000  00000000  00003b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e4  00000000  00000000  00004d98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000882  00000000  00000000  0000527c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a97  00000000  00000000  00005afe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  00006595  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__vector_5>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 35 04 	jmp	0x86a	; 0x86a <__vector_11>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <TWI_init+0x4>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d8 e0       	ldi	r29, 0x08	; 8
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	10 e0       	ldi	r17, 0x00	; 0
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	e4 ef       	ldi	r30, 0xF4	; 244
      ea:	f1 e1       	ldi	r31, 0x11	; 17
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	a4 37       	cpi	r26, 0x74	; 116
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	a4 e7       	ldi	r26, 0x74	; 116
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	a1 3a       	cpi	r26, 0xA1	; 161
     104:	b2 07       	cpc	r27, r18
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <main>
     10c:	0c 94 f8 08 	jmp	0x11f0	; 0x11f0 <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <app_init>:
// Variable to indicate the state of the alert
uint8_t alert_on = 0;


void app_init(){
	UART_init();
     114:	0e 94 17 05 	call	0xa2e	; 0xa2e <UART_init>
	EEPROM_init();
     118:	0e 94 44 01 	call	0x288	; 0x288 <EEPROM_init>
	motor_init();
     11c:	0e 94 87 01 	call	0x30e	; 0x30e <motor_init>
	DIO_init(port_D,PIN_6,OUT);
     120:	41 e0       	ldi	r20, 0x01	; 1
     122:	66 e0       	ldi	r22, 0x06	; 6
     124:	84 e4       	ldi	r24, 0x44	; 68
     126:	0e 94 ef 01 	call	0x3de	; 0x3de <DIO_init>
	DIO_init(port_D,PIN_7,OUT);
     12a:	41 e0       	ldi	r20, 0x01	; 1
     12c:	67 e0       	ldi	r22, 0x07	; 7
     12e:	84 e4       	ldi	r24, 0x44	; 68
     130:	0e 94 ef 01 	call	0x3de	; 0x3de <DIO_init>
	
	// Global interrupts activation
	enable_global_interrupts();
     134:	0e 94 1a 03 	call	0x634	; 0x634 <enable_global_interrupts>
	
	// Timer_2 interrupt activation
	timer2_enable_overflow_interrupt();
     138:	0e 94 1e 03 	call	0x63c	; 0x63c <timer2_enable_overflow_interrupt>
	
	// Timers mode selection
	timer2_select_mode(normal);
     13c:	8e e6       	ldi	r24, 0x6E	; 110
     13e:	0e 94 26 03 	call	0x64c	; 0x64c <timer2_select_mode>
	
	// Timers initial value
	timer2_set_initial_value(Timer_initial_value);
     142:	8b e0       	ldi	r24, 0x0B	; 11
     144:	0e 94 3f 03 	call	0x67e	; 0x67e <timer2_set_initial_value>
	
	// Timer_0 interrupt activation
	timer0_enable_overflow_interrupt();
     148:	0e 94 22 03 	call	0x644	; 0x644 <timer0_enable_overflow_interrupt>
	TIMER_0_init();
     14c:	0e 94 aa 03 	call	0x754	; 0x754 <TIMER_0_init>
     150:	08 95       	ret

00000152 <reset_pass_array>:
}


void reset_pass_array()
{
	for(uint8_t i=0; i<17; i++){
     152:	20 e0       	ldi	r18, 0x00	; 0
     154:	0b c0       	rjmp	.+22     	; 0x16c <reset_pass_array+0x1a>
		pass_recieve_cmpr[i] = '\0';
     156:	82 2f       	mov	r24, r18
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	fc 01       	movw	r30, r24
     15c:	e9 58       	subi	r30, 0x89	; 137
     15e:	ff 4f       	sbci	r31, 0xFF	; 255
     160:	10 82       	st	Z, r1
		pass_recieve_save[i] = '\0';
     162:	fc 01       	movw	r30, r24
     164:	e8 57       	subi	r30, 0x78	; 120
     166:	ff 4f       	sbci	r31, 0xFF	; 255
     168:	10 82       	st	Z, r1
}


void reset_pass_array()
{
	for(uint8_t i=0; i<17; i++){
     16a:	2f 5f       	subi	r18, 0xFF	; 255
     16c:	21 31       	cpi	r18, 0x11	; 17
     16e:	98 f3       	brcs	.-26     	; 0x156 <reset_pass_array+0x4>
		pass_recieve_cmpr[i] = '\0';
		pass_recieve_save[i] = '\0';
	}
}
     170:	08 95       	ret

00000172 <compare_incoming_pass>:

void compare_incoming_pass()
{
	UART_receiveString(pass_recieve_cmpr);
     172:	87 e7       	ldi	r24, 0x77	; 119
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	0e 94 2e 05 	call	0xa5c	; 0xa5c <UART_receiveString>
	EEPROM_read_string(pass_recieve_save);
     17a:	88 e8       	ldi	r24, 0x88	; 136
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 65 01 	call	0x2ca	; 0x2ca <EEPROM_read_string>
	
	// pass_match is set to a default value of 1. the value will be 0 only if there is a different character in the for loop
	for(uint8_t i=0; i<16; i++){
     182:	20 e0       	ldi	r18, 0x00	; 0
     184:	0e c0       	rjmp	.+28     	; 0x1a2 <compare_incoming_pass+0x30>
		if(pass_recieve_save[i] != pass_recieve_cmpr[i]){
     186:	82 2f       	mov	r24, r18
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	fc 01       	movw	r30, r24
     18c:	e8 57       	subi	r30, 0x78	; 120
     18e:	ff 4f       	sbci	r31, 0xFF	; 255
     190:	30 81       	ld	r19, Z
     192:	fc 01       	movw	r30, r24
     194:	e9 58       	subi	r30, 0x89	; 137
     196:	ff 4f       	sbci	r31, 0xFF	; 255
     198:	80 81       	ld	r24, Z
     19a:	38 13       	cpse	r19, r24
			pass_match = 0;
     19c:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <pass_match>
{
	UART_receiveString(pass_recieve_cmpr);
	EEPROM_read_string(pass_recieve_save);
	
	// pass_match is set to a default value of 1. the value will be 0 only if there is a different character in the for loop
	for(uint8_t i=0; i<16; i++){
     1a0:	2f 5f       	subi	r18, 0xFF	; 255
     1a2:	20 31       	cpi	r18, 0x10	; 16
     1a4:	80 f3       	brcs	.-32     	; 0x186 <compare_incoming_pass+0x14>
			pass_match = 0;
		}
	}
	
	// send pass_match flag to MCU_1 through UART
	UART_transmit(pass_match);
     1a6:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <pass_match>
     1aa:	0e 94 26 05 	call	0xa4c	; 0xa4c <UART_transmit>
     1ae:	08 95       	ret

000001b0 <set_new_pass>:
}

void set_new_pass()
{
	// receive password string from MCU_1 through UART
	UART_receiveString(pass_recieve_save);
     1b0:	88 e8       	ldi	r24, 0x88	; 136
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0e 94 2e 05 	call	0xa5c	; 0xa5c <UART_receiveString>
	
	// store the received password in the EEPROM through the I2C (TWI)
	EEPROM_write_string(pass_recieve_save);
     1b8:	88 e8       	ldi	r24, 0x88	; 136
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	0e 94 47 01 	call	0x28e	; 0x28e <EEPROM_write_string>
     1c0:	08 95       	ret

000001c2 <app_start>:
void app_start()
{
	while(1){
		
		// setting pass_match to 1 every iteration start
		pass_match = 1;
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <pass_match>
		
		// receive pass_check from MCU_1 (internal EEPROM)
		pass_check = UART_receive();
     1c8:	0e 94 2a 05 	call	0xa54	; 0xa54 <UART_receive>
     1cc:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <pass_check>
		
		
		if(pass_check == Password_was_entered)
     1d0:	81 30       	cpi	r24, 0x01	; 1
     1d2:	09 f0       	breq	.+2      	; 0x1d6 <app_start+0x14>
     1d4:	51 c0       	rjmp	.+162    	; 0x278 <app_start+0xb6>
		{
			// received choosed_option from MCU_1
			chs_opt = UART_receive();
     1d6:	0e 94 2a 05 	call	0xa54	; 0xa54 <UART_receive>
     1da:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <chs_opt>
			
			if(chs_opt == Choosed)
     1de:	81 30       	cpi	r24, 0x01	; 1
     1e0:	81 f7       	brne	.-32     	; 0x1c2 <app_start>
			{
				// clearing pass_recieve_cmpr & pass_recieve_save
				reset_pass_array();
     1e2:	0e 94 a9 00 	call	0x152	; 0x152 <reset_pass_array>
				
				// received option from MCU_1
				opt = UART_receive();
     1e6:	0e 94 2a 05 	call	0xa54	; 0xa54 <UART_receive>
     1ea:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <opt>
				
				// compare pass_recieve_cmpr & pass_recieve_save
				compare_incoming_pass();
     1ee:	0e 94 b9 00 	call	0x172	; 0x172 <compare_incoming_pass>
				
				if(pass_match)
     1f2:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <pass_match>
     1f6:	88 23       	and	r24, r24
     1f8:	39 f1       	breq	.+78     	; 0x248 <app_start+0x86>
				{
					if(alert_on)
     1fa:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
     1fe:	88 23       	and	r24, r24
     200:	71 f0       	breq	.+28     	; 0x21e <app_start+0x5c>
					{
						timer2_timer_stop();
     202:	0e 94 76 03 	call	0x6ec	; 0x6ec <timer2_timer_stop>
						DIO_write(port_D,PIN_7,LOW);
     206:	40 e0       	ldi	r20, 0x00	; 0
     208:	67 e0       	ldi	r22, 0x07	; 7
     20a:	84 e4       	ldi	r24, 0x44	; 68
     20c:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_write>
						DIO_write(port_D,PIN_6,LOW);
     210:	40 e0       	ldi	r20, 0x00	; 0
     212:	66 e0       	ldi	r22, 0x06	; 6
     214:	84 e4       	ldi	r24, 0x44	; 68
     216:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_write>
						alert_on = 0;
     21a:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
					}
					
					if(opt == First_option)
     21e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <opt>
     222:	81 33       	cpi	r24, 0x31	; 49
     224:	19 f4       	brne	.+6      	; 0x22c <app_start+0x6a>
					{
						// opening the door
						motor_response();
     226:	0e 94 c7 01 	call	0x38e	; 0x38e <motor_response>
     22a:	cb cf       	rjmp	.-106    	; 0x1c2 <app_start>
					}
					else if(opt == Second_option)
     22c:	82 33       	cpi	r24, 0x32	; 50
     22e:	49 f6       	brne	.-110    	; 0x1c2 <app_start>
					{
						// delete old password in the EEPROM (reset)
						EEPROM_write_string(clr);
     230:	80 e6       	ldi	r24, 0x60	; 96
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	0e 94 47 01 	call	0x28e	; 0x28e <EEPROM_write_string>
						
						reset_pass_array();
     238:	0e 94 a9 00 	call	0x152	; 0x152 <reset_pass_array>
						
						// store the new password in the EEPROM
						set_new_pass();
     23c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <set_new_pass>
						
						// Sending the guaranteed matched value to prevent first_option() function in APP_1 from waiting forever for the value
						UART_transmit(Matched);
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	0e 94 26 05 	call	0xa4c	; 0xa4c <UART_transmit>
     246:	bd cf       	rjmp	.-134    	; 0x1c2 <app_start>
					}
				}
				else
				{
					// receive wrong_password count from MCU_1 through UART
					wrong_pass = UART_receive();
     248:	0e 94 2a 05 	call	0xa54	; 0xa54 <UART_receive>
     24c:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <wrong_pass>
					if(wrong_pass >= 3 && !alert_on)
     250:	83 30       	cpi	r24, 0x03	; 3
     252:	08 f4       	brcc	.+2      	; 0x256 <app_start+0x94>
     254:	b6 cf       	rjmp	.-148    	; 0x1c2 <app_start>
     256:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
     25a:	81 11       	cpse	r24, r1
     25c:	b2 cf       	rjmp	.-156    	; 0x1c2 <app_start>
					{
						// starting timer to make the led blink each overflow
						timer2_timer_start(Timer_prescalar);
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	94 e0       	ldi	r25, 0x04	; 4
     262:	0e 94 41 03 	call	0x682	; 0x682 <timer2_timer_start>
						
						// turning on the buzzer
						DIO_write(port_D,PIN_7,HIGH);
     266:	41 e0       	ldi	r20, 0x01	; 1
     268:	67 e0       	ldi	r22, 0x07	; 7
     26a:	84 e4       	ldi	r24, 0x44	; 68
     26c:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_write>
						
						// setting alarm_on value
						alert_on = 1;
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
     276:	a5 cf       	rjmp	.-182    	; 0x1c2 <app_start>
					}
				}
			}

		}
		else if(pass_check == Password_was_not_entered)
     278:	8f 3f       	cpi	r24, 0xFF	; 255
     27a:	09 f0       	breq	.+2      	; 0x27e <app_start+0xbc>
     27c:	a2 cf       	rjmp	.-188    	; 0x1c2 <app_start>
		{
			// if it is the first time the system boots, the user will enter the first password
			set_new_pass();
     27e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <set_new_pass>
			reset_pass_array();
     282:	0e 94 a9 00 	call	0x152	; 0x152 <reset_pass_array>
     286:	9d cf       	rjmp	.-198    	; 0x1c2 <app_start>

00000288 <EEPROM_init>:
	// reading data from the EEPORM
	TWI_read_nack(*data);
	
	// generating stop condition
	TWI_stop();
}
     288:	0e 94 66 04 	call	0x8cc	; 0x8cc <TWI_init>
     28c:	08 95       	ret

0000028e <EEPROM_write_string>:

void EEPROM_write_string(uint8_t *data)
{
     28e:	0f 93       	push	r16
     290:	1f 93       	push	r17
     292:	cf 93       	push	r28
     294:	8c 01       	movw	r16, r24
	TWI_start(0b10100110+Write);
     296:	86 ea       	ldi	r24, 0xA6	; 166
     298:	0e 94 86 04 	call	0x90c	; 0x90c <TWI_start>
	TWI_write_addr(0x00);
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	0e 94 9d 04 	call	0x93a	; 0x93a <TWI_write_addr>
	TWI_write_addr(0x00);
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	0e 94 9d 04 	call	0x93a	; 0x93a <TWI_write_addr>
	
	// writing data up to 16 characters
	for(uint8_t i=0; i<16; i++){
     2a8:	c0 e0       	ldi	r28, 0x00	; 0
     2aa:	07 c0       	rjmp	.+14     	; 0x2ba <EEPROM_write_string+0x2c>
		TWI_write_data(*(data+i));
     2ac:	f8 01       	movw	r30, r16
     2ae:	ec 0f       	add	r30, r28
     2b0:	f1 1d       	adc	r31, r1
     2b2:	80 81       	ld	r24, Z
     2b4:	0e 94 a8 04 	call	0x950	; 0x950 <TWI_write_data>
	TWI_start(0b10100110+Write);
	TWI_write_addr(0x00);
	TWI_write_addr(0x00);
	
	// writing data up to 16 characters
	for(uint8_t i=0; i<16; i++){
     2b8:	cf 5f       	subi	r28, 0xFF	; 255
     2ba:	c0 31       	cpi	r28, 0x10	; 16
     2bc:	b8 f3       	brcs	.-18     	; 0x2ac <EEPROM_write_string+0x1e>
		TWI_write_data(*(data+i));
	}
	
	TWI_stop();
     2be:	0e 94 c3 04 	call	0x986	; 0x986 <TWI_stop>
}
     2c2:	cf 91       	pop	r28
     2c4:	1f 91       	pop	r17
     2c6:	0f 91       	pop	r16
     2c8:	08 95       	ret

000002ca <EEPROM_read_string>:

void EEPROM_read_string(uint8_t *data)
{
     2ca:	0f 93       	push	r16
     2cc:	1f 93       	push	r17
     2ce:	cf 93       	push	r28
     2d0:	8c 01       	movw	r16, r24
	TWI_start(0b10100110+Write);
     2d2:	86 ea       	ldi	r24, 0xA6	; 166
     2d4:	0e 94 86 04 	call	0x90c	; 0x90c <TWI_start>
	TWI_write_addr(0x00);
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	0e 94 9d 04 	call	0x93a	; 0x93a <TWI_write_addr>
	TWI_write_addr(0x00);
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	0e 94 9d 04 	call	0x93a	; 0x93a <TWI_write_addr>
	TWI_stop();
     2e4:	0e 94 c3 04 	call	0x986	; 0x986 <TWI_stop>
	TWI_start(0b10100110+Read);
     2e8:	87 ea       	ldi	r24, 0xA7	; 167
     2ea:	0e 94 86 04 	call	0x90c	; 0x90c <TWI_start>
	
	// reading data up to 16 characters
	for(uint8_t i=0; i<16; i++){
     2ee:	c0 e0       	ldi	r28, 0x00	; 0
     2f0:	06 c0       	rjmp	.+12     	; 0x2fe <EEPROM_read_string+0x34>
		TWI_read_ack(data+i);
     2f2:	c8 01       	movw	r24, r16
     2f4:	8c 0f       	add	r24, r28
     2f6:	91 1d       	adc	r25, r1
     2f8:	0e 94 b3 04 	call	0x966	; 0x966 <TWI_read_ack>
	TWI_write_addr(0x00);
	TWI_stop();
	TWI_start(0b10100110+Read);
	
	// reading data up to 16 characters
	for(uint8_t i=0; i<16; i++){
     2fc:	cf 5f       	subi	r28, 0xFF	; 255
     2fe:	c0 31       	cpi	r28, 0x10	; 16
     300:	c0 f3       	brcs	.-16     	; 0x2f2 <EEPROM_read_string+0x28>
		TWI_read_ack(data+i);
	}
	
	TWI_stop();
     302:	0e 94 c3 04 	call	0x986	; 0x986 <TWI_stop>
}
     306:	cf 91       	pop	r28
     308:	1f 91       	pop	r17
     30a:	0f 91       	pop	r16
     30c:	08 95       	ret

0000030e <motor_init>:
 */ 
#include "motor.h"

void motor_init()
{
	DIO_init(port_B,enable_pin,OUT);
     30e:	41 e0       	ldi	r20, 0x01	; 1
     310:	65 e0       	ldi	r22, 0x05	; 5
     312:	82 e4       	ldi	r24, 0x42	; 66
     314:	0e 94 ef 01 	call	0x3de	; 0x3de <DIO_init>
	DIO_init(port_B,cw_pin,OUT);
     318:	41 e0       	ldi	r20, 0x01	; 1
     31a:	66 e0       	ldi	r22, 0x06	; 6
     31c:	82 e4       	ldi	r24, 0x42	; 66
     31e:	0e 94 ef 01 	call	0x3de	; 0x3de <DIO_init>
	DIO_init(port_B,PIN_7,OUT);
     322:	41 e0       	ldi	r20, 0x01	; 1
     324:	67 e0       	ldi	r22, 0x07	; 7
     326:	82 e4       	ldi	r24, 0x42	; 66
     328:	0e 94 ef 01 	call	0x3de	; 0x3de <DIO_init>
     32c:	08 95       	ret

0000032e <motor_turn_cw>:
}

void motor_turn_cw()
{
	DIO_write(port_B,enable_pin,HIGH);
     32e:	41 e0       	ldi	r20, 0x01	; 1
     330:	65 e0       	ldi	r22, 0x05	; 5
     332:	82 e4       	ldi	r24, 0x42	; 66
     334:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_write>
	DIO_write(port_B,cw_pin,HIGH);
     338:	41 e0       	ldi	r20, 0x01	; 1
     33a:	66 e0       	ldi	r22, 0x06	; 6
     33c:	82 e4       	ldi	r24, 0x42	; 66
     33e:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_write>
	DIO_write(port_B,acw_pin,LOW);
     342:	40 e0       	ldi	r20, 0x00	; 0
     344:	67 e0       	ldi	r22, 0x07	; 7
     346:	82 e4       	ldi	r24, 0x42	; 66
     348:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_write>
     34c:	08 95       	ret

0000034e <motor_turn_anti_cw>:
}

void motor_turn_anti_cw()
{
	DIO_write(port_B,enable_pin,HIGH);
     34e:	41 e0       	ldi	r20, 0x01	; 1
     350:	65 e0       	ldi	r22, 0x05	; 5
     352:	82 e4       	ldi	r24, 0x42	; 66
     354:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_write>
	DIO_write(port_B,cw_pin,LOW);
     358:	40 e0       	ldi	r20, 0x00	; 0
     35a:	66 e0       	ldi	r22, 0x06	; 6
     35c:	82 e4       	ldi	r24, 0x42	; 66
     35e:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_write>
	DIO_write(port_B,acw_pin,HIGH);
     362:	41 e0       	ldi	r20, 0x01	; 1
     364:	67 e0       	ldi	r22, 0x07	; 7
     366:	82 e4       	ldi	r24, 0x42	; 66
     368:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_write>
     36c:	08 95       	ret

0000036e <motor_brake>:
}

void motor_brake()
{
	DIO_write(port_B,enable_pin,HIGH);
     36e:	41 e0       	ldi	r20, 0x01	; 1
     370:	65 e0       	ldi	r22, 0x05	; 5
     372:	82 e4       	ldi	r24, 0x42	; 66
     374:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_write>
	DIO_write(port_B,cw_pin,HIGH);
     378:	41 e0       	ldi	r20, 0x01	; 1
     37a:	66 e0       	ldi	r22, 0x06	; 6
     37c:	82 e4       	ldi	r24, 0x42	; 66
     37e:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_write>
	DIO_write(port_B,acw_pin,HIGH);
     382:	41 e0       	ldi	r20, 0x01	; 1
     384:	67 e0       	ldi	r22, 0x07	; 7
     386:	82 e4       	ldi	r24, 0x42	; 66
     388:	0e 94 69 02 	call	0x4d2	; 0x4d2 <DIO_write>
     38c:	08 95       	ret

0000038e <motor_response>:
}

void motor_response()
{
	TIMER_0_delay(1000);
     38e:	60 e0       	ldi	r22, 0x00	; 0
     390:	70 e0       	ldi	r23, 0x00	; 0
     392:	8a e7       	ldi	r24, 0x7A	; 122
     394:	94 e4       	ldi	r25, 0x44	; 68
     396:	0e 94 2a 04 	call	0x854	; 0x854 <TIMER_0_delay>
	motor_turn_cw();
     39a:	0e 94 97 01 	call	0x32e	; 0x32e <motor_turn_cw>
	TIMER_0_delay(1500);
     39e:	60 e0       	ldi	r22, 0x00	; 0
     3a0:	70 e8       	ldi	r23, 0x80	; 128
     3a2:	8b eb       	ldi	r24, 0xBB	; 187
     3a4:	94 e4       	ldi	r25, 0x44	; 68
     3a6:	0e 94 2a 04 	call	0x854	; 0x854 <TIMER_0_delay>
	motor_brake();
     3aa:	0e 94 b7 01 	call	0x36e	; 0x36e <motor_brake>
	TIMER_0_delay(1500);
     3ae:	60 e0       	ldi	r22, 0x00	; 0
     3b0:	70 e8       	ldi	r23, 0x80	; 128
     3b2:	8b eb       	ldi	r24, 0xBB	; 187
     3b4:	94 e4       	ldi	r25, 0x44	; 68
     3b6:	0e 94 2a 04 	call	0x854	; 0x854 <TIMER_0_delay>
	motor_turn_anti_cw();
     3ba:	0e 94 a7 01 	call	0x34e	; 0x34e <motor_turn_anti_cw>
	TIMER_0_delay(2000);
     3be:	60 e0       	ldi	r22, 0x00	; 0
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	8a ef       	ldi	r24, 0xFA	; 250
     3c4:	94 e4       	ldi	r25, 0x44	; 68
     3c6:	0e 94 2a 04 	call	0x854	; 0x854 <TIMER_0_delay>
	motor_brake();
     3ca:	0e 94 b7 01 	call	0x36e	; 0x36e <motor_brake>
     3ce:	08 95       	ret

000003d0 <main>:



int main(void)
{
	app_init();
     3d0:	0e 94 8a 00 	call	0x114	; 0x114 <app_init>
	app_start();
     3d4:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <app_start>

	
}
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	08 95       	ret

000003de <DIO_init>:

#include "DIO_2.h"

void DIO_init(uint8_t portnum,uint8_t pinnum, uint8_t direction)
{
	switch(portnum)
     3de:	82 34       	cpi	r24, 0x42	; 66
     3e0:	31 f1       	breq	.+76     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     3e2:	18 f4       	brcc	.+6      	; 0x3ea <DIO_init+0xc>
     3e4:	81 34       	cpi	r24, 0x41	; 65
     3e6:	39 f0       	breq	.+14     	; 0x3f6 <DIO_init+0x18>
     3e8:	08 95       	ret
     3ea:	83 34       	cpi	r24, 0x43	; 67
     3ec:	e1 f1       	breq	.+120    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
     3ee:	84 34       	cpi	r24, 0x44	; 68
     3f0:	09 f4       	brne	.+2      	; 0x3f4 <DIO_init+0x16>
     3f2:	54 c0       	rjmp	.+168    	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
     3f4:	08 95       	ret
	{
		case port_A:
			if(direction == IN)
     3f6:	41 11       	cpse	r20, r1
     3f8:	0c c0       	rjmp	.+24     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
				clr_pin(DDRA,pinnum); // Make pin number (pinnum) in port A an input pin
     3fa:	2a b3       	in	r18, 0x1a	; 26
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	02 c0       	rjmp	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     402:	88 0f       	add	r24, r24
     404:	99 1f       	adc	r25, r25
     406:	6a 95       	dec	r22
     408:	e2 f7       	brpl	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     40a:	80 95       	com	r24
     40c:	82 23       	and	r24, r18
     40e:	8a bb       	out	0x1a, r24	; 26
     410:	08 95       	ret
			
			else if(direction == OUT)
     412:	41 30       	cpi	r20, 0x01	; 1
     414:	09 f0       	breq	.+2      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     416:	5c c0       	rjmp	.+184    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
				set_pin(DDRA,pinnum);	// Make pin number (pinnum) in port A an output pin
     418:	2a b3       	in	r18, 0x1a	; 26
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	02 c0       	rjmp	.+4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     420:	88 0f       	add	r24, r24
     422:	99 1f       	adc	r25, r25
     424:	6a 95       	dec	r22
     426:	e2 f7       	brpl	.-8      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
     428:	82 2b       	or	r24, r18
     42a:	8a bb       	out	0x1a, r24	; 26
     42c:	08 95       	ret
				//Error Handling
			}
		break;
		
		case port_B:
			if(direction == IN)
     42e:	41 11       	cpse	r20, r1
     430:	0c c0       	rjmp	.+24     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
				clr_pin(DDRB,pinnum); // Make pin number (pinnum) in port B an input pin
     432:	27 b3       	in	r18, 0x17	; 23
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	02 c0       	rjmp	.+4      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
     43a:	88 0f       	add	r24, r24
     43c:	99 1f       	adc	r25, r25
     43e:	6a 95       	dec	r22
     440:	e2 f7       	brpl	.-8      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
     442:	80 95       	com	r24
     444:	82 23       	and	r24, r18
     446:	87 bb       	out	0x17, r24	; 23
     448:	08 95       	ret
			
			else if(direction == OUT)
     44a:	41 30       	cpi	r20, 0x01	; 1
     44c:	09 f0       	breq	.+2      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
     44e:	40 c0       	rjmp	.+128    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
				set_pin(DDRB,pinnum);	// Make pin number (pinnum) in port B an output pin
     450:	27 b3       	in	r18, 0x17	; 23
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	02 c0       	rjmp	.+4      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
     458:	88 0f       	add	r24, r24
     45a:	99 1f       	adc	r25, r25
     45c:	6a 95       	dec	r22
     45e:	e2 f7       	brpl	.-8      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
     460:	82 2b       	or	r24, r18
     462:	87 bb       	out	0x17, r24	; 23
     464:	08 95       	ret
				//Error Handling
			}
		break;
		
		case port_C:
			if(direction == IN)
     466:	41 11       	cpse	r20, r1
     468:	0c c0       	rjmp	.+24     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
				clr_pin(DDRC,pinnum); // Make pin number (pinnum) in port C an input pin
     46a:	24 b3       	in	r18, 0x14	; 20
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	02 c0       	rjmp	.+4      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
     472:	88 0f       	add	r24, r24
     474:	99 1f       	adc	r25, r25
     476:	6a 95       	dec	r22
     478:	e2 f7       	brpl	.-8      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
     47a:	80 95       	com	r24
     47c:	82 23       	and	r24, r18
     47e:	84 bb       	out	0x14, r24	; 20
     480:	08 95       	ret
		
			else if(direction == OUT)
     482:	41 30       	cpi	r20, 0x01	; 1
     484:	29 f5       	brne	.+74     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
				set_pin(DDRC,pinnum);	// Make pin number (pinnum) in port C an output pin
     486:	24 b3       	in	r18, 0x14	; 20
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	02 c0       	rjmp	.+4      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
     48e:	88 0f       	add	r24, r24
     490:	99 1f       	adc	r25, r25
     492:	6a 95       	dec	r22
     494:	e2 f7       	brpl	.-8      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
     496:	82 2b       	or	r24, r18
     498:	84 bb       	out	0x14, r24	; 20
     49a:	08 95       	ret
				//Error Handling
			}
		break;
		
		case port_D:
			if(direction == IN)
     49c:	41 11       	cpse	r20, r1
     49e:	0c c0       	rjmp	.+24     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
				clr_pin(DDRD,pinnum); // Make pin number (pinnum) in port D an input pin
     4a0:	21 b3       	in	r18, 0x11	; 17
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	02 c0       	rjmp	.+4      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
     4a8:	88 0f       	add	r24, r24
     4aa:	99 1f       	adc	r25, r25
     4ac:	6a 95       	dec	r22
     4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
     4b0:	80 95       	com	r24
     4b2:	82 23       	and	r24, r18
     4b4:	81 bb       	out	0x11, r24	; 17
     4b6:	08 95       	ret
		
			else if(direction == OUT)
     4b8:	41 30       	cpi	r20, 0x01	; 1
     4ba:	51 f4       	brne	.+20     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
				set_pin(DDRD,pinnum);	// Make pin number (pinnum) in port D an input pin
     4bc:	21 b3       	in	r18, 0x11	; 17
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
     4c4:	88 0f       	add	r24, r24
     4c6:	99 1f       	adc	r25, r25
     4c8:	6a 95       	dec	r22
     4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
     4cc:	82 2b       	or	r24, r18
     4ce:	81 bb       	out	0x11, r24	; 17
     4d0:	08 95       	ret

000004d2 <DIO_write>:
	}
}

void DIO_write(uint8_t portnum,uint8_t pinnum, uint8_t value)
{
	switch(portnum)
     4d2:	82 34       	cpi	r24, 0x42	; 66
     4d4:	31 f1       	breq	.+76     	; 0x522 <DIO_write+0x50>
     4d6:	18 f4       	brcc	.+6      	; 0x4de <DIO_write+0xc>
     4d8:	81 34       	cpi	r24, 0x41	; 65
     4da:	39 f0       	breq	.+14     	; 0x4ea <DIO_write+0x18>
     4dc:	08 95       	ret
     4de:	83 34       	cpi	r24, 0x43	; 67
     4e0:	e1 f1       	breq	.+120    	; 0x55a <DIO_write+0x88>
     4e2:	84 34       	cpi	r24, 0x44	; 68
     4e4:	09 f4       	brne	.+2      	; 0x4e8 <DIO_write+0x16>
     4e6:	54 c0       	rjmp	.+168    	; 0x590 <DIO_write+0xbe>
     4e8:	08 95       	ret
	{
		case port_A:
			if(value == LOW)
     4ea:	41 11       	cpse	r20, r1
     4ec:	0c c0       	rjmp	.+24     	; 0x506 <DIO_write+0x34>
				clr_pin(PORTA,pinnum); // make pin number (pinnum) in port A has a value of 0
     4ee:	2b b3       	in	r18, 0x1b	; 27
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	02 c0       	rjmp	.+4      	; 0x4fa <DIO_write+0x28>
     4f6:	88 0f       	add	r24, r24
     4f8:	99 1f       	adc	r25, r25
     4fa:	6a 95       	dec	r22
     4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <DIO_write+0x24>
     4fe:	80 95       	com	r24
     500:	82 23       	and	r24, r18
     502:	8b bb       	out	0x1b, r24	; 27
     504:	08 95       	ret
			
			else if(value == HIGH)
     506:	41 30       	cpi	r20, 0x01	; 1
     508:	09 f0       	breq	.+2      	; 0x50c <DIO_write+0x3a>
     50a:	5c c0       	rjmp	.+184    	; 0x5c4 <DIO_write+0xf2>
				set_pin(PORTA,pinnum); // make pin number (pinnum) in port A has a value of 1
     50c:	2b b3       	in	r18, 0x1b	; 27
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	02 c0       	rjmp	.+4      	; 0x518 <DIO_write+0x46>
     514:	88 0f       	add	r24, r24
     516:	99 1f       	adc	r25, r25
     518:	6a 95       	dec	r22
     51a:	e2 f7       	brpl	.-8      	; 0x514 <DIO_write+0x42>
     51c:	82 2b       	or	r24, r18
     51e:	8b bb       	out	0x1b, r24	; 27
     520:	08 95       	ret
				//Error Handling
			}
		break;
		
		case port_B:
			if(value == LOW)
     522:	41 11       	cpse	r20, r1
     524:	0c c0       	rjmp	.+24     	; 0x53e <DIO_write+0x6c>
				clr_pin(PORTB,pinnum); // make pin number (pinnum) in port B has a value of 0
     526:	28 b3       	in	r18, 0x18	; 24
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	02 c0       	rjmp	.+4      	; 0x532 <DIO_write+0x60>
     52e:	88 0f       	add	r24, r24
     530:	99 1f       	adc	r25, r25
     532:	6a 95       	dec	r22
     534:	e2 f7       	brpl	.-8      	; 0x52e <DIO_write+0x5c>
     536:	80 95       	com	r24
     538:	82 23       	and	r24, r18
     53a:	88 bb       	out	0x18, r24	; 24
     53c:	08 95       	ret
		
			else if(value == HIGH)
     53e:	41 30       	cpi	r20, 0x01	; 1
     540:	09 f0       	breq	.+2      	; 0x544 <DIO_write+0x72>
     542:	40 c0       	rjmp	.+128    	; 0x5c4 <DIO_write+0xf2>
				set_pin(PORTB,pinnum); // make pin number (pinnum) in port B has a value of 1
     544:	28 b3       	in	r18, 0x18	; 24
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	02 c0       	rjmp	.+4      	; 0x550 <DIO_write+0x7e>
     54c:	88 0f       	add	r24, r24
     54e:	99 1f       	adc	r25, r25
     550:	6a 95       	dec	r22
     552:	e2 f7       	brpl	.-8      	; 0x54c <DIO_write+0x7a>
     554:	82 2b       	or	r24, r18
     556:	88 bb       	out	0x18, r24	; 24
     558:	08 95       	ret
				//Error Handling
			}
		break;
		
		case port_C:
			if(value == LOW)
     55a:	41 11       	cpse	r20, r1
     55c:	0c c0       	rjmp	.+24     	; 0x576 <DIO_write+0xa4>
				clr_pin(PORTC,pinnum); // make pin number (pinnum) in port C has a value of 0
     55e:	25 b3       	in	r18, 0x15	; 21
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	02 c0       	rjmp	.+4      	; 0x56a <DIO_write+0x98>
     566:	88 0f       	add	r24, r24
     568:	99 1f       	adc	r25, r25
     56a:	6a 95       	dec	r22
     56c:	e2 f7       	brpl	.-8      	; 0x566 <DIO_write+0x94>
     56e:	80 95       	com	r24
     570:	82 23       	and	r24, r18
     572:	85 bb       	out	0x15, r24	; 21
     574:	08 95       	ret
		
			else if(value == HIGH)
     576:	41 30       	cpi	r20, 0x01	; 1
     578:	29 f5       	brne	.+74     	; 0x5c4 <DIO_write+0xf2>
				set_pin(PORTC,pinnum); // make pin number (pinnum) in port C has a value of 1
     57a:	25 b3       	in	r18, 0x15	; 21
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	02 c0       	rjmp	.+4      	; 0x586 <DIO_write+0xb4>
     582:	88 0f       	add	r24, r24
     584:	99 1f       	adc	r25, r25
     586:	6a 95       	dec	r22
     588:	e2 f7       	brpl	.-8      	; 0x582 <DIO_write+0xb0>
     58a:	82 2b       	or	r24, r18
     58c:	85 bb       	out	0x15, r24	; 21
     58e:	08 95       	ret
				//Error Handling
			}
		break;
		
		case port_D:
			if(value == LOW)
     590:	41 11       	cpse	r20, r1
     592:	0c c0       	rjmp	.+24     	; 0x5ac <DIO_write+0xda>
				clr_pin(PORTD,pinnum); // make pin number (pinnum) in port D has a value of 0
     594:	22 b3       	in	r18, 0x12	; 18
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	02 c0       	rjmp	.+4      	; 0x5a0 <DIO_write+0xce>
     59c:	88 0f       	add	r24, r24
     59e:	99 1f       	adc	r25, r25
     5a0:	6a 95       	dec	r22
     5a2:	e2 f7       	brpl	.-8      	; 0x59c <DIO_write+0xca>
     5a4:	80 95       	com	r24
     5a6:	82 23       	and	r24, r18
     5a8:	82 bb       	out	0x12, r24	; 18
     5aa:	08 95       	ret
		
			else if(value == HIGH)
     5ac:	41 30       	cpi	r20, 0x01	; 1
     5ae:	51 f4       	brne	.+20     	; 0x5c4 <DIO_write+0xf2>
				set_pin(PORTD,pinnum); // make pin number (pinnum) in port D has a value of 1
     5b0:	22 b3       	in	r18, 0x12	; 18
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	02 c0       	rjmp	.+4      	; 0x5bc <DIO_write+0xea>
     5b8:	88 0f       	add	r24, r24
     5ba:	99 1f       	adc	r25, r25
     5bc:	6a 95       	dec	r22
     5be:	e2 f7       	brpl	.-8      	; 0x5b8 <DIO_write+0xe6>
     5c0:	82 2b       	or	r24, r18
     5c2:	82 bb       	out	0x12, r24	; 18
     5c4:	08 95       	ret

000005c6 <DIO_toggle>:
	}
}

void DIO_toggle(uint8_t portnum,uint8_t pinnum)
{
	switch(portnum)
     5c6:	82 34       	cpi	r24, 0x42	; 66
     5c8:	a1 f0       	breq	.+40     	; 0x5f2 <DIO_toggle+0x2c>
     5ca:	18 f4       	brcc	.+6      	; 0x5d2 <DIO_toggle+0xc>
     5cc:	81 34       	cpi	r24, 0x41	; 65
     5ce:	31 f0       	breq	.+12     	; 0x5dc <DIO_toggle+0x16>
     5d0:	08 95       	ret
     5d2:	83 34       	cpi	r24, 0x43	; 67
     5d4:	c9 f0       	breq	.+50     	; 0x608 <DIO_toggle+0x42>
     5d6:	84 34       	cpi	r24, 0x44	; 68
     5d8:	11 f1       	breq	.+68     	; 0x61e <DIO_toggle+0x58>
     5da:	08 95       	ret
	{
		case port_A:
			tgl_pin(PORTA,pinnum); // toggle pin number (pinnum) in port A
     5dc:	2b b3       	in	r18, 0x1b	; 27
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <DIO_toggle+0x22>
     5e4:	88 0f       	add	r24, r24
     5e6:	99 1f       	adc	r25, r25
     5e8:	6a 95       	dec	r22
     5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <DIO_toggle+0x1e>
     5ec:	82 27       	eor	r24, r18
     5ee:	8b bb       	out	0x1b, r24	; 27
		break;
     5f0:	08 95       	ret
		
		case port_B:
			tgl_pin(PORTB,pinnum); // toggle pin number (pinnum) in port B
     5f2:	28 b3       	in	r18, 0x18	; 24
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	02 c0       	rjmp	.+4      	; 0x5fe <DIO_toggle+0x38>
     5fa:	88 0f       	add	r24, r24
     5fc:	99 1f       	adc	r25, r25
     5fe:	6a 95       	dec	r22
     600:	e2 f7       	brpl	.-8      	; 0x5fa <DIO_toggle+0x34>
     602:	82 27       	eor	r24, r18
     604:	88 bb       	out	0x18, r24	; 24
		break;
     606:	08 95       	ret
		
		case port_C:
			tgl_pin(PORTC,pinnum); // toggle pin number (pinnum) in port C
     608:	25 b3       	in	r18, 0x15	; 21
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	02 c0       	rjmp	.+4      	; 0x614 <DIO_toggle+0x4e>
     610:	88 0f       	add	r24, r24
     612:	99 1f       	adc	r25, r25
     614:	6a 95       	dec	r22
     616:	e2 f7       	brpl	.-8      	; 0x610 <DIO_toggle+0x4a>
     618:	82 27       	eor	r24, r18
     61a:	85 bb       	out	0x15, r24	; 21
		break;
     61c:	08 95       	ret
		
		case port_D:
			tgl_pin(PORTD,pinnum); // toggle pin number (pinnum) in port D
     61e:	22 b3       	in	r18, 0x12	; 18
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	02 c0       	rjmp	.+4      	; 0x62a <DIO_toggle+0x64>
     626:	88 0f       	add	r24, r24
     628:	99 1f       	adc	r25, r25
     62a:	6a 95       	dec	r22
     62c:	e2 f7       	brpl	.-8      	; 0x626 <DIO_toggle+0x60>
     62e:	82 27       	eor	r24, r18
     630:	82 bb       	out	0x12, r24	; 18
     632:	08 95       	ret

00000634 <enable_global_interrupts>:

#include "interrupts_2.h"

void enable_global_interrupts()
{
	SREG |= (1 << 7); // set bit 7 in SREG register to one
     634:	8f b7       	in	r24, 0x3f	; 63
     636:	80 68       	ori	r24, 0x80	; 128
     638:	8f bf       	out	0x3f, r24	; 63
     63a:	08 95       	ret

0000063c <timer2_enable_overflow_interrupt>:
}

void timer2_enable_overflow_interrupt()
{
	TIMSK |= (1 << TOIE2); // set bit TOIE2 in TIMSK register to one
     63c:	89 b7       	in	r24, 0x39	; 57
     63e:	80 64       	ori	r24, 0x40	; 64
     640:	89 bf       	out	0x39, r24	; 57
     642:	08 95       	ret

00000644 <timer0_enable_overflow_interrupt>:
}

void timer0_enable_overflow_interrupt()
{
	//enabling t0_ovf interrupt
	set_pin(TIMSK, 0);
     644:	89 b7       	in	r24, 0x39	; 57
     646:	81 60       	ori	r24, 0x01	; 1
     648:	89 bf       	out	0x39, r24	; 57
     64a:	08 95       	ret

0000064c <timer2_select_mode>:

// This function resets timer without stopping it
void TIMER_reset()
{
	TIMER_0_set_init_value(init_val);
	ovf_cnt = 0;
     64c:	86 36       	cpi	r24, 0x66	; 102
     64e:	99 f0       	breq	.+38     	; 0x676 <timer2_select_mode+0x2a>
     650:	18 f4       	brcc	.+6      	; 0x658 <timer2_select_mode+0xc>
     652:	83 36       	cpi	r24, 0x63	; 99
     654:	61 f0       	breq	.+24     	; 0x66e <timer2_select_mode+0x22>
     656:	08 95       	ret
     658:	8e 36       	cpi	r24, 0x6E	; 110
     65a:	19 f0       	breq	.+6      	; 0x662 <timer2_select_mode+0x16>
     65c:	80 37       	cpi	r24, 0x70	; 112
     65e:	19 f0       	breq	.+6      	; 0x666 <timer2_select_mode+0x1a>
     660:	08 95       	ret
     662:	15 bc       	out	0x25, r1	; 37
     664:	08 95       	ret
     666:	85 b5       	in	r24, 0x25	; 37
     668:	80 64       	ori	r24, 0x40	; 64
     66a:	85 bd       	out	0x25, r24	; 37
     66c:	08 95       	ret
     66e:	85 b5       	in	r24, 0x25	; 37
     670:	88 60       	ori	r24, 0x08	; 8
     672:	85 bd       	out	0x25, r24	; 37
     674:	08 95       	ret
     676:	85 b5       	in	r24, 0x25	; 37
     678:	88 64       	ori	r24, 0x48	; 72
     67a:	85 bd       	out	0x25, r24	; 37
     67c:	08 95       	ret

0000067e <timer2_set_initial_value>:
     67e:	84 bd       	out	0x24, r24	; 36
     680:	08 95       	ret

00000682 <timer2_timer_start>:
     682:	80 34       	cpi	r24, 0x40	; 64
     684:	91 05       	cpc	r25, r1
     686:	11 f1       	breq	.+68     	; 0x6cc <timer2_timer_start+0x4a>
     688:	4c f4       	brge	.+18     	; 0x69c <timer2_timer_start+0x1a>
     68a:	88 30       	cpi	r24, 0x08	; 8
     68c:	91 05       	cpc	r25, r1
     68e:	b1 f0       	breq	.+44     	; 0x6bc <timer2_timer_start+0x3a>
     690:	80 32       	cpi	r24, 0x20	; 32
     692:	91 05       	cpc	r25, r1
     694:	b9 f0       	breq	.+46     	; 0x6c4 <timer2_timer_start+0x42>
     696:	89 2b       	or	r24, r25
     698:	41 f5       	brne	.+80     	; 0x6ea <timer2_timer_start+0x68>
     69a:	0c c0       	rjmp	.+24     	; 0x6b4 <timer2_timer_start+0x32>
     69c:	81 15       	cp	r24, r1
     69e:	21 e0       	ldi	r18, 0x01	; 1
     6a0:	92 07       	cpc	r25, r18
     6a2:	e1 f0       	breq	.+56     	; 0x6dc <timer2_timer_start+0x5a>
     6a4:	81 15       	cp	r24, r1
     6a6:	24 e0       	ldi	r18, 0x04	; 4
     6a8:	92 07       	cpc	r25, r18
     6aa:	e1 f0       	breq	.+56     	; 0x6e4 <timer2_timer_start+0x62>
     6ac:	80 38       	cpi	r24, 0x80	; 128
     6ae:	91 05       	cpc	r25, r1
     6b0:	e1 f4       	brne	.+56     	; 0x6ea <timer2_timer_start+0x68>
     6b2:	10 c0       	rjmp	.+32     	; 0x6d4 <timer2_timer_start+0x52>
     6b4:	85 b5       	in	r24, 0x25	; 37
     6b6:	81 60       	ori	r24, 0x01	; 1
     6b8:	85 bd       	out	0x25, r24	; 37
     6ba:	08 95       	ret
     6bc:	85 b5       	in	r24, 0x25	; 37
     6be:	82 60       	ori	r24, 0x02	; 2
     6c0:	85 bd       	out	0x25, r24	; 37
     6c2:	08 95       	ret
     6c4:	85 b5       	in	r24, 0x25	; 37
     6c6:	83 60       	ori	r24, 0x03	; 3
     6c8:	85 bd       	out	0x25, r24	; 37
     6ca:	08 95       	ret
     6cc:	85 b5       	in	r24, 0x25	; 37
     6ce:	84 60       	ori	r24, 0x04	; 4
     6d0:	85 bd       	out	0x25, r24	; 37
     6d2:	08 95       	ret
     6d4:	85 b5       	in	r24, 0x25	; 37
     6d6:	85 60       	ori	r24, 0x05	; 5
     6d8:	85 bd       	out	0x25, r24	; 37
     6da:	08 95       	ret
     6dc:	85 b5       	in	r24, 0x25	; 37
     6de:	86 60       	ori	r24, 0x06	; 6
     6e0:	85 bd       	out	0x25, r24	; 37
     6e2:	08 95       	ret
     6e4:	85 b5       	in	r24, 0x25	; 37
     6e6:	87 60       	ori	r24, 0x07	; 7
     6e8:	85 bd       	out	0x25, r24	; 37
     6ea:	08 95       	ret

000006ec <timer2_timer_stop>:
     6ec:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <number_of_overflows>
     6f0:	15 bc       	out	0x25, r1	; 37
     6f2:	08 95       	ret

000006f4 <__vector_5>:
     6f4:	1f 92       	push	r1
     6f6:	0f 92       	push	r0
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	0f 92       	push	r0
     6fc:	11 24       	eor	r1, r1
     6fe:	2f 93       	push	r18
     700:	3f 93       	push	r19
     702:	4f 93       	push	r20
     704:	5f 93       	push	r21
     706:	6f 93       	push	r22
     708:	7f 93       	push	r23
     70a:	8f 93       	push	r24
     70c:	9f 93       	push	r25
     70e:	af 93       	push	r26
     710:	bf 93       	push	r27
     712:	ef 93       	push	r30
     714:	ff 93       	push	r31
     716:	8b e0       	ldi	r24, 0x0B	; 11
     718:	0e 94 3f 03 	call	0x67e	; 0x67e <timer2_set_initial_value>
     71c:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <number_of_overflows>
     720:	8f 5f       	subi	r24, 0xFF	; 255
     722:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <number_of_overflows>
     726:	88 23       	and	r24, r24
     728:	21 f0       	breq	.+8      	; 0x732 <__vector_5+0x3e>
     72a:	66 e0       	ldi	r22, 0x06	; 6
     72c:	84 e4       	ldi	r24, 0x44	; 68
     72e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <DIO_toggle>
     732:	ff 91       	pop	r31
     734:	ef 91       	pop	r30
     736:	bf 91       	pop	r27
     738:	af 91       	pop	r26
     73a:	9f 91       	pop	r25
     73c:	8f 91       	pop	r24
     73e:	7f 91       	pop	r23
     740:	6f 91       	pop	r22
     742:	5f 91       	pop	r21
     744:	4f 91       	pop	r20
     746:	3f 91       	pop	r19
     748:	2f 91       	pop	r18
     74a:	0f 90       	pop	r0
     74c:	0f be       	out	0x3f, r0	; 63
     74e:	0f 90       	pop	r0
     750:	1f 90       	pop	r1
     752:	18 95       	reti

00000754 <TIMER_0_init>:
     754:	83 b7       	in	r24, 0x33	; 51
     756:	83 bf       	out	0x33, r24	; 51
     758:	08 95       	ret

0000075a <TIMER_0_set_init_value>:
     75a:	82 bf       	out	0x32, r24	; 50
     75c:	08 95       	ret

0000075e <TIMER_0_start>:
     75e:	4f 92       	push	r4
     760:	5f 92       	push	r5
     762:	6f 92       	push	r6
     764:	7f 92       	push	r7
     766:	8f 92       	push	r8
     768:	9f 92       	push	r9
     76a:	af 92       	push	r10
     76c:	bf 92       	push	r11
     76e:	cf 92       	push	r12
     770:	df 92       	push	r13
     772:	ef 92       	push	r14
     774:	ff 92       	push	r15
     776:	4b 01       	movw	r8, r22
     778:	5c 01       	movw	r10, r24
     77a:	2d eb       	ldi	r18, 0xBD	; 189
     77c:	37 e3       	ldi	r19, 0x37	; 55
     77e:	46 e8       	ldi	r20, 0x86	; 134
     780:	5e e3       	ldi	r21, 0x3E	; 62
     782:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__divsf3>
     786:	2b 01       	movw	r4, r22
     788:	3c 01       	movw	r6, r24
     78a:	0e 94 20 06 	call	0xc40	; 0xc40 <__fixunssfsi>
     78e:	6b 01       	movw	r12, r22
     790:	7c 01       	movw	r14, r24
     792:	70 93 9e 00 	sts	0x009E, r23	; 0x80009e <max_ovf+0x1>
     796:	60 93 9d 00 	sts	0x009D, r22	; 0x80009d <max_ovf>
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__floatunsisf>
     7a2:	9b 01       	movw	r18, r22
     7a4:	ac 01       	movw	r20, r24
     7a6:	c3 01       	movw	r24, r6
     7a8:	b2 01       	movw	r22, r4
     7aa:	0e 94 dd 06 	call	0xdba	; 0xdba <__gesf2>
     7ae:	18 16       	cp	r1, r24
     7b0:	3c f4       	brge	.+14     	; 0x7c0 <TIMER_0_start+0x62>
     7b2:	8f ef       	ldi	r24, 0xFF	; 255
     7b4:	c8 1a       	sub	r12, r24
     7b6:	d8 0a       	sbc	r13, r24
     7b8:	d0 92 9e 00 	sts	0x009E, r13	; 0x80009e <max_ovf+0x1>
     7bc:	c0 92 9d 00 	sts	0x009D, r12	; 0x80009d <max_ovf>
     7c0:	2d eb       	ldi	r18, 0xBD	; 189
     7c2:	37 e3       	ldi	r19, 0x37	; 55
     7c4:	46 e8       	ldi	r20, 0x86	; 134
     7c6:	5a e3       	ldi	r21, 0x3A	; 58
     7c8:	c5 01       	movw	r24, r10
     7ca:	b4 01       	movw	r22, r8
     7cc:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__divsf3>
     7d0:	6b 01       	movw	r12, r22
     7d2:	7c 01       	movw	r14, r24
     7d4:	60 91 9d 00 	lds	r22, 0x009D	; 0x80009d <max_ovf>
     7d8:	70 91 9e 00 	lds	r23, 0x009E	; 0x80009e <max_ovf+0x1>
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__floatunsisf>
     7e4:	9b 01       	movw	r18, r22
     7e6:	ac 01       	movw	r20, r24
     7e8:	c7 01       	movw	r24, r14
     7ea:	b6 01       	movw	r22, r12
     7ec:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__divsf3>
     7f0:	9b 01       	movw	r18, r22
     7f2:	ac 01       	movw	r20, r24
     7f4:	60 e0       	ldi	r22, 0x00	; 0
     7f6:	70 e0       	ldi	r23, 0x00	; 0
     7f8:	80 e8       	ldi	r24, 0x80	; 128
     7fa:	93 e4       	ldi	r25, 0x43	; 67
     7fc:	0e 94 41 05 	call	0xa82	; 0xa82 <__subsf3>
     800:	0e 94 20 06 	call	0xc40	; 0xc40 <__fixunssfsi>
     804:	70 93 a0 00 	sts	0x00A0, r23	; 0x8000a0 <init_val+0x1>
     808:	60 93 9f 00 	sts	0x009F, r22	; 0x80009f <init_val>
     80c:	cb 01       	movw	r24, r22
     80e:	0e 94 ad 03 	call	0x75a	; 0x75a <TIMER_0_set_init_value>
     812:	83 b7       	in	r24, 0x33	; 51
     814:	85 60       	ori	r24, 0x05	; 5
     816:	83 bf       	out	0x33, r24	; 51
     818:	20 91 99 00 	lds	r18, 0x0099	; 0x800099 <ovf_cnt>
     81c:	30 91 9a 00 	lds	r19, 0x009A	; 0x80009a <ovf_cnt+0x1>
     820:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <max_ovf>
     824:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <max_ovf+0x1>
     828:	28 17       	cp	r18, r24
     82a:	39 07       	cpc	r19, r25
     82c:	a8 f3       	brcs	.-22     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     82e:	ff 90       	pop	r15
     830:	ef 90       	pop	r14
     832:	df 90       	pop	r13
     834:	cf 90       	pop	r12
     836:	bf 90       	pop	r11
     838:	af 90       	pop	r10
     83a:	9f 90       	pop	r9
     83c:	8f 90       	pop	r8
     83e:	7f 90       	pop	r7
     840:	6f 90       	pop	r6
     842:	5f 90       	pop	r5
     844:	4f 90       	pop	r4
     846:	08 95       	ret

00000848 <TIMER_0_stop>:
     848:	13 be       	out	0x33, r1	; 51
     84a:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <ovf_cnt+0x1>
     84e:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <ovf_cnt>
     852:	08 95       	ret

00000854 <TIMER_0_delay>:
     854:	20 e0       	ldi	r18, 0x00	; 0
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	4a e7       	ldi	r20, 0x7A	; 122
     85a:	54 e4       	ldi	r21, 0x44	; 68
     85c:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__divsf3>
     860:	0e 94 af 03 	call	0x75e	; 0x75e <TIMER_0_start>
     864:	0e 94 24 04 	call	0x848	; 0x848 <TIMER_0_stop>
     868:	08 95       	ret

0000086a <__vector_11>:
}

// Timer_0 overflow interrupt
ISR(TIMER_0_OVF){
     86a:	1f 92       	push	r1
     86c:	0f 92       	push	r0
     86e:	0f b6       	in	r0, 0x3f	; 63
     870:	0f 92       	push	r0
     872:	11 24       	eor	r1, r1
     874:	2f 93       	push	r18
     876:	3f 93       	push	r19
     878:	4f 93       	push	r20
     87a:	5f 93       	push	r21
     87c:	6f 93       	push	r22
     87e:	7f 93       	push	r23
     880:	8f 93       	push	r24
     882:	9f 93       	push	r25
     884:	af 93       	push	r26
     886:	bf 93       	push	r27
     888:	ef 93       	push	r30
     88a:	ff 93       	push	r31
	// Resetting initial value for the next timer cycle
	TIMER_0_set_init_value(init_val);
     88c:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <init_val>
     890:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <init_val+0x1>
     894:	0e 94 ad 03 	call	0x75a	; 0x75a <TIMER_0_set_init_value>
	
	// Incrementing overflow variable
	ovf_cnt++;
     898:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <ovf_cnt>
     89c:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <ovf_cnt+0x1>
     8a0:	01 96       	adiw	r24, 0x01	; 1
     8a2:	90 93 9a 00 	sts	0x009A, r25	; 0x80009a <ovf_cnt+0x1>
     8a6:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <ovf_cnt>
	
     8aa:	ff 91       	pop	r31
     8ac:	ef 91       	pop	r30
     8ae:	bf 91       	pop	r27
     8b0:	af 91       	pop	r26
     8b2:	9f 91       	pop	r25
     8b4:	8f 91       	pop	r24
     8b6:	7f 91       	pop	r23
     8b8:	6f 91       	pop	r22
     8ba:	5f 91       	pop	r21
     8bc:	4f 91       	pop	r20
     8be:	3f 91       	pop	r19
     8c0:	2f 91       	pop	r18
     8c2:	0f 90       	pop	r0
     8c4:	0f be       	out	0x3f, r0	; 63
     8c6:	0f 90       	pop	r0
     8c8:	1f 90       	pop	r1
     8ca:	18 95       	reti

000008cc <TWI_init>:
	set_pin(TWCR,TWINT);
	set_pin(TWCR,TWEN);
	
	while (!( TWCR & (1 << TWINT) )); // Wait for TWINT Flag set
	
	*data = TWDR;
     8cc:	11 b8       	out	0x01, r1	; 1
     8ce:	61 b1       	in	r22, 0x01	; 1
     8d0:	63 70       	andi	r22, 0x03	; 3
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	0e 94 51 06 	call	0xca2	; 0xca2 <__floatsisf>
     8dc:	9b 01       	movw	r18, r22
     8de:	ac 01       	movw	r20, r24
     8e0:	60 e0       	ldi	r22, 0x00	; 0
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	80 e8       	ldi	r24, 0x80	; 128
     8e6:	90 e4       	ldi	r25, 0x40	; 64
     8e8:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <pow>
     8ec:	9b 01       	movw	r18, r22
     8ee:	ac 01       	movw	r20, r24
     8f0:	0e 94 42 05 	call	0xa84	; 0xa84 <__addsf3>
     8f4:	9b 01       	movw	r18, r22
     8f6:	ac 01       	movw	r20, r24
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	80 e8       	ldi	r24, 0x80	; 128
     8fe:	9f e4       	ldi	r25, 0x4F	; 79
     900:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__divsf3>
     904:	0e 94 20 06 	call	0xc40	; 0xc40 <__fixunssfsi>
     908:	60 b9       	out	0x00, r22	; 0
     90a:	08 95       	ret

0000090c <TWI_start>:
     90c:	96 b7       	in	r25, 0x36	; 54
     90e:	90 68       	ori	r25, 0x80	; 128
     910:	96 bf       	out	0x36, r25	; 54
     912:	96 b7       	in	r25, 0x36	; 54
     914:	90 62       	ori	r25, 0x20	; 32
     916:	96 bf       	out	0x36, r25	; 54
     918:	96 b7       	in	r25, 0x36	; 54
     91a:	94 60       	ori	r25, 0x04	; 4
     91c:	96 bf       	out	0x36, r25	; 54
     91e:	06 b6       	in	r0, 0x36	; 54
     920:	07 fe       	sbrs	r0, 7
     922:	fd cf       	rjmp	.-6      	; 0x91e <TWI_start+0x12>
     924:	83 b9       	out	0x03, r24	; 3
     926:	86 b7       	in	r24, 0x36	; 54
     928:	80 68       	ori	r24, 0x80	; 128
     92a:	86 bf       	out	0x36, r24	; 54
     92c:	86 b7       	in	r24, 0x36	; 54
     92e:	84 60       	ori	r24, 0x04	; 4
     930:	86 bf       	out	0x36, r24	; 54
     932:	06 b6       	in	r0, 0x36	; 54
     934:	07 fe       	sbrs	r0, 7
     936:	fd cf       	rjmp	.-6      	; 0x932 <TWI_start+0x26>
     938:	08 95       	ret

0000093a <TWI_write_addr>:
     93a:	83 b9       	out	0x03, r24	; 3
     93c:	86 b7       	in	r24, 0x36	; 54
     93e:	80 68       	ori	r24, 0x80	; 128
     940:	86 bf       	out	0x36, r24	; 54
     942:	86 b7       	in	r24, 0x36	; 54
     944:	84 60       	ori	r24, 0x04	; 4
     946:	86 bf       	out	0x36, r24	; 54
     948:	06 b6       	in	r0, 0x36	; 54
     94a:	07 fe       	sbrs	r0, 7
     94c:	fd cf       	rjmp	.-6      	; 0x948 <TWI_write_addr+0xe>
     94e:	08 95       	ret

00000950 <TWI_write_data>:
     950:	83 b9       	out	0x03, r24	; 3
     952:	86 b7       	in	r24, 0x36	; 54
     954:	80 68       	ori	r24, 0x80	; 128
     956:	86 bf       	out	0x36, r24	; 54
     958:	86 b7       	in	r24, 0x36	; 54
     95a:	84 60       	ori	r24, 0x04	; 4
     95c:	86 bf       	out	0x36, r24	; 54
     95e:	06 b6       	in	r0, 0x36	; 54
     960:	07 fe       	sbrs	r0, 7
     962:	fd cf       	rjmp	.-6      	; 0x95e <TWI_write_data+0xe>
     964:	08 95       	ret

00000966 <TWI_read_ack>:
     966:	fc 01       	movw	r30, r24
     968:	96 b7       	in	r25, 0x36	; 54
     96a:	90 68       	ori	r25, 0x80	; 128
     96c:	96 bf       	out	0x36, r25	; 54
     96e:	96 b7       	in	r25, 0x36	; 54
     970:	94 60       	ori	r25, 0x04	; 4
     972:	96 bf       	out	0x36, r25	; 54
     974:	96 b7       	in	r25, 0x36	; 54
     976:	90 64       	ori	r25, 0x40	; 64
     978:	96 bf       	out	0x36, r25	; 54
     97a:	06 b6       	in	r0, 0x36	; 54
     97c:	07 fe       	sbrs	r0, 7
     97e:	fd cf       	rjmp	.-6      	; 0x97a <TWI_read_ack+0x14>
     980:	83 b1       	in	r24, 0x03	; 3
     982:	80 83       	st	Z, r24
     984:	08 95       	ret

00000986 <TWI_stop>:
}


void TWI_stop()
{
	TWCR = (1 << TWSTO) | (1 << TWINT) | (1 << TWEN);// Enable TWI, generate stop
     986:	84 e9       	ldi	r24, 0x94	; 148
     988:	86 bf       	out	0x36, r24	; 54
	while( TWCR & (1 << TWSTO) );	// Wait until stop condition execution 
     98a:	06 b6       	in	r0, 0x36	; 54
     98c:	04 fc       	sbrc	r0, 4
     98e:	fd cf       	rjmp	.-6      	; 0x98a <TWI_stop+0x4>
}
     990:	08 95       	ret

00000992 <UART_set_BAUD>:
	UART_set_frame(Data_bits,Stop_bits);
}

void UART_set_BAUD(uint16_t baud)
{
	UBRRH = (uint8_t)(baud >> 8); // Higher nibble
     992:	90 bd       	out	0x20, r25	; 32
	UBRRL = (uint8_t)baud; // lower nibble
     994:	89 b9       	out	0x09, r24	; 9
     996:	08 95       	ret

00000998 <UART_set_frame>:
}

void UART_set_frame(uint8_t bitnum, uint8_t stopbits)
{
	switch(bitnum)
     998:	87 30       	cpi	r24, 0x07	; 7
     99a:	f9 f0       	breq	.+62     	; 0x9da <UART_set_frame+0x42>
     99c:	28 f4       	brcc	.+10     	; 0x9a8 <UART_set_frame+0x10>
     99e:	85 30       	cpi	r24, 0x05	; 5
     9a0:	41 f0       	breq	.+16     	; 0x9b2 <UART_set_frame+0x1a>
     9a2:	86 30       	cpi	r24, 0x06	; 6
     9a4:	81 f0       	breq	.+32     	; 0x9c6 <UART_set_frame+0x2e>
     9a6:	36 c0       	rjmp	.+108    	; 0xa14 <UART_set_frame+0x7c>
     9a8:	88 30       	cpi	r24, 0x08	; 8
     9aa:	09 f1       	breq	.+66     	; 0x9ee <UART_set_frame+0x56>
     9ac:	89 30       	cpi	r24, 0x09	; 9
     9ae:	49 f1       	breq	.+82     	; 0xa02 <UART_set_frame+0x6a>
     9b0:	31 c0       	rjmp	.+98     	; 0xa14 <UART_set_frame+0x7c>
	{
		// 5 bits character size
		case 5:
		clr_pin(UCSRC,UCSZ0);
     9b2:	80 b5       	in	r24, 0x20	; 32
     9b4:	8d 7f       	andi	r24, 0xFD	; 253
     9b6:	80 bd       	out	0x20, r24	; 32
		clr_pin(UCSRC,UCSZ1);
     9b8:	80 b5       	in	r24, 0x20	; 32
     9ba:	8b 7f       	andi	r24, 0xFB	; 251
     9bc:	80 bd       	out	0x20, r24	; 32
		clr_pin(UCSRB,UCSZ2);
     9be:	8a b1       	in	r24, 0x0a	; 10
     9c0:	8b 7f       	andi	r24, 0xFB	; 251
     9c2:	8a b9       	out	0x0a, r24	; 10
		break;
     9c4:	27 c0       	rjmp	.+78     	; 0xa14 <UART_set_frame+0x7c>
		// 6 bits character size
		case 6:
		set_pin(UCSRC,UCSZ0);
     9c6:	80 b5       	in	r24, 0x20	; 32
     9c8:	82 60       	ori	r24, 0x02	; 2
     9ca:	80 bd       	out	0x20, r24	; 32
		clr_pin(UCSRC,UCSZ1);
     9cc:	80 b5       	in	r24, 0x20	; 32
     9ce:	8b 7f       	andi	r24, 0xFB	; 251
     9d0:	80 bd       	out	0x20, r24	; 32
		clr_pin(UCSRB,UCSZ2);
     9d2:	8a b1       	in	r24, 0x0a	; 10
     9d4:	8b 7f       	andi	r24, 0xFB	; 251
     9d6:	8a b9       	out	0x0a, r24	; 10
		break;
     9d8:	1d c0       	rjmp	.+58     	; 0xa14 <UART_set_frame+0x7c>
		// 7 bits character size
		case 7:
		clr_pin(UCSRC,UCSZ0);
     9da:	80 b5       	in	r24, 0x20	; 32
     9dc:	8d 7f       	andi	r24, 0xFD	; 253
     9de:	80 bd       	out	0x20, r24	; 32
		set_pin(UCSRC,UCSZ1);
     9e0:	80 b5       	in	r24, 0x20	; 32
     9e2:	84 60       	ori	r24, 0x04	; 4
     9e4:	80 bd       	out	0x20, r24	; 32
		clr_pin(UCSRB,UCSZ2);
     9e6:	8a b1       	in	r24, 0x0a	; 10
     9e8:	8b 7f       	andi	r24, 0xFB	; 251
     9ea:	8a b9       	out	0x0a, r24	; 10
		break;
     9ec:	13 c0       	rjmp	.+38     	; 0xa14 <UART_set_frame+0x7c>
		// 8 bits character size
		case 8:
		set_pin(UCSRC,UCSZ0);
     9ee:	80 b5       	in	r24, 0x20	; 32
     9f0:	82 60       	ori	r24, 0x02	; 2
     9f2:	80 bd       	out	0x20, r24	; 32
		set_pin(UCSRC,UCSZ1);
     9f4:	80 b5       	in	r24, 0x20	; 32
     9f6:	84 60       	ori	r24, 0x04	; 4
     9f8:	80 bd       	out	0x20, r24	; 32
		clr_pin(UCSRB,UCSZ2);
     9fa:	8a b1       	in	r24, 0x0a	; 10
     9fc:	8b 7f       	andi	r24, 0xFB	; 251
     9fe:	8a b9       	out	0x0a, r24	; 10
		break;
     a00:	09 c0       	rjmp	.+18     	; 0xa14 <UART_set_frame+0x7c>
		// 9 bits character size
		case 9:
		set_pin(UCSRC,UCSZ0);
     a02:	80 b5       	in	r24, 0x20	; 32
     a04:	82 60       	ori	r24, 0x02	; 2
     a06:	80 bd       	out	0x20, r24	; 32
		set_pin(UCSRC,UCSZ1);
     a08:	80 b5       	in	r24, 0x20	; 32
     a0a:	84 60       	ori	r24, 0x04	; 4
     a0c:	80 bd       	out	0x20, r24	; 32
		set_pin(UCSRB,UCSZ2);
     a0e:	8a b1       	in	r24, 0x0a	; 10
     a10:	84 60       	ori	r24, 0x04	; 4
     a12:	8a b9       	out	0x0a, r24	; 10
		default:
		{
			// error handling
		}
	}
	switch(stopbits)
     a14:	61 30       	cpi	r22, 0x01	; 1
     a16:	19 f0       	breq	.+6      	; 0xa1e <UART_set_frame+0x86>
     a18:	62 30       	cpi	r22, 0x02	; 2
     a1a:	29 f0       	breq	.+10     	; 0xa26 <UART_set_frame+0x8e>
     a1c:	08 95       	ret
	{
		// 1 stop bit
		case 1:
		clr_pin(UCSRC,USBS);
     a1e:	80 b5       	in	r24, 0x20	; 32
     a20:	87 7f       	andi	r24, 0xF7	; 247
     a22:	80 bd       	out	0x20, r24	; 32
		break;
     a24:	08 95       	ret
		// 2 stop bit
		case 2:
		set_pin(UCSRC,USBS);
     a26:	80 b5       	in	r24, 0x20	; 32
     a28:	88 60       	ori	r24, 0x08	; 8
     a2a:	80 bd       	out	0x20, r24	; 32
     a2c:	08 95       	ret

00000a2e <UART_init>:
#include "UART_2.h"

void UART_init()
{
	// Set baud rate
	UART_set_BAUD(BAUD_rate);
     a2e:	83 e3       	ldi	r24, 0x33	; 51
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	0e 94 c9 04 	call	0x992	; 0x992 <UART_set_BAUD>
	
	// Enable receiver and transmitter
	set_pin(UCSRB,RXEN);
     a36:	8a b1       	in	r24, 0x0a	; 10
     a38:	80 61       	ori	r24, 0x10	; 16
     a3a:	8a b9       	out	0x0a, r24	; 10
	set_pin(UCSRB,TXEN);
     a3c:	8a b1       	in	r24, 0x0a	; 10
     a3e:	88 60       	ori	r24, 0x08	; 8
     a40:	8a b9       	out	0x0a, r24	; 10
	
	// Set frame format
	UART_set_frame(Data_bits,Stop_bits);
     a42:	61 e0       	ldi	r22, 0x01	; 1
     a44:	88 e0       	ldi	r24, 0x08	; 8
     a46:	0e 94 cc 04 	call	0x998	; 0x998 <UART_set_frame>
     a4a:	08 95       	ret

00000a4c <UART_transmit>:
}

void UART_transmit(uint8_t data)
{
	// Wait for empty transmit buffer
	while ( !( UCSRA & (1 << UDRE)) );
     a4c:	5d 9b       	sbis	0x0b, 5	; 11
     a4e:	fe cf       	rjmp	.-4      	; 0xa4c <UART_transmit>
	
	// Put data into buffer, sends the data
	UDR = data;
     a50:	8c b9       	out	0x0c, r24	; 12
     a52:	08 95       	ret

00000a54 <UART_receive>:
}

uint8_t UART_receive()
{
	/* Wait for data to be received */
	while ( !( UCSRA & (1 << RXC)) );
     a54:	5f 9b       	sbis	0x0b, 7	; 11
     a56:	fe cf       	rjmp	.-4      	; 0xa54 <UART_receive>
	
	/* Get and return received data from buffer */
	return UDR;
     a58:	8c b1       	in	r24, 0x0c	; 12
}
     a5a:	08 95       	ret

00000a5c <UART_receiveString>:

void UART_receiveString(uint8_t *string)
{
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	cf 93       	push	r28
     a62:	8c 01       	movw	r16, r24
	for(uint8_t cnt=0; ; cnt++)
     a64:	c0 e0       	ldi	r28, 0x00	; 0
	{
		*(string + cnt) = UART_receive();
     a66:	0e 94 2a 05 	call	0xa54	; 0xa54 <UART_receive>
     a6a:	f8 01       	movw	r30, r16
     a6c:	ec 0f       	add	r30, r28
     a6e:	f1 1d       	adc	r31, r1
     a70:	80 83       	st	Z, r24
		if(*(string + cnt) == '\0')
     a72:	88 23       	and	r24, r24
     a74:	11 f0       	breq	.+4      	; 0xa7a <UART_receiveString+0x1e>
	return UDR;
}

void UART_receiveString(uint8_t *string)
{
	for(uint8_t cnt=0; ; cnt++)
     a76:	cf 5f       	subi	r28, 0xFF	; 255
	{
		*(string + cnt) = UART_receive();
		if(*(string + cnt) == '\0')
			break;
	}
     a78:	f6 cf       	rjmp	.-20     	; 0xa66 <UART_receiveString+0xa>
     a7a:	cf 91       	pop	r28
     a7c:	1f 91       	pop	r17
     a7e:	0f 91       	pop	r16
     a80:	08 95       	ret

00000a82 <__subsf3>:
     a82:	50 58       	subi	r21, 0x80	; 128

00000a84 <__addsf3>:
     a84:	bb 27       	eor	r27, r27
     a86:	aa 27       	eor	r26, r26
     a88:	0e 94 59 05 	call	0xab2	; 0xab2 <__addsf3x>
     a8c:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <__fp_round>
     a90:	0e 94 95 06 	call	0xd2a	; 0xd2a <__fp_pscA>
     a94:	38 f0       	brcs	.+14     	; 0xaa4 <__addsf3+0x20>
     a96:	0e 94 9c 06 	call	0xd38	; 0xd38 <__fp_pscB>
     a9a:	20 f0       	brcs	.+8      	; 0xaa4 <__addsf3+0x20>
     a9c:	39 f4       	brne	.+14     	; 0xaac <__addsf3+0x28>
     a9e:	9f 3f       	cpi	r25, 0xFF	; 255
     aa0:	19 f4       	brne	.+6      	; 0xaa8 <__addsf3+0x24>
     aa2:	26 f4       	brtc	.+8      	; 0xaac <__addsf3+0x28>
     aa4:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__fp_nan>
     aa8:	0e f4       	brtc	.+2      	; 0xaac <__addsf3+0x28>
     aaa:	e0 95       	com	r30
     aac:	e7 fb       	bst	r30, 7
     aae:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__fp_inf>

00000ab2 <__addsf3x>:
     ab2:	e9 2f       	mov	r30, r25
     ab4:	0e 94 b4 06 	call	0xd68	; 0xd68 <__fp_split3>
     ab8:	58 f3       	brcs	.-42     	; 0xa90 <__addsf3+0xc>
     aba:	ba 17       	cp	r27, r26
     abc:	62 07       	cpc	r22, r18
     abe:	73 07       	cpc	r23, r19
     ac0:	84 07       	cpc	r24, r20
     ac2:	95 07       	cpc	r25, r21
     ac4:	20 f0       	brcs	.+8      	; 0xace <__addsf3x+0x1c>
     ac6:	79 f4       	brne	.+30     	; 0xae6 <__addsf3x+0x34>
     ac8:	a6 f5       	brtc	.+104    	; 0xb32 <__addsf3x+0x80>
     aca:	0c 94 d6 06 	jmp	0xdac	; 0xdac <__fp_zero>
     ace:	0e f4       	brtc	.+2      	; 0xad2 <__addsf3x+0x20>
     ad0:	e0 95       	com	r30
     ad2:	0b 2e       	mov	r0, r27
     ad4:	ba 2f       	mov	r27, r26
     ad6:	a0 2d       	mov	r26, r0
     ad8:	0b 01       	movw	r0, r22
     ada:	b9 01       	movw	r22, r18
     adc:	90 01       	movw	r18, r0
     ade:	0c 01       	movw	r0, r24
     ae0:	ca 01       	movw	r24, r20
     ae2:	a0 01       	movw	r20, r0
     ae4:	11 24       	eor	r1, r1
     ae6:	ff 27       	eor	r31, r31
     ae8:	59 1b       	sub	r21, r25
     aea:	99 f0       	breq	.+38     	; 0xb12 <__addsf3x+0x60>
     aec:	59 3f       	cpi	r21, 0xF9	; 249
     aee:	50 f4       	brcc	.+20     	; 0xb04 <__addsf3x+0x52>
     af0:	50 3e       	cpi	r21, 0xE0	; 224
     af2:	68 f1       	brcs	.+90     	; 0xb4e <__addsf3x+0x9c>
     af4:	1a 16       	cp	r1, r26
     af6:	f0 40       	sbci	r31, 0x00	; 0
     af8:	a2 2f       	mov	r26, r18
     afa:	23 2f       	mov	r18, r19
     afc:	34 2f       	mov	r19, r20
     afe:	44 27       	eor	r20, r20
     b00:	58 5f       	subi	r21, 0xF8	; 248
     b02:	f3 cf       	rjmp	.-26     	; 0xaea <__addsf3x+0x38>
     b04:	46 95       	lsr	r20
     b06:	37 95       	ror	r19
     b08:	27 95       	ror	r18
     b0a:	a7 95       	ror	r26
     b0c:	f0 40       	sbci	r31, 0x00	; 0
     b0e:	53 95       	inc	r21
     b10:	c9 f7       	brne	.-14     	; 0xb04 <__addsf3x+0x52>
     b12:	7e f4       	brtc	.+30     	; 0xb32 <__addsf3x+0x80>
     b14:	1f 16       	cp	r1, r31
     b16:	ba 0b       	sbc	r27, r26
     b18:	62 0b       	sbc	r22, r18
     b1a:	73 0b       	sbc	r23, r19
     b1c:	84 0b       	sbc	r24, r20
     b1e:	ba f0       	brmi	.+46     	; 0xb4e <__addsf3x+0x9c>
     b20:	91 50       	subi	r25, 0x01	; 1
     b22:	a1 f0       	breq	.+40     	; 0xb4c <__addsf3x+0x9a>
     b24:	ff 0f       	add	r31, r31
     b26:	bb 1f       	adc	r27, r27
     b28:	66 1f       	adc	r22, r22
     b2a:	77 1f       	adc	r23, r23
     b2c:	88 1f       	adc	r24, r24
     b2e:	c2 f7       	brpl	.-16     	; 0xb20 <__addsf3x+0x6e>
     b30:	0e c0       	rjmp	.+28     	; 0xb4e <__addsf3x+0x9c>
     b32:	ba 0f       	add	r27, r26
     b34:	62 1f       	adc	r22, r18
     b36:	73 1f       	adc	r23, r19
     b38:	84 1f       	adc	r24, r20
     b3a:	48 f4       	brcc	.+18     	; 0xb4e <__addsf3x+0x9c>
     b3c:	87 95       	ror	r24
     b3e:	77 95       	ror	r23
     b40:	67 95       	ror	r22
     b42:	b7 95       	ror	r27
     b44:	f7 95       	ror	r31
     b46:	9e 3f       	cpi	r25, 0xFE	; 254
     b48:	08 f0       	brcs	.+2      	; 0xb4c <__addsf3x+0x9a>
     b4a:	b0 cf       	rjmp	.-160    	; 0xaac <__addsf3+0x28>
     b4c:	93 95       	inc	r25
     b4e:	88 0f       	add	r24, r24
     b50:	08 f0       	brcs	.+2      	; 0xb54 <__addsf3x+0xa2>
     b52:	99 27       	eor	r25, r25
     b54:	ee 0f       	add	r30, r30
     b56:	97 95       	ror	r25
     b58:	87 95       	ror	r24
     b5a:	08 95       	ret

00000b5c <__divsf3>:
     b5c:	0e 94 c2 05 	call	0xb84	; 0xb84 <__divsf3x>
     b60:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <__fp_round>
     b64:	0e 94 9c 06 	call	0xd38	; 0xd38 <__fp_pscB>
     b68:	58 f0       	brcs	.+22     	; 0xb80 <__divsf3+0x24>
     b6a:	0e 94 95 06 	call	0xd2a	; 0xd2a <__fp_pscA>
     b6e:	40 f0       	brcs	.+16     	; 0xb80 <__divsf3+0x24>
     b70:	29 f4       	brne	.+10     	; 0xb7c <__divsf3+0x20>
     b72:	5f 3f       	cpi	r21, 0xFF	; 255
     b74:	29 f0       	breq	.+10     	; 0xb80 <__divsf3+0x24>
     b76:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__fp_inf>
     b7a:	51 11       	cpse	r21, r1
     b7c:	0c 94 d7 06 	jmp	0xdae	; 0xdae <__fp_szero>
     b80:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__fp_nan>

00000b84 <__divsf3x>:
     b84:	0e 94 b4 06 	call	0xd68	; 0xd68 <__fp_split3>
     b88:	68 f3       	brcs	.-38     	; 0xb64 <__divsf3+0x8>

00000b8a <__divsf3_pse>:
     b8a:	99 23       	and	r25, r25
     b8c:	b1 f3       	breq	.-20     	; 0xb7a <__divsf3+0x1e>
     b8e:	55 23       	and	r21, r21
     b90:	91 f3       	breq	.-28     	; 0xb76 <__divsf3+0x1a>
     b92:	95 1b       	sub	r25, r21
     b94:	55 0b       	sbc	r21, r21
     b96:	bb 27       	eor	r27, r27
     b98:	aa 27       	eor	r26, r26
     b9a:	62 17       	cp	r22, r18
     b9c:	73 07       	cpc	r23, r19
     b9e:	84 07       	cpc	r24, r20
     ba0:	38 f0       	brcs	.+14     	; 0xbb0 <__divsf3_pse+0x26>
     ba2:	9f 5f       	subi	r25, 0xFF	; 255
     ba4:	5f 4f       	sbci	r21, 0xFF	; 255
     ba6:	22 0f       	add	r18, r18
     ba8:	33 1f       	adc	r19, r19
     baa:	44 1f       	adc	r20, r20
     bac:	aa 1f       	adc	r26, r26
     bae:	a9 f3       	breq	.-22     	; 0xb9a <__divsf3_pse+0x10>
     bb0:	35 d0       	rcall	.+106    	; 0xc1c <__divsf3_pse+0x92>
     bb2:	0e 2e       	mov	r0, r30
     bb4:	3a f0       	brmi	.+14     	; 0xbc4 <__divsf3_pse+0x3a>
     bb6:	e0 e8       	ldi	r30, 0x80	; 128
     bb8:	32 d0       	rcall	.+100    	; 0xc1e <__divsf3_pse+0x94>
     bba:	91 50       	subi	r25, 0x01	; 1
     bbc:	50 40       	sbci	r21, 0x00	; 0
     bbe:	e6 95       	lsr	r30
     bc0:	00 1c       	adc	r0, r0
     bc2:	ca f7       	brpl	.-14     	; 0xbb6 <__divsf3_pse+0x2c>
     bc4:	2b d0       	rcall	.+86     	; 0xc1c <__divsf3_pse+0x92>
     bc6:	fe 2f       	mov	r31, r30
     bc8:	29 d0       	rcall	.+82     	; 0xc1c <__divsf3_pse+0x92>
     bca:	66 0f       	add	r22, r22
     bcc:	77 1f       	adc	r23, r23
     bce:	88 1f       	adc	r24, r24
     bd0:	bb 1f       	adc	r27, r27
     bd2:	26 17       	cp	r18, r22
     bd4:	37 07       	cpc	r19, r23
     bd6:	48 07       	cpc	r20, r24
     bd8:	ab 07       	cpc	r26, r27
     bda:	b0 e8       	ldi	r27, 0x80	; 128
     bdc:	09 f0       	breq	.+2      	; 0xbe0 <__divsf3_pse+0x56>
     bde:	bb 0b       	sbc	r27, r27
     be0:	80 2d       	mov	r24, r0
     be2:	bf 01       	movw	r22, r30
     be4:	ff 27       	eor	r31, r31
     be6:	93 58       	subi	r25, 0x83	; 131
     be8:	5f 4f       	sbci	r21, 0xFF	; 255
     bea:	3a f0       	brmi	.+14     	; 0xbfa <__divsf3_pse+0x70>
     bec:	9e 3f       	cpi	r25, 0xFE	; 254
     bee:	51 05       	cpc	r21, r1
     bf0:	78 f0       	brcs	.+30     	; 0xc10 <__divsf3_pse+0x86>
     bf2:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__fp_inf>
     bf6:	0c 94 d7 06 	jmp	0xdae	; 0xdae <__fp_szero>
     bfa:	5f 3f       	cpi	r21, 0xFF	; 255
     bfc:	e4 f3       	brlt	.-8      	; 0xbf6 <__divsf3_pse+0x6c>
     bfe:	98 3e       	cpi	r25, 0xE8	; 232
     c00:	d4 f3       	brlt	.-12     	; 0xbf6 <__divsf3_pse+0x6c>
     c02:	86 95       	lsr	r24
     c04:	77 95       	ror	r23
     c06:	67 95       	ror	r22
     c08:	b7 95       	ror	r27
     c0a:	f7 95       	ror	r31
     c0c:	9f 5f       	subi	r25, 0xFF	; 255
     c0e:	c9 f7       	brne	.-14     	; 0xc02 <__divsf3_pse+0x78>
     c10:	88 0f       	add	r24, r24
     c12:	91 1d       	adc	r25, r1
     c14:	96 95       	lsr	r25
     c16:	87 95       	ror	r24
     c18:	97 f9       	bld	r25, 7
     c1a:	08 95       	ret
     c1c:	e1 e0       	ldi	r30, 0x01	; 1
     c1e:	66 0f       	add	r22, r22
     c20:	77 1f       	adc	r23, r23
     c22:	88 1f       	adc	r24, r24
     c24:	bb 1f       	adc	r27, r27
     c26:	62 17       	cp	r22, r18
     c28:	73 07       	cpc	r23, r19
     c2a:	84 07       	cpc	r24, r20
     c2c:	ba 07       	cpc	r27, r26
     c2e:	20 f0       	brcs	.+8      	; 0xc38 <__divsf3_pse+0xae>
     c30:	62 1b       	sub	r22, r18
     c32:	73 0b       	sbc	r23, r19
     c34:	84 0b       	sbc	r24, r20
     c36:	ba 0b       	sbc	r27, r26
     c38:	ee 1f       	adc	r30, r30
     c3a:	88 f7       	brcc	.-30     	; 0xc1e <__divsf3_pse+0x94>
     c3c:	e0 95       	com	r30
     c3e:	08 95       	ret

00000c40 <__fixunssfsi>:
     c40:	0e 94 bc 06 	call	0xd78	; 0xd78 <__fp_splitA>
     c44:	88 f0       	brcs	.+34     	; 0xc68 <__fixunssfsi+0x28>
     c46:	9f 57       	subi	r25, 0x7F	; 127
     c48:	98 f0       	brcs	.+38     	; 0xc70 <__fixunssfsi+0x30>
     c4a:	b9 2f       	mov	r27, r25
     c4c:	99 27       	eor	r25, r25
     c4e:	b7 51       	subi	r27, 0x17	; 23
     c50:	b0 f0       	brcs	.+44     	; 0xc7e <__fixunssfsi+0x3e>
     c52:	e1 f0       	breq	.+56     	; 0xc8c <__fixunssfsi+0x4c>
     c54:	66 0f       	add	r22, r22
     c56:	77 1f       	adc	r23, r23
     c58:	88 1f       	adc	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	1a f0       	brmi	.+6      	; 0xc64 <__fixunssfsi+0x24>
     c5e:	ba 95       	dec	r27
     c60:	c9 f7       	brne	.-14     	; 0xc54 <__fixunssfsi+0x14>
     c62:	14 c0       	rjmp	.+40     	; 0xc8c <__fixunssfsi+0x4c>
     c64:	b1 30       	cpi	r27, 0x01	; 1
     c66:	91 f0       	breq	.+36     	; 0xc8c <__fixunssfsi+0x4c>
     c68:	0e 94 d6 06 	call	0xdac	; 0xdac <__fp_zero>
     c6c:	b1 e0       	ldi	r27, 0x01	; 1
     c6e:	08 95       	ret
     c70:	0c 94 d6 06 	jmp	0xdac	; 0xdac <__fp_zero>
     c74:	67 2f       	mov	r22, r23
     c76:	78 2f       	mov	r23, r24
     c78:	88 27       	eor	r24, r24
     c7a:	b8 5f       	subi	r27, 0xF8	; 248
     c7c:	39 f0       	breq	.+14     	; 0xc8c <__fixunssfsi+0x4c>
     c7e:	b9 3f       	cpi	r27, 0xF9	; 249
     c80:	cc f3       	brlt	.-14     	; 0xc74 <__fixunssfsi+0x34>
     c82:	86 95       	lsr	r24
     c84:	77 95       	ror	r23
     c86:	67 95       	ror	r22
     c88:	b3 95       	inc	r27
     c8a:	d9 f7       	brne	.-10     	; 0xc82 <__fixunssfsi+0x42>
     c8c:	3e f4       	brtc	.+14     	; 0xc9c <__fixunssfsi+0x5c>
     c8e:	90 95       	com	r25
     c90:	80 95       	com	r24
     c92:	70 95       	com	r23
     c94:	61 95       	neg	r22
     c96:	7f 4f       	sbci	r23, 0xFF	; 255
     c98:	8f 4f       	sbci	r24, 0xFF	; 255
     c9a:	9f 4f       	sbci	r25, 0xFF	; 255
     c9c:	08 95       	ret

00000c9e <__floatunsisf>:
     c9e:	e8 94       	clt
     ca0:	09 c0       	rjmp	.+18     	; 0xcb4 <__floatsisf+0x12>

00000ca2 <__floatsisf>:
     ca2:	97 fb       	bst	r25, 7
     ca4:	3e f4       	brtc	.+14     	; 0xcb4 <__floatsisf+0x12>
     ca6:	90 95       	com	r25
     ca8:	80 95       	com	r24
     caa:	70 95       	com	r23
     cac:	61 95       	neg	r22
     cae:	7f 4f       	sbci	r23, 0xFF	; 255
     cb0:	8f 4f       	sbci	r24, 0xFF	; 255
     cb2:	9f 4f       	sbci	r25, 0xFF	; 255
     cb4:	99 23       	and	r25, r25
     cb6:	a9 f0       	breq	.+42     	; 0xce2 <__floatsisf+0x40>
     cb8:	f9 2f       	mov	r31, r25
     cba:	96 e9       	ldi	r25, 0x96	; 150
     cbc:	bb 27       	eor	r27, r27
     cbe:	93 95       	inc	r25
     cc0:	f6 95       	lsr	r31
     cc2:	87 95       	ror	r24
     cc4:	77 95       	ror	r23
     cc6:	67 95       	ror	r22
     cc8:	b7 95       	ror	r27
     cca:	f1 11       	cpse	r31, r1
     ccc:	f8 cf       	rjmp	.-16     	; 0xcbe <__floatsisf+0x1c>
     cce:	fa f4       	brpl	.+62     	; 0xd0e <__floatsisf+0x6c>
     cd0:	bb 0f       	add	r27, r27
     cd2:	11 f4       	brne	.+4      	; 0xcd8 <__floatsisf+0x36>
     cd4:	60 ff       	sbrs	r22, 0
     cd6:	1b c0       	rjmp	.+54     	; 0xd0e <__floatsisf+0x6c>
     cd8:	6f 5f       	subi	r22, 0xFF	; 255
     cda:	7f 4f       	sbci	r23, 0xFF	; 255
     cdc:	8f 4f       	sbci	r24, 0xFF	; 255
     cde:	9f 4f       	sbci	r25, 0xFF	; 255
     ce0:	16 c0       	rjmp	.+44     	; 0xd0e <__floatsisf+0x6c>
     ce2:	88 23       	and	r24, r24
     ce4:	11 f0       	breq	.+4      	; 0xcea <__floatsisf+0x48>
     ce6:	96 e9       	ldi	r25, 0x96	; 150
     ce8:	11 c0       	rjmp	.+34     	; 0xd0c <__floatsisf+0x6a>
     cea:	77 23       	and	r23, r23
     cec:	21 f0       	breq	.+8      	; 0xcf6 <__floatsisf+0x54>
     cee:	9e e8       	ldi	r25, 0x8E	; 142
     cf0:	87 2f       	mov	r24, r23
     cf2:	76 2f       	mov	r23, r22
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__floatsisf+0x5e>
     cf6:	66 23       	and	r22, r22
     cf8:	71 f0       	breq	.+28     	; 0xd16 <__floatsisf+0x74>
     cfa:	96 e8       	ldi	r25, 0x86	; 134
     cfc:	86 2f       	mov	r24, r22
     cfe:	70 e0       	ldi	r23, 0x00	; 0
     d00:	60 e0       	ldi	r22, 0x00	; 0
     d02:	2a f0       	brmi	.+10     	; 0xd0e <__floatsisf+0x6c>
     d04:	9a 95       	dec	r25
     d06:	66 0f       	add	r22, r22
     d08:	77 1f       	adc	r23, r23
     d0a:	88 1f       	adc	r24, r24
     d0c:	da f7       	brpl	.-10     	; 0xd04 <__floatsisf+0x62>
     d0e:	88 0f       	add	r24, r24
     d10:	96 95       	lsr	r25
     d12:	87 95       	ror	r24
     d14:	97 f9       	bld	r25, 7
     d16:	08 95       	ret

00000d18 <__fp_inf>:
     d18:	97 f9       	bld	r25, 7
     d1a:	9f 67       	ori	r25, 0x7F	; 127
     d1c:	80 e8       	ldi	r24, 0x80	; 128
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	60 e0       	ldi	r22, 0x00	; 0
     d22:	08 95       	ret

00000d24 <__fp_nan>:
     d24:	9f ef       	ldi	r25, 0xFF	; 255
     d26:	80 ec       	ldi	r24, 0xC0	; 192
     d28:	08 95       	ret

00000d2a <__fp_pscA>:
     d2a:	00 24       	eor	r0, r0
     d2c:	0a 94       	dec	r0
     d2e:	16 16       	cp	r1, r22
     d30:	17 06       	cpc	r1, r23
     d32:	18 06       	cpc	r1, r24
     d34:	09 06       	cpc	r0, r25
     d36:	08 95       	ret

00000d38 <__fp_pscB>:
     d38:	00 24       	eor	r0, r0
     d3a:	0a 94       	dec	r0
     d3c:	12 16       	cp	r1, r18
     d3e:	13 06       	cpc	r1, r19
     d40:	14 06       	cpc	r1, r20
     d42:	05 06       	cpc	r0, r21
     d44:	08 95       	ret

00000d46 <__fp_round>:
     d46:	09 2e       	mov	r0, r25
     d48:	03 94       	inc	r0
     d4a:	00 0c       	add	r0, r0
     d4c:	11 f4       	brne	.+4      	; 0xd52 <__fp_round+0xc>
     d4e:	88 23       	and	r24, r24
     d50:	52 f0       	brmi	.+20     	; 0xd66 <__fp_round+0x20>
     d52:	bb 0f       	add	r27, r27
     d54:	40 f4       	brcc	.+16     	; 0xd66 <__fp_round+0x20>
     d56:	bf 2b       	or	r27, r31
     d58:	11 f4       	brne	.+4      	; 0xd5e <__fp_round+0x18>
     d5a:	60 ff       	sbrs	r22, 0
     d5c:	04 c0       	rjmp	.+8      	; 0xd66 <__fp_round+0x20>
     d5e:	6f 5f       	subi	r22, 0xFF	; 255
     d60:	7f 4f       	sbci	r23, 0xFF	; 255
     d62:	8f 4f       	sbci	r24, 0xFF	; 255
     d64:	9f 4f       	sbci	r25, 0xFF	; 255
     d66:	08 95       	ret

00000d68 <__fp_split3>:
     d68:	57 fd       	sbrc	r21, 7
     d6a:	90 58       	subi	r25, 0x80	; 128
     d6c:	44 0f       	add	r20, r20
     d6e:	55 1f       	adc	r21, r21
     d70:	59 f0       	breq	.+22     	; 0xd88 <__fp_splitA+0x10>
     d72:	5f 3f       	cpi	r21, 0xFF	; 255
     d74:	71 f0       	breq	.+28     	; 0xd92 <__fp_splitA+0x1a>
     d76:	47 95       	ror	r20

00000d78 <__fp_splitA>:
     d78:	88 0f       	add	r24, r24
     d7a:	97 fb       	bst	r25, 7
     d7c:	99 1f       	adc	r25, r25
     d7e:	61 f0       	breq	.+24     	; 0xd98 <__fp_splitA+0x20>
     d80:	9f 3f       	cpi	r25, 0xFF	; 255
     d82:	79 f0       	breq	.+30     	; 0xda2 <__fp_splitA+0x2a>
     d84:	87 95       	ror	r24
     d86:	08 95       	ret
     d88:	12 16       	cp	r1, r18
     d8a:	13 06       	cpc	r1, r19
     d8c:	14 06       	cpc	r1, r20
     d8e:	55 1f       	adc	r21, r21
     d90:	f2 cf       	rjmp	.-28     	; 0xd76 <__fp_split3+0xe>
     d92:	46 95       	lsr	r20
     d94:	f1 df       	rcall	.-30     	; 0xd78 <__fp_splitA>
     d96:	08 c0       	rjmp	.+16     	; 0xda8 <__fp_splitA+0x30>
     d98:	16 16       	cp	r1, r22
     d9a:	17 06       	cpc	r1, r23
     d9c:	18 06       	cpc	r1, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	f1 cf       	rjmp	.-30     	; 0xd84 <__fp_splitA+0xc>
     da2:	86 95       	lsr	r24
     da4:	71 05       	cpc	r23, r1
     da6:	61 05       	cpc	r22, r1
     da8:	08 94       	sec
     daa:	08 95       	ret

00000dac <__fp_zero>:
     dac:	e8 94       	clt

00000dae <__fp_szero>:
     dae:	bb 27       	eor	r27, r27
     db0:	66 27       	eor	r22, r22
     db2:	77 27       	eor	r23, r23
     db4:	cb 01       	movw	r24, r22
     db6:	97 f9       	bld	r25, 7
     db8:	08 95       	ret

00000dba <__gesf2>:
     dba:	0e 94 6c 07 	call	0xed8	; 0xed8 <__fp_cmp>
     dbe:	08 f4       	brcc	.+2      	; 0xdc2 <__gesf2+0x8>
     dc0:	8f ef       	ldi	r24, 0xFF	; 255
     dc2:	08 95       	ret

00000dc4 <pow>:
     dc4:	fa 01       	movw	r30, r20
     dc6:	ee 0f       	add	r30, r30
     dc8:	ff 1f       	adc	r31, r31
     dca:	30 96       	adiw	r30, 0x00	; 0
     dcc:	21 05       	cpc	r18, r1
     dce:	31 05       	cpc	r19, r1
     dd0:	a1 f1       	breq	.+104    	; 0xe3a <pow+0x76>
     dd2:	61 15       	cp	r22, r1
     dd4:	71 05       	cpc	r23, r1
     dd6:	61 f4       	brne	.+24     	; 0xdf0 <pow+0x2c>
     dd8:	80 38       	cpi	r24, 0x80	; 128
     dda:	bf e3       	ldi	r27, 0x3F	; 63
     ddc:	9b 07       	cpc	r25, r27
     dde:	49 f1       	breq	.+82     	; 0xe32 <pow+0x6e>
     de0:	68 94       	set
     de2:	90 38       	cpi	r25, 0x80	; 128
     de4:	81 05       	cpc	r24, r1
     de6:	61 f0       	breq	.+24     	; 0xe00 <pow+0x3c>
     de8:	80 38       	cpi	r24, 0x80	; 128
     dea:	bf ef       	ldi	r27, 0xFF	; 255
     dec:	9b 07       	cpc	r25, r27
     dee:	41 f0       	breq	.+16     	; 0xe00 <pow+0x3c>
     df0:	99 23       	and	r25, r25
     df2:	4a f5       	brpl	.+82     	; 0xe46 <pow+0x82>
     df4:	ff 3f       	cpi	r31, 0xFF	; 255
     df6:	e1 05       	cpc	r30, r1
     df8:	31 05       	cpc	r19, r1
     dfa:	21 05       	cpc	r18, r1
     dfc:	19 f1       	breq	.+70     	; 0xe44 <pow+0x80>
     dfe:	e8 94       	clt
     e00:	08 94       	sec
     e02:	e7 95       	ror	r30
     e04:	d9 01       	movw	r26, r18
     e06:	aa 23       	and	r26, r26
     e08:	29 f4       	brne	.+10     	; 0xe14 <pow+0x50>
     e0a:	ab 2f       	mov	r26, r27
     e0c:	be 2f       	mov	r27, r30
     e0e:	f8 5f       	subi	r31, 0xF8	; 248
     e10:	d0 f3       	brcs	.-12     	; 0xe06 <pow+0x42>
     e12:	10 c0       	rjmp	.+32     	; 0xe34 <pow+0x70>
     e14:	ff 5f       	subi	r31, 0xFF	; 255
     e16:	70 f4       	brcc	.+28     	; 0xe34 <pow+0x70>
     e18:	a6 95       	lsr	r26
     e1a:	e0 f7       	brcc	.-8      	; 0xe14 <pow+0x50>
     e1c:	f7 39       	cpi	r31, 0x97	; 151
     e1e:	50 f0       	brcs	.+20     	; 0xe34 <pow+0x70>
     e20:	19 f0       	breq	.+6      	; 0xe28 <pow+0x64>
     e22:	ff 3a       	cpi	r31, 0xAF	; 175
     e24:	38 f4       	brcc	.+14     	; 0xe34 <pow+0x70>
     e26:	9f 77       	andi	r25, 0x7F	; 127
     e28:	9f 93       	push	r25
     e2a:	0d d0       	rcall	.+26     	; 0xe46 <pow+0x82>
     e2c:	0f 90       	pop	r0
     e2e:	07 fc       	sbrc	r0, 7
     e30:	90 58       	subi	r25, 0x80	; 128
     e32:	08 95       	ret
     e34:	46 f0       	brts	.+16     	; 0xe46 <pow+0x82>
     e36:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__fp_nan>
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	80 e8       	ldi	r24, 0x80	; 128
     e40:	9f e3       	ldi	r25, 0x3F	; 63
     e42:	08 95       	ret
     e44:	4f e7       	ldi	r20, 0x7F	; 127
     e46:	9f 77       	andi	r25, 0x7F	; 127
     e48:	5f 93       	push	r21
     e4a:	4f 93       	push	r20
     e4c:	3f 93       	push	r19
     e4e:	2f 93       	push	r18
     e50:	0e 94 01 08 	call	0x1002	; 0x1002 <log>
     e54:	2f 91       	pop	r18
     e56:	3f 91       	pop	r19
     e58:	4f 91       	pop	r20
     e5a:	5f 91       	pop	r21
     e5c:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__mulsf3>
     e60:	0c 94 3a 07 	jmp	0xe74	; 0xe74 <exp>
     e64:	29 f4       	brne	.+10     	; 0xe70 <pow+0xac>
     e66:	16 f0       	brts	.+4      	; 0xe6c <pow+0xa8>
     e68:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__fp_inf>
     e6c:	0c 94 d6 06 	jmp	0xdac	; 0xdac <__fp_zero>
     e70:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__fp_nan>

00000e74 <exp>:
     e74:	0e 94 bc 06 	call	0xd78	; 0xd78 <__fp_splitA>
     e78:	a8 f3       	brcs	.-22     	; 0xe64 <pow+0xa0>
     e7a:	96 38       	cpi	r25, 0x86	; 134
     e7c:	a0 f7       	brcc	.-24     	; 0xe66 <pow+0xa2>
     e7e:	07 f8       	bld	r0, 7
     e80:	0f 92       	push	r0
     e82:	e8 94       	clt
     e84:	2b e3       	ldi	r18, 0x3B	; 59
     e86:	3a ea       	ldi	r19, 0xAA	; 170
     e88:	48 eb       	ldi	r20, 0xB8	; 184
     e8a:	5f e7       	ldi	r21, 0x7F	; 127
     e8c:	0e 94 93 08 	call	0x1126	; 0x1126 <__mulsf3_pse>
     e90:	0f 92       	push	r0
     e92:	0f 92       	push	r0
     e94:	0f 92       	push	r0
     e96:	4d b7       	in	r20, 0x3d	; 61
     e98:	5e b7       	in	r21, 0x3e	; 62
     e9a:	0f 92       	push	r0
     e9c:	0e 94 49 08 	call	0x1092	; 0x1092 <modf>
     ea0:	e4 e5       	ldi	r30, 0x54	; 84
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	0e 94 90 07 	call	0xf20	; 0xf20 <__fp_powser>
     ea8:	4f 91       	pop	r20
     eaa:	5f 91       	pop	r21
     eac:	ef 91       	pop	r30
     eae:	ff 91       	pop	r31
     eb0:	e5 95       	asr	r30
     eb2:	ee 1f       	adc	r30, r30
     eb4:	ff 1f       	adc	r31, r31
     eb6:	49 f0       	breq	.+18     	; 0xeca <exp+0x56>
     eb8:	fe 57       	subi	r31, 0x7E	; 126
     eba:	e0 68       	ori	r30, 0x80	; 128
     ebc:	44 27       	eor	r20, r20
     ebe:	ee 0f       	add	r30, r30
     ec0:	44 1f       	adc	r20, r20
     ec2:	fa 95       	dec	r31
     ec4:	e1 f7       	brne	.-8      	; 0xebe <exp+0x4a>
     ec6:	41 95       	neg	r20
     ec8:	55 0b       	sbc	r21, r21
     eca:	0e 94 c3 07 	call	0xf86	; 0xf86 <ldexp>
     ece:	0f 90       	pop	r0
     ed0:	07 fe       	sbrs	r0, 7
     ed2:	0c 94 b7 07 	jmp	0xf6e	; 0xf6e <inverse>
     ed6:	08 95       	ret

00000ed8 <__fp_cmp>:
     ed8:	99 0f       	add	r25, r25
     eda:	00 08       	sbc	r0, r0
     edc:	55 0f       	add	r21, r21
     ede:	aa 0b       	sbc	r26, r26
     ee0:	e0 e8       	ldi	r30, 0x80	; 128
     ee2:	fe ef       	ldi	r31, 0xFE	; 254
     ee4:	16 16       	cp	r1, r22
     ee6:	17 06       	cpc	r1, r23
     ee8:	e8 07       	cpc	r30, r24
     eea:	f9 07       	cpc	r31, r25
     eec:	c0 f0       	brcs	.+48     	; 0xf1e <__fp_cmp+0x46>
     eee:	12 16       	cp	r1, r18
     ef0:	13 06       	cpc	r1, r19
     ef2:	e4 07       	cpc	r30, r20
     ef4:	f5 07       	cpc	r31, r21
     ef6:	98 f0       	brcs	.+38     	; 0xf1e <__fp_cmp+0x46>
     ef8:	62 1b       	sub	r22, r18
     efa:	73 0b       	sbc	r23, r19
     efc:	84 0b       	sbc	r24, r20
     efe:	95 0b       	sbc	r25, r21
     f00:	39 f4       	brne	.+14     	; 0xf10 <__fp_cmp+0x38>
     f02:	0a 26       	eor	r0, r26
     f04:	61 f0       	breq	.+24     	; 0xf1e <__fp_cmp+0x46>
     f06:	23 2b       	or	r18, r19
     f08:	24 2b       	or	r18, r20
     f0a:	25 2b       	or	r18, r21
     f0c:	21 f4       	brne	.+8      	; 0xf16 <__fp_cmp+0x3e>
     f0e:	08 95       	ret
     f10:	0a 26       	eor	r0, r26
     f12:	09 f4       	brne	.+2      	; 0xf16 <__fp_cmp+0x3e>
     f14:	a1 40       	sbci	r26, 0x01	; 1
     f16:	a6 95       	lsr	r26
     f18:	8f ef       	ldi	r24, 0xFF	; 255
     f1a:	81 1d       	adc	r24, r1
     f1c:	81 1d       	adc	r24, r1
     f1e:	08 95       	ret

00000f20 <__fp_powser>:
     f20:	df 93       	push	r29
     f22:	cf 93       	push	r28
     f24:	1f 93       	push	r17
     f26:	0f 93       	push	r16
     f28:	ff 92       	push	r15
     f2a:	ef 92       	push	r14
     f2c:	df 92       	push	r13
     f2e:	7b 01       	movw	r14, r22
     f30:	8c 01       	movw	r16, r24
     f32:	68 94       	set
     f34:	06 c0       	rjmp	.+12     	; 0xf42 <__fp_powser+0x22>
     f36:	da 2e       	mov	r13, r26
     f38:	ef 01       	movw	r28, r30
     f3a:	0e 94 90 08 	call	0x1120	; 0x1120 <__mulsf3x>
     f3e:	fe 01       	movw	r30, r28
     f40:	e8 94       	clt
     f42:	a5 91       	lpm	r26, Z+
     f44:	25 91       	lpm	r18, Z+
     f46:	35 91       	lpm	r19, Z+
     f48:	45 91       	lpm	r20, Z+
     f4a:	55 91       	lpm	r21, Z+
     f4c:	a6 f3       	brts	.-24     	; 0xf36 <__fp_powser+0x16>
     f4e:	ef 01       	movw	r28, r30
     f50:	0e 94 59 05 	call	0xab2	; 0xab2 <__addsf3x>
     f54:	fe 01       	movw	r30, r28
     f56:	97 01       	movw	r18, r14
     f58:	a8 01       	movw	r20, r16
     f5a:	da 94       	dec	r13
     f5c:	69 f7       	brne	.-38     	; 0xf38 <__fp_powser+0x18>
     f5e:	df 90       	pop	r13
     f60:	ef 90       	pop	r14
     f62:	ff 90       	pop	r15
     f64:	0f 91       	pop	r16
     f66:	1f 91       	pop	r17
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	08 95       	ret

00000f6e <inverse>:
     f6e:	9b 01       	movw	r18, r22
     f70:	ac 01       	movw	r20, r24
     f72:	60 e0       	ldi	r22, 0x00	; 0
     f74:	70 e0       	ldi	r23, 0x00	; 0
     f76:	80 e8       	ldi	r24, 0x80	; 128
     f78:	9f e3       	ldi	r25, 0x3F	; 63
     f7a:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__divsf3>
     f7e:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__fp_inf>
     f82:	0c 94 ea 08 	jmp	0x11d4	; 0x11d4 <__fp_mpack>

00000f86 <ldexp>:
     f86:	0e 94 bc 06 	call	0xd78	; 0xd78 <__fp_splitA>
     f8a:	d8 f3       	brcs	.-10     	; 0xf82 <inverse+0x14>
     f8c:	99 23       	and	r25, r25
     f8e:	c9 f3       	breq	.-14     	; 0xf82 <inverse+0x14>
     f90:	94 0f       	add	r25, r20
     f92:	51 1d       	adc	r21, r1
     f94:	a3 f3       	brvs	.-24     	; 0xf7e <inverse+0x10>
     f96:	91 50       	subi	r25, 0x01	; 1
     f98:	50 40       	sbci	r21, 0x00	; 0
     f9a:	94 f0       	brlt	.+36     	; 0xfc0 <ldexp+0x3a>
     f9c:	59 f0       	breq	.+22     	; 0xfb4 <ldexp+0x2e>
     f9e:	88 23       	and	r24, r24
     fa0:	32 f0       	brmi	.+12     	; 0xfae <ldexp+0x28>
     fa2:	66 0f       	add	r22, r22
     fa4:	77 1f       	adc	r23, r23
     fa6:	88 1f       	adc	r24, r24
     fa8:	91 50       	subi	r25, 0x01	; 1
     faa:	50 40       	sbci	r21, 0x00	; 0
     fac:	c1 f7       	brne	.-16     	; 0xf9e <ldexp+0x18>
     fae:	9e 3f       	cpi	r25, 0xFE	; 254
     fb0:	51 05       	cpc	r21, r1
     fb2:	2c f7       	brge	.-54     	; 0xf7e <inverse+0x10>
     fb4:	88 0f       	add	r24, r24
     fb6:	91 1d       	adc	r25, r1
     fb8:	96 95       	lsr	r25
     fba:	87 95       	ror	r24
     fbc:	97 f9       	bld	r25, 7
     fbe:	08 95       	ret
     fc0:	5f 3f       	cpi	r21, 0xFF	; 255
     fc2:	ac f0       	brlt	.+42     	; 0xfee <ldexp+0x68>
     fc4:	98 3e       	cpi	r25, 0xE8	; 232
     fc6:	9c f0       	brlt	.+38     	; 0xfee <ldexp+0x68>
     fc8:	bb 27       	eor	r27, r27
     fca:	86 95       	lsr	r24
     fcc:	77 95       	ror	r23
     fce:	67 95       	ror	r22
     fd0:	b7 95       	ror	r27
     fd2:	08 f4       	brcc	.+2      	; 0xfd6 <ldexp+0x50>
     fd4:	b1 60       	ori	r27, 0x01	; 1
     fd6:	93 95       	inc	r25
     fd8:	c1 f7       	brne	.-16     	; 0xfca <ldexp+0x44>
     fda:	bb 0f       	add	r27, r27
     fdc:	58 f7       	brcc	.-42     	; 0xfb4 <ldexp+0x2e>
     fde:	11 f4       	brne	.+4      	; 0xfe4 <ldexp+0x5e>
     fe0:	60 ff       	sbrs	r22, 0
     fe2:	e8 cf       	rjmp	.-48     	; 0xfb4 <ldexp+0x2e>
     fe4:	6f 5f       	subi	r22, 0xFF	; 255
     fe6:	7f 4f       	sbci	r23, 0xFF	; 255
     fe8:	8f 4f       	sbci	r24, 0xFF	; 255
     fea:	9f 4f       	sbci	r25, 0xFF	; 255
     fec:	e3 cf       	rjmp	.-58     	; 0xfb4 <ldexp+0x2e>
     fee:	0c 94 d7 06 	jmp	0xdae	; 0xdae <__fp_szero>
     ff2:	16 f0       	brts	.+4      	; 0xff8 <ldexp+0x72>
     ff4:	0c 94 ea 08 	jmp	0x11d4	; 0x11d4 <__fp_mpack>
     ff8:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__fp_nan>
     ffc:	68 94       	set
     ffe:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__fp_inf>

00001002 <log>:
    1002:	0e 94 bc 06 	call	0xd78	; 0xd78 <__fp_splitA>
    1006:	a8 f3       	brcs	.-22     	; 0xff2 <ldexp+0x6c>
    1008:	99 23       	and	r25, r25
    100a:	c1 f3       	breq	.-16     	; 0xffc <ldexp+0x76>
    100c:	ae f3       	brts	.-22     	; 0xff8 <ldexp+0x72>
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	1f 93       	push	r17
    1014:	0f 93       	push	r16
    1016:	ff 92       	push	r15
    1018:	c9 2f       	mov	r28, r25
    101a:	dd 27       	eor	r29, r29
    101c:	88 23       	and	r24, r24
    101e:	2a f0       	brmi	.+10     	; 0x102a <log+0x28>
    1020:	21 97       	sbiw	r28, 0x01	; 1
    1022:	66 0f       	add	r22, r22
    1024:	77 1f       	adc	r23, r23
    1026:	88 1f       	adc	r24, r24
    1028:	da f7       	brpl	.-10     	; 0x1020 <log+0x1e>
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	40 e8       	ldi	r20, 0x80	; 128
    1030:	5f eb       	ldi	r21, 0xBF	; 191
    1032:	9f e3       	ldi	r25, 0x3F	; 63
    1034:	88 39       	cpi	r24, 0x98	; 152
    1036:	20 f0       	brcs	.+8      	; 0x1040 <log+0x3e>
    1038:	80 3e       	cpi	r24, 0xE0	; 224
    103a:	38 f0       	brcs	.+14     	; 0x104a <log+0x48>
    103c:	21 96       	adiw	r28, 0x01	; 1
    103e:	8f 77       	andi	r24, 0x7F	; 127
    1040:	0e 94 42 05 	call	0xa84	; 0xa84 <__addsf3>
    1044:	ec e7       	ldi	r30, 0x7C	; 124
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	04 c0       	rjmp	.+8      	; 0x1052 <log+0x50>
    104a:	0e 94 42 05 	call	0xa84	; 0xa84 <__addsf3>
    104e:	e9 ea       	ldi	r30, 0xA9	; 169
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	0e 94 90 07 	call	0xf20	; 0xf20 <__fp_powser>
    1056:	8b 01       	movw	r16, r22
    1058:	be 01       	movw	r22, r28
    105a:	ec 01       	movw	r28, r24
    105c:	fb 2e       	mov	r15, r27
    105e:	6f 57       	subi	r22, 0x7F	; 127
    1060:	71 09       	sbc	r23, r1
    1062:	75 95       	asr	r23
    1064:	77 1f       	adc	r23, r23
    1066:	88 0b       	sbc	r24, r24
    1068:	99 0b       	sbc	r25, r25
    106a:	0e 94 51 06 	call	0xca2	; 0xca2 <__floatsisf>
    106e:	28 e1       	ldi	r18, 0x18	; 24
    1070:	32 e7       	ldi	r19, 0x72	; 114
    1072:	41 e3       	ldi	r20, 0x31	; 49
    1074:	5f e3       	ldi	r21, 0x3F	; 63
    1076:	0e 94 90 08 	call	0x1120	; 0x1120 <__mulsf3x>
    107a:	af 2d       	mov	r26, r15
    107c:	98 01       	movw	r18, r16
    107e:	ae 01       	movw	r20, r28
    1080:	ff 90       	pop	r15
    1082:	0f 91       	pop	r16
    1084:	1f 91       	pop	r17
    1086:	cf 91       	pop	r28
    1088:	df 91       	pop	r29
    108a:	0e 94 59 05 	call	0xab2	; 0xab2 <__addsf3x>
    108e:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <__fp_round>

00001092 <modf>:
    1092:	fa 01       	movw	r30, r20
    1094:	dc 01       	movw	r26, r24
    1096:	aa 0f       	add	r26, r26
    1098:	bb 1f       	adc	r27, r27
    109a:	9b 01       	movw	r18, r22
    109c:	ac 01       	movw	r20, r24
    109e:	bf 57       	subi	r27, 0x7F	; 127
    10a0:	28 f4       	brcc	.+10     	; 0x10ac <modf+0x1a>
    10a2:	22 27       	eor	r18, r18
    10a4:	33 27       	eor	r19, r19
    10a6:	44 27       	eor	r20, r20
    10a8:	50 78       	andi	r21, 0x80	; 128
    10aa:	20 c0       	rjmp	.+64     	; 0x10ec <modf+0x5a>
    10ac:	b7 51       	subi	r27, 0x17	; 23
    10ae:	90 f4       	brcc	.+36     	; 0x10d4 <modf+0x42>
    10b0:	ab 2f       	mov	r26, r27
    10b2:	00 24       	eor	r0, r0
    10b4:	46 95       	lsr	r20
    10b6:	37 95       	ror	r19
    10b8:	27 95       	ror	r18
    10ba:	01 1c       	adc	r0, r1
    10bc:	a3 95       	inc	r26
    10be:	d2 f3       	brmi	.-12     	; 0x10b4 <modf+0x22>
    10c0:	00 20       	and	r0, r0
    10c2:	71 f0       	breq	.+28     	; 0x10e0 <modf+0x4e>
    10c4:	22 0f       	add	r18, r18
    10c6:	33 1f       	adc	r19, r19
    10c8:	44 1f       	adc	r20, r20
    10ca:	b3 95       	inc	r27
    10cc:	da f3       	brmi	.-10     	; 0x10c4 <modf+0x32>
    10ce:	0e d0       	rcall	.+28     	; 0x10ec <modf+0x5a>
    10d0:	0c 94 41 05 	jmp	0xa82	; 0xa82 <__subsf3>
    10d4:	61 30       	cpi	r22, 0x01	; 1
    10d6:	71 05       	cpc	r23, r1
    10d8:	a0 e8       	ldi	r26, 0x80	; 128
    10da:	8a 07       	cpc	r24, r26
    10dc:	b9 46       	sbci	r27, 0x69	; 105
    10de:	30 f4       	brcc	.+12     	; 0x10ec <modf+0x5a>
    10e0:	9b 01       	movw	r18, r22
    10e2:	ac 01       	movw	r20, r24
    10e4:	66 27       	eor	r22, r22
    10e6:	77 27       	eor	r23, r23
    10e8:	88 27       	eor	r24, r24
    10ea:	90 78       	andi	r25, 0x80	; 128
    10ec:	30 96       	adiw	r30, 0x00	; 0
    10ee:	21 f0       	breq	.+8      	; 0x10f8 <modf+0x66>
    10f0:	20 83       	st	Z, r18
    10f2:	31 83       	std	Z+1, r19	; 0x01
    10f4:	42 83       	std	Z+2, r20	; 0x02
    10f6:	53 83       	std	Z+3, r21	; 0x03
    10f8:	08 95       	ret

000010fa <__mulsf3>:
    10fa:	0e 94 90 08 	call	0x1120	; 0x1120 <__mulsf3x>
    10fe:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <__fp_round>
    1102:	0e 94 95 06 	call	0xd2a	; 0xd2a <__fp_pscA>
    1106:	38 f0       	brcs	.+14     	; 0x1116 <__mulsf3+0x1c>
    1108:	0e 94 9c 06 	call	0xd38	; 0xd38 <__fp_pscB>
    110c:	20 f0       	brcs	.+8      	; 0x1116 <__mulsf3+0x1c>
    110e:	95 23       	and	r25, r21
    1110:	11 f0       	breq	.+4      	; 0x1116 <__mulsf3+0x1c>
    1112:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__fp_inf>
    1116:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__fp_nan>
    111a:	11 24       	eor	r1, r1
    111c:	0c 94 d7 06 	jmp	0xdae	; 0xdae <__fp_szero>

00001120 <__mulsf3x>:
    1120:	0e 94 b4 06 	call	0xd68	; 0xd68 <__fp_split3>
    1124:	70 f3       	brcs	.-36     	; 0x1102 <__mulsf3+0x8>

00001126 <__mulsf3_pse>:
    1126:	95 9f       	mul	r25, r21
    1128:	c1 f3       	breq	.-16     	; 0x111a <__mulsf3+0x20>
    112a:	95 0f       	add	r25, r21
    112c:	50 e0       	ldi	r21, 0x00	; 0
    112e:	55 1f       	adc	r21, r21
    1130:	62 9f       	mul	r22, r18
    1132:	f0 01       	movw	r30, r0
    1134:	72 9f       	mul	r23, r18
    1136:	bb 27       	eor	r27, r27
    1138:	f0 0d       	add	r31, r0
    113a:	b1 1d       	adc	r27, r1
    113c:	63 9f       	mul	r22, r19
    113e:	aa 27       	eor	r26, r26
    1140:	f0 0d       	add	r31, r0
    1142:	b1 1d       	adc	r27, r1
    1144:	aa 1f       	adc	r26, r26
    1146:	64 9f       	mul	r22, r20
    1148:	66 27       	eor	r22, r22
    114a:	b0 0d       	add	r27, r0
    114c:	a1 1d       	adc	r26, r1
    114e:	66 1f       	adc	r22, r22
    1150:	82 9f       	mul	r24, r18
    1152:	22 27       	eor	r18, r18
    1154:	b0 0d       	add	r27, r0
    1156:	a1 1d       	adc	r26, r1
    1158:	62 1f       	adc	r22, r18
    115a:	73 9f       	mul	r23, r19
    115c:	b0 0d       	add	r27, r0
    115e:	a1 1d       	adc	r26, r1
    1160:	62 1f       	adc	r22, r18
    1162:	83 9f       	mul	r24, r19
    1164:	a0 0d       	add	r26, r0
    1166:	61 1d       	adc	r22, r1
    1168:	22 1f       	adc	r18, r18
    116a:	74 9f       	mul	r23, r20
    116c:	33 27       	eor	r19, r19
    116e:	a0 0d       	add	r26, r0
    1170:	61 1d       	adc	r22, r1
    1172:	23 1f       	adc	r18, r19
    1174:	84 9f       	mul	r24, r20
    1176:	60 0d       	add	r22, r0
    1178:	21 1d       	adc	r18, r1
    117a:	82 2f       	mov	r24, r18
    117c:	76 2f       	mov	r23, r22
    117e:	6a 2f       	mov	r22, r26
    1180:	11 24       	eor	r1, r1
    1182:	9f 57       	subi	r25, 0x7F	; 127
    1184:	50 40       	sbci	r21, 0x00	; 0
    1186:	9a f0       	brmi	.+38     	; 0x11ae <__mulsf3_pse+0x88>
    1188:	f1 f0       	breq	.+60     	; 0x11c6 <__mulsf3_pse+0xa0>
    118a:	88 23       	and	r24, r24
    118c:	4a f0       	brmi	.+18     	; 0x11a0 <__mulsf3_pse+0x7a>
    118e:	ee 0f       	add	r30, r30
    1190:	ff 1f       	adc	r31, r31
    1192:	bb 1f       	adc	r27, r27
    1194:	66 1f       	adc	r22, r22
    1196:	77 1f       	adc	r23, r23
    1198:	88 1f       	adc	r24, r24
    119a:	91 50       	subi	r25, 0x01	; 1
    119c:	50 40       	sbci	r21, 0x00	; 0
    119e:	a9 f7       	brne	.-22     	; 0x118a <__mulsf3_pse+0x64>
    11a0:	9e 3f       	cpi	r25, 0xFE	; 254
    11a2:	51 05       	cpc	r21, r1
    11a4:	80 f0       	brcs	.+32     	; 0x11c6 <__mulsf3_pse+0xa0>
    11a6:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__fp_inf>
    11aa:	0c 94 d7 06 	jmp	0xdae	; 0xdae <__fp_szero>
    11ae:	5f 3f       	cpi	r21, 0xFF	; 255
    11b0:	e4 f3       	brlt	.-8      	; 0x11aa <__mulsf3_pse+0x84>
    11b2:	98 3e       	cpi	r25, 0xE8	; 232
    11b4:	d4 f3       	brlt	.-12     	; 0x11aa <__mulsf3_pse+0x84>
    11b6:	86 95       	lsr	r24
    11b8:	77 95       	ror	r23
    11ba:	67 95       	ror	r22
    11bc:	b7 95       	ror	r27
    11be:	f7 95       	ror	r31
    11c0:	e7 95       	ror	r30
    11c2:	9f 5f       	subi	r25, 0xFF	; 255
    11c4:	c1 f7       	brne	.-16     	; 0x11b6 <__mulsf3_pse+0x90>
    11c6:	fe 2b       	or	r31, r30
    11c8:	88 0f       	add	r24, r24
    11ca:	91 1d       	adc	r25, r1
    11cc:	96 95       	lsr	r25
    11ce:	87 95       	ror	r24
    11d0:	97 f9       	bld	r25, 7
    11d2:	08 95       	ret

000011d4 <__fp_mpack>:
    11d4:	9f 3f       	cpi	r25, 0xFF	; 255
    11d6:	31 f0       	breq	.+12     	; 0x11e4 <__fp_mpack_finite+0xc>

000011d8 <__fp_mpack_finite>:
    11d8:	91 50       	subi	r25, 0x01	; 1
    11da:	20 f4       	brcc	.+8      	; 0x11e4 <__fp_mpack_finite+0xc>
    11dc:	87 95       	ror	r24
    11de:	77 95       	ror	r23
    11e0:	67 95       	ror	r22
    11e2:	b7 95       	ror	r27
    11e4:	88 0f       	add	r24, r24
    11e6:	91 1d       	adc	r25, r1
    11e8:	96 95       	lsr	r25
    11ea:	87 95       	ror	r24
    11ec:	97 f9       	bld	r25, 7
    11ee:	08 95       	ret

000011f0 <_exit>:
    11f0:	f8 94       	cli

000011f2 <__stop_program>:
    11f2:	ff cf       	rjmp	.-2      	; 0x11f2 <__stop_program>
