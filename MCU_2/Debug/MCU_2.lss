
MCU_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000a5e  00000af2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  00000af4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000af4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b7c  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c2  00000000  00000000  00001774  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006b2  00000000  00000000  00001f36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  000025e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e2  00000000  00000000  000026dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ef  00000000  00000000  00002bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002ead  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
   4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
   8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
   c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  54:	07 63       	ori	r16, 0x37	; 55
  56:	42 36       	cpi	r20, 0x62	; 98
  58:	b7 9b       	sbis	0x16, 7	; 22
  5a:	d8 a7       	std	Y+40, r29	; 0x28
  5c:	1a 39       	cpi	r17, 0x9A	; 154
  5e:	68 56       	subi	r22, 0x68	; 104
  60:	18 ae       	std	Y+56, r1	; 0x38
  62:	ba ab       	std	Y+50, r27	; 0x32
  64:	55 8c       	ldd	r5, Z+29	; 0x1d
  66:	1d 3c       	cpi	r17, 0xCD	; 205
  68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
  6a:	57 63       	ori	r21, 0x37	; 55
  6c:	bd 6d       	ori	r27, 0xDD	; 221
  6e:	ed fd       	.word	0xfded	; ????
  70:	75 3e       	cpi	r23, 0xE5	; 229
  72:	f6 17       	cp	r31, r22
  74:	72 31       	cpi	r23, 0x12	; 18
  76:	bf 00       	.word	0x00bf	; ????
  78:	00 00       	nop
  7a:	80 3f       	cpi	r24, 0xF0	; 240
  7c:	08 00       	.word	0x0008	; ????
  7e:	00 00       	nop
  80:	be 92       	st	-X, r11
  82:	24 49       	sbci	r18, 0x94	; 148
  84:	12 3e       	cpi	r17, 0xE2	; 226
  86:	ab aa       	std	Y+51, r10	; 0x33
  88:	aa 2a       	or	r10, r26
  8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
  8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
  8e:	4c 3e       	cpi	r20, 0xEC	; 236
  90:	00 00       	nop
  92:	00 80       	ld	r0, Z
  94:	be ab       	std	Y+54, r27	; 0x36
  96:	aa aa       	std	Y+50, r10	; 0x32
  98:	aa 3e       	cpi	r26, 0xEA	; 234
  9a:	00 00       	nop
  9c:	00 00       	nop
  9e:	bf 00       	.word	0x00bf	; ????
  a0:	00 00       	nop
  a2:	80 3f       	cpi	r24, 0xF0	; 240
  a4:	00 00       	nop
  a6:	00 00       	nop
  a8:	00 08       	sbc	r0, r0
  aa:	41 78       	andi	r20, 0x81	; 129
  ac:	d3 bb       	out	0x13, r29	; 19
  ae:	43 87       	std	Z+11, r20	; 0x0b
  b0:	d1 13       	cpse	r29, r17
  b2:	3d 19       	sub	r19, r13
  b4:	0e 3c       	cpi	r16, 0xCE	; 206
  b6:	c3 bd       	out	0x23, r28	; 35
  b8:	42 82       	std	Z+2, r4	; 0x02
  ba:	ad 2b       	or	r26, r29
  bc:	3e 68       	ori	r19, 0x8E	; 142
  be:	ec 82       	std	Y+4, r14	; 0x04
  c0:	76 be       	out	0x36, r7	; 54
  c2:	d9 8f       	std	Y+25, r29	; 0x19
  c4:	e1 a9       	ldd	r30, Z+49	; 0x31
  c6:	3e 4c       	sbci	r19, 0xCE	; 206
  c8:	80 ef       	ldi	r24, 0xF0	; 240
  ca:	ff be       	out	0x3f, r15	; 63
  cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <log+0x64>
  ce:	ff 7f       	andi	r31, 0xFF	; 255
  d0:	3f 00       	.word	0x003f	; ????
  d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
  d6:	11 24       	eor	r1, r1
  d8:	1f be       	out	0x3f, r1	; 63
  da:	cf e5       	ldi	r28, 0x5F	; 95
  dc:	d8 e0       	ldi	r29, 0x08	; 8
  de:	de bf       	out	0x3e, r29	; 62
  e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
  e2:	10 e0       	ldi	r17, 0x00	; 0
  e4:	a0 e6       	ldi	r26, 0x60	; 96
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	ee e5       	ldi	r30, 0x5E	; 94
  ea:	fa e0       	ldi	r31, 0x0A	; 10
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
  ee:	05 90       	lpm	r0, Z+
  f0:	0d 92       	st	X+, r0
  f2:	a2 36       	cpi	r26, 0x62	; 98
  f4:	b1 07       	cpc	r27, r17
  f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
  f8:	20 e0       	ldi	r18, 0x00	; 0
  fa:	a2 e6       	ldi	r26, 0x62	; 98
  fc:	b0 e0       	ldi	r27, 0x00	; 0
  fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
 100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
 102:	a4 36       	cpi	r26, 0x64	; 100
 104:	b2 07       	cpc	r27, r18
 106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
 108:	0e 94 ce 00 	call	0x19c	; 0x19c <main>
 10c:	0c 94 2d 05 	jmp	0xa5a	; 0xa5a <_exit>

00000110 <__bad_interrupt>:
 110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <EEPROM_inti>:
uint8_t FIRST_WORD = 0x00;
uint8_t SECOND_WORD = 0x08;

void EEPROM_inti(uint8_t prescalar)
{
	TWI_init(prescalar);
 114:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <TWI_init>
 118:	08 95       	ret

0000011a <EEPROM_write>:
}
void EEPROM_write(uint8_t *data)
{
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	ec 01       	movw	r28, r24
	if(TWI_start() == EVENT_OK)
 120:	0e 94 1c 01 	call	0x238	; 0x238 <TWI_start>
 124:	81 11       	cpse	r24, r1
 126:	1e c0       	rjmp	.+60     	; 0x164 <EEPROM_write+0x4a>
	{
		if(TWI_send_address(EEPROM_ADDRESS,Write) == SLA_W_ACK_STATE)
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	8e ea       	ldi	r24, 0xAE	; 174
 12c:	0e 94 30 01 	call	0x260	; 0x260 <TWI_send_address>
 130:	88 31       	cpi	r24, 0x18	; 24
 132:	c1 f4       	brne	.+48     	; 0x164 <EEPROM_write+0x4a>
		{
			if(TWI_send_address(FIRST_WORD,Write) == SLA_W_ACK_STATE)
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 13a:	0e 94 30 01 	call	0x260	; 0x260 <TWI_send_address>
 13e:	88 31       	cpi	r24, 0x18	; 24
 140:	89 f4       	brne	.+34     	; 0x164 <EEPROM_write+0x4a>
			{
				if(TWI_data_event(&SECOND_WORD,Write,ACK) == SLA_W_ACK_STATE)
 142:	40 e0       	ldi	r20, 0x00	; 0
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	80 e6       	ldi	r24, 0x60	; 96
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 55 01 	call	0x2aa	; 0x2aa <TWI_data_event>
 14e:	88 31       	cpi	r24, 0x18	; 24
 150:	49 f4       	brne	.+18     	; 0x164 <EEPROM_write+0x4a>
				{
					if(TWI_data_event(data,Write,ACK) == DATA_W_ACK_STATE)
 152:	40 e0       	ldi	r20, 0x00	; 0
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	ce 01       	movw	r24, r28
 158:	0e 94 55 01 	call	0x2aa	; 0x2aa <TWI_data_event>
 15c:	88 32       	cpi	r24, 0x28	; 40
 15e:	11 f4       	brne	.+4      	; 0x164 <EEPROM_write+0x4a>
					{
						TWI_stop();
 160:	0e 94 99 01 	call	0x332	; 0x332 <TWI_stop>
					}
				}
			}
		}
	}
}
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <EEPROM_read>:
void EEPROM_read(uint8_t *data)
{
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	ec 01       	movw	r28, r24
	if(TWI_start() == EVENT_OK)
 170:	0e 94 1c 01 	call	0x238	; 0x238 <TWI_start>
 174:	81 11       	cpse	r24, r1
 176:	0f c0       	rjmp	.+30     	; 0x196 <EEPROM_read+0x2c>
	{
		if(TWI_send_address(EEPROM_ADDRESS,Write) == SLA_W_ACK_STATE)
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	8e ea       	ldi	r24, 0xAE	; 174
 17c:	0e 94 30 01 	call	0x260	; 0x260 <TWI_send_address>
 180:	88 31       	cpi	r24, 0x18	; 24
 182:	49 f4       	brne	.+18     	; 0x196 <EEPROM_read+0x2c>
		{
			if(TWI_data_event(data,Read,NOT_ACK) == DATA_R_NACK_STATE)
 184:	41 e0       	ldi	r20, 0x01	; 1
 186:	61 e0       	ldi	r22, 0x01	; 1
 188:	ce 01       	movw	r24, r28
 18a:	0e 94 55 01 	call	0x2aa	; 0x2aa <TWI_data_event>
 18e:	88 35       	cpi	r24, 0x58	; 88
 190:	11 f4       	brne	.+4      	; 0x196 <EEPROM_read+0x2c>
			{
				TWI_stop();
 192:	0e 94 99 01 	call	0x332	; 0x332 <TWI_stop>
			}
		}
	}

 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <main>:

uint8_t data = 0xFF;
uint8_t data_read;
int main(void)
{
	DDRB = 0xFF;
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	87 bb       	out	0x17, r24	; 23
    EEPROM_inti(1);
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	0e 94 8a 00 	call	0x114	; 0x114 <EEPROM_inti>
	EEPROM_write(&data);
 1a6:	81 e6       	ldi	r24, 0x61	; 97
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 8d 00 	call	0x11a	; 0x11a <EEPROM_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ae:	2f e3       	ldi	r18, 0x3F	; 63
 1b0:	8d e0       	ldi	r24, 0x0D	; 13
 1b2:	93 e0       	ldi	r25, 0x03	; 3
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	80 40       	sbci	r24, 0x00	; 0
 1b8:	90 40       	sbci	r25, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <main+0x18>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <main+0x22>
 1be:	00 00       	nop
	_delay_ms(1000);
    EEPROM_read(&data_read);
 1c0:	83 e6       	ldi	r24, 0x63	; 99
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 b5 00 	call	0x16a	; 0x16a <EEPROM_read>
	PORTB = data_read;
 1c8:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <data_read>
 1cc:	88 bb       	out	0x18, r24	; 24
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <main+0x32>

000001d0 <TWI_init>:
	status = (TWSR & 0xF8); // Reading TWI status register
	if(status != REPEATED_START_STATE)
		return REPEATED_START_NOT_SENT;
	else
		return EVENT_OK;
}
 1d0:	11 b8       	out	0x01, r1	; 1
 1d2:	80 31       	cpi	r24, 0x10	; 16
 1d4:	41 f0       	breq	.+16     	; 0x1e6 <TWI_init+0x16>
 1d6:	80 34       	cpi	r24, 0x40	; 64
 1d8:	51 f0       	breq	.+20     	; 0x1ee <TWI_init+0x1e>
 1da:	84 30       	cpi	r24, 0x04	; 4
 1dc:	71 f4       	brne	.+28     	; 0x1fa <TWI_init+0x2a>
 1de:	81 b1       	in	r24, 0x01	; 1
 1e0:	81 60       	ori	r24, 0x01	; 1
 1e2:	81 b9       	out	0x01, r24	; 1
 1e4:	0a c0       	rjmp	.+20     	; 0x1fa <TWI_init+0x2a>
 1e6:	81 b1       	in	r24, 0x01	; 1
 1e8:	82 60       	ori	r24, 0x02	; 2
 1ea:	81 b9       	out	0x01, r24	; 1
 1ec:	06 c0       	rjmp	.+12     	; 0x1fa <TWI_init+0x2a>
 1ee:	81 b1       	in	r24, 0x01	; 1
 1f0:	81 60       	ori	r24, 0x01	; 1
 1f2:	81 b9       	out	0x01, r24	; 1
 1f4:	81 b1       	in	r24, 0x01	; 1
 1f6:	82 60       	ori	r24, 0x02	; 2
 1f8:	81 b9       	out	0x01, r24	; 1
 1fa:	61 b1       	in	r22, 0x01	; 1
 1fc:	63 70       	andi	r22, 0x03	; 3
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 af 02 	call	0x55e	; 0x55e <__floatsisf>
 208:	9b 01       	movw	r18, r22
 20a:	ac 01       	movw	r20, r24
 20c:	60 e0       	ldi	r22, 0x00	; 0
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	80 e8       	ldi	r24, 0x80	; 128
 212:	90 e4       	ldi	r25, 0x40	; 64
 214:	0e 94 3b 03 	call	0x676	; 0x676 <pow>
 218:	9b 01       	movw	r18, r22
 21a:	ac 01       	movw	r20, r24
 21c:	0e 94 a0 01 	call	0x340	; 0x340 <__addsf3>
 220:	9b 01       	movw	r18, r22
 222:	ac 01       	movw	r20, r24
 224:	60 e0       	ldi	r22, 0x00	; 0
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	80 e8       	ldi	r24, 0x80	; 128
 22a:	9f e4       	ldi	r25, 0x4F	; 79
 22c:	0e 94 0c 02 	call	0x418	; 0x418 <__divsf3>
 230:	0e 94 7e 02 	call	0x4fc	; 0x4fc <__fixunssfsi>
 234:	60 b9       	out	0x00, r22	; 0
 236:	08 95       	ret

00000238 <TWI_start>:
 238:	86 b7       	in	r24, 0x36	; 54
 23a:	80 68       	ori	r24, 0x80	; 128
 23c:	86 bf       	out	0x36, r24	; 54
 23e:	86 b7       	in	r24, 0x36	; 54
 240:	80 62       	ori	r24, 0x20	; 32
 242:	86 bf       	out	0x36, r24	; 54
 244:	86 b7       	in	r24, 0x36	; 54
 246:	84 60       	ori	r24, 0x04	; 4
 248:	86 bf       	out	0x36, r24	; 54
 24a:	06 b6       	in	r0, 0x36	; 54
 24c:	07 fe       	sbrs	r0, 7
 24e:	fd cf       	rjmp	.-6      	; 0x24a <TWI_start+0x12>
 250:	81 b1       	in	r24, 0x01	; 1
 252:	88 7f       	andi	r24, 0xF8	; 248
 254:	88 30       	cpi	r24, 0x08	; 8
 256:	11 f0       	breq	.+4      	; 0x25c <TWI_start+0x24>
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	08 95       	ret
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	08 95       	ret

00000260 <TWI_send_address>:

EN_returnStatus_t TWI_send_address(uint8_t address, uint8_t r_or_w)
{
	uint8_t status;
	if(r_or_w == Write)
 260:	61 11       	cpse	r22, r1
 262:	02 c0       	rjmp	.+4      	; 0x268 <TWI_send_address+0x8>
		TWDR = address + Write; // Writing SLA+W in TWI data register
 264:	83 b9       	out	0x03, r24	; 3
 266:	04 c0       	rjmp	.+8      	; 0x270 <TWI_send_address+0x10>
	else if(r_or_w == Read)
 268:	61 30       	cpi	r22, 0x01	; 1
 26a:	11 f4       	brne	.+4      	; 0x270 <TWI_send_address+0x10>
		TWDR = address + Read; // Writing SLA+R in TWI data register
 26c:	8f 5f       	subi	r24, 0xFF	; 255
 26e:	83 b9       	out	0x03, r24	; 3
	else
	{
		//error
	}
	set_pin(TWCR,TWINT); // Clear interrupt flag in TWI control register
 270:	86 b7       	in	r24, 0x36	; 54
 272:	80 68       	ori	r24, 0x80	; 128
 274:	86 bf       	out	0x36, r24	; 54
	set_pin(TWCR,TWEN); // Enable TWI
 276:	86 b7       	in	r24, 0x36	; 54
 278:	84 60       	ori	r24, 0x04	; 4
 27a:	86 bf       	out	0x36, r24	; 54
	while (!( TWCR & (1 << TWINT) )); // Wait for TWINT Flag set
 27c:	06 b6       	in	r0, 0x36	; 54
 27e:	07 fe       	sbrs	r0, 7
 280:	fd cf       	rjmp	.-6      	; 0x27c <TWI_send_address+0x1c>
	
	// Check state on TWI Status register
	status = (TWSR & 0xF8); // Reading TWI status register
 282:	81 b1       	in	r24, 0x01	; 1
 284:	88 7f       	andi	r24, 0xF8	; 248
	if( status == SLA_W_ACK_STATE )
 286:	88 31       	cpi	r24, 0x18	; 24
 288:	41 f0       	breq	.+16     	; 0x29a <TWI_send_address+0x3a>
		return SLA_W_ACK_SENT;		// SLA+W transmitted & Ack received  
	else if( status == SLA_W_NACK_STATE )
 28a:	80 32       	cpi	r24, 0x20	; 32
 28c:	41 f0       	breq	.+16     	; 0x29e <TWI_send_address+0x3e>
		return SLA_W_NACK_SENT;		// SLA+W transmitted & NO Ack received
	else if( status == SLA_R_ACK_STATE )
 28e:	80 34       	cpi	r24, 0x40	; 64
 290:	41 f0       	breq	.+16     	; 0x2a2 <TWI_send_address+0x42>
		return SLA_R_ACK_SENT;		// SLA+R transmitted & Ack received
	else if( status == SLA_R_NACK_STATE )
 292:	88 34       	cpi	r24, 0x48	; 72
 294:	41 f4       	brne	.+16     	; 0x2a6 <TWI_send_address+0x46>
		return SLA_R_NACK_SENT;		// SLA+R transmitted & NO Ack received
 296:	86 e0       	ldi	r24, 0x06	; 6
 298:	08 95       	ret
	while (!( TWCR & (1 << TWINT) )); // Wait for TWINT Flag set
	
	// Check state on TWI Status register
	status = (TWSR & 0xF8); // Reading TWI status register
	if( status == SLA_W_ACK_STATE )
		return SLA_W_ACK_SENT;		// SLA+W transmitted & Ack received  
 29a:	83 e0       	ldi	r24, 0x03	; 3
 29c:	08 95       	ret
	else if( status == SLA_W_NACK_STATE )
		return SLA_W_NACK_SENT;		// SLA+W transmitted & NO Ack received
 29e:	84 e0       	ldi	r24, 0x04	; 4
 2a0:	08 95       	ret
	else if( status == SLA_R_ACK_STATE )
		return SLA_R_ACK_SENT;		// SLA+R transmitted & Ack received
 2a2:	85 e0       	ldi	r24, 0x05	; 5
 2a4:	08 95       	ret
	else if( status == SLA_R_NACK_STATE )
		return SLA_R_NACK_SENT;		// SLA+R transmitted & NO Ack received
	else
		return SLA_RW_FAILED;
 2a6:	87 e0       	ldi	r24, 0x07	; 7
}
 2a8:	08 95       	ret

000002aa <TWI_data_event>:

EN_returnStatus_t TWI_data_event(uint8_t *data, uint8_t r_or_w, uint8_t ack)
{
	uint8_t status;
	if(r_or_w == Write)
 2aa:	61 11       	cpse	r22, r1
 2ac:	14 c0       	rjmp	.+40     	; 0x2d6 <TWI_data_event+0x2c>
	{
		TWDR = *data; // Put data into TWI data register
 2ae:	fc 01       	movw	r30, r24
 2b0:	80 81       	ld	r24, Z
 2b2:	83 b9       	out	0x03, r24	; 3
		set_pin(TWCR,TWINT); // clear interrupt flag in TWI control register
 2b4:	86 b7       	in	r24, 0x36	; 54
 2b6:	80 68       	ori	r24, 0x80	; 128
 2b8:	86 bf       	out	0x36, r24	; 54
		set_pin(TWCR,TWEN); // Enable TWI
 2ba:	86 b7       	in	r24, 0x36	; 54
 2bc:	84 60       	ori	r24, 0x04	; 4
 2be:	86 bf       	out	0x36, r24	; 54
		while (!( TWCR & (1 << TWINT) )); // Wait for TWINT Flag set
 2c0:	06 b6       	in	r0, 0x36	; 54
 2c2:	07 fe       	sbrs	r0, 7
 2c4:	fd cf       	rjmp	.-6      	; 0x2c0 <TWI_data_event+0x16>
		
		// Check state on TWI Status register
		status = (TWSR & 0xF8); // Reading TWI status register
 2c6:	81 b1       	in	r24, 0x01	; 1
 2c8:	88 7f       	andi	r24, 0xF8	; 248
		
		if( status == DATA_W_ACK_STATE )
 2ca:	88 32       	cpi	r24, 0x28	; 40
 2cc:	41 f1       	breq	.+80     	; 0x31e <TWI_data_event+0x74>
			return DATA_W_ACK_SENT;		// Data written & Ack received 
		
		else if( status == DATA_W_NACK_STATE )
 2ce:	80 33       	cpi	r24, 0x30	; 48
 2d0:	41 f5       	brne	.+80     	; 0x322 <TWI_data_event+0x78>
			return DATA_W_NACK_SENT;	// Data written & No Ack received 
 2d2:	89 e0       	ldi	r24, 0x09	; 9
 2d4:	08 95       	ret
		
		else
			return DATA_W_FAILED;		// Data transmission failed
		
	}
	else if(r_or_w == Read)
 2d6:	61 30       	cpi	r22, 0x01	; 1
 2d8:	31 f5       	brne	.+76     	; 0x326 <TWI_data_event+0x7c>
	{
		if(ack == ACK)
 2da:	41 11       	cpse	r20, r1
 2dc:	0a c0       	rjmp	.+20     	; 0x2f2 <TWI_data_event+0x48>
		{
			// Enable ACK, TWI
			set_pin(TWCR,TWINT);
 2de:	26 b7       	in	r18, 0x36	; 54
 2e0:	20 68       	ori	r18, 0x80	; 128
 2e2:	26 bf       	out	0x36, r18	; 54
			set_pin(TWCR,TWEN);
 2e4:	26 b7       	in	r18, 0x36	; 54
 2e6:	24 60       	ori	r18, 0x04	; 4
 2e8:	26 bf       	out	0x36, r18	; 54
			set_pin(TWCR,TWEA);
 2ea:	26 b7       	in	r18, 0x36	; 54
 2ec:	20 64       	ori	r18, 0x40	; 64
 2ee:	26 bf       	out	0x36, r18	; 54
 2f0:	08 c0       	rjmp	.+16     	; 0x302 <TWI_data_event+0x58>
		}
		else if(ack == NOT_ACK)
 2f2:	41 30       	cpi	r20, 0x01	; 1
 2f4:	31 f4       	brne	.+12     	; 0x302 <TWI_data_event+0x58>
		{
			// Enable TWI without ACK
			set_pin(TWCR,TWINT);
 2f6:	26 b7       	in	r18, 0x36	; 54
 2f8:	20 68       	ori	r18, 0x80	; 128
 2fa:	26 bf       	out	0x36, r18	; 54
			set_pin(TWCR,TWEN);
 2fc:	26 b7       	in	r18, 0x36	; 54
 2fe:	24 60       	ori	r18, 0x04	; 4
 300:	26 bf       	out	0x36, r18	; 54
		}
		while (!( TWCR & (1 << TWINT) )); // Waiting for TWI to finish its current job
 302:	06 b6       	in	r0, 0x36	; 54
 304:	07 fe       	sbrs	r0, 7
 306:	fd cf       	rjmp	.-6      	; 0x302 <TWI_data_event+0x58>
		
		*data = TWDR; // Reading data in TWI data register
 308:	23 b1       	in	r18, 0x03	; 3
 30a:	fc 01       	movw	r30, r24
 30c:	20 83       	st	Z, r18
		
		// Check state on TWI Status register
		status = (TWSR & 0xF8); // Reading TWI status register
 30e:	81 b1       	in	r24, 0x01	; 1
 310:	88 7f       	andi	r24, 0xF8	; 248
		if( status == DATA_R_ACK_STATE )
 312:	80 35       	cpi	r24, 0x50	; 80
 314:	51 f0       	breq	.+20     	; 0x32a <TWI_data_event+0x80>
			return DATA_R_ACK_SENT; // Data transmitted with ACK
		else if( status == DATA_R_NACK_STATE )
 316:	88 35       	cpi	r24, 0x58	; 88
 318:	51 f4       	brne	.+20     	; 0x32e <TWI_data_event+0x84>
			return DATA_R_NACK_SENT; // Data transmitted with NO ACK
 31a:	8c e0       	ldi	r24, 0x0C	; 12
 31c:	08 95       	ret
		
		// Check state on TWI Status register
		status = (TWSR & 0xF8); // Reading TWI status register
		
		if( status == DATA_W_ACK_STATE )
			return DATA_W_ACK_SENT;		// Data written & Ack received 
 31e:	88 e0       	ldi	r24, 0x08	; 8
 320:	08 95       	ret
		
		else if( status == DATA_W_NACK_STATE )
			return DATA_W_NACK_SENT;	// Data written & No Ack received 
		
		else
			return DATA_W_FAILED;		// Data transmission failed
 322:	8a e0       	ldi	r24, 0x0A	; 10
 324:	08 95       	ret
			return DATA_R_NACK_SENT; // Data transmitted with NO ACK
		else
			return DATA_R_FAILED; // Data transmission failed 
	}
	else{
		return 100;
 326:	84 e6       	ldi	r24, 0x64	; 100
 328:	08 95       	ret
		*data = TWDR; // Reading data in TWI data register
		
		// Check state on TWI Status register
		status = (TWSR & 0xF8); // Reading TWI status register
		if( status == DATA_R_ACK_STATE )
			return DATA_R_ACK_SENT; // Data transmitted with ACK
 32a:	8b e0       	ldi	r24, 0x0B	; 11
 32c:	08 95       	ret
		else if( status == DATA_R_NACK_STATE )
			return DATA_R_NACK_SENT; // Data transmitted with NO ACK
		else
			return DATA_R_FAILED; // Data transmission failed 
 32e:	8d e0       	ldi	r24, 0x0D	; 13
	}
	else{
		return 100;
	}
}
 330:	08 95       	ret

00000332 <TWI_stop>:

void TWI_stop()
{
	TWCR = (1 << TWSTO) | (1 << TWINT) | (1 << TWEN);// Enable TWI, generate stop
 332:	84 e9       	ldi	r24, 0x94	; 148
 334:	86 bf       	out	0x36, r24	; 54
	while( TWCR & (1 << TWSTO) );	// Wait until stop condition execution 
 336:	06 b6       	in	r0, 0x36	; 54
 338:	04 fc       	sbrc	r0, 4
 33a:	fd cf       	rjmp	.-6      	; 0x336 <TWI_stop+0x4>
}
 33c:	08 95       	ret

0000033e <__subsf3>:
 33e:	50 58       	subi	r21, 0x80	; 128

00000340 <__addsf3>:
 340:	bb 27       	eor	r27, r27
 342:	aa 27       	eor	r26, r26
 344:	0e 94 b7 01 	call	0x36e	; 0x36e <__addsf3x>
 348:	0c 94 01 03 	jmp	0x602	; 0x602 <__fp_round>
 34c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <__fp_pscA>
 350:	38 f0       	brcs	.+14     	; 0x360 <__addsf3+0x20>
 352:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__fp_pscB>
 356:	20 f0       	brcs	.+8      	; 0x360 <__addsf3+0x20>
 358:	39 f4       	brne	.+14     	; 0x368 <__addsf3+0x28>
 35a:	9f 3f       	cpi	r25, 0xFF	; 255
 35c:	19 f4       	brne	.+6      	; 0x364 <__addsf3+0x24>
 35e:	26 f4       	brtc	.+8      	; 0x368 <__addsf3+0x28>
 360:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__fp_nan>
 364:	0e f4       	brtc	.+2      	; 0x368 <__addsf3+0x28>
 366:	e0 95       	com	r30
 368:	e7 fb       	bst	r30, 7
 36a:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <__fp_inf>

0000036e <__addsf3x>:
 36e:	e9 2f       	mov	r30, r25
 370:	0e 94 12 03 	call	0x624	; 0x624 <__fp_split3>
 374:	58 f3       	brcs	.-42     	; 0x34c <__addsf3+0xc>
 376:	ba 17       	cp	r27, r26
 378:	62 07       	cpc	r22, r18
 37a:	73 07       	cpc	r23, r19
 37c:	84 07       	cpc	r24, r20
 37e:	95 07       	cpc	r25, r21
 380:	20 f0       	brcs	.+8      	; 0x38a <__addsf3x+0x1c>
 382:	79 f4       	brne	.+30     	; 0x3a2 <__addsf3x+0x34>
 384:	a6 f5       	brtc	.+104    	; 0x3ee <__addsf3x+0x80>
 386:	0c 94 34 03 	jmp	0x668	; 0x668 <__fp_zero>
 38a:	0e f4       	brtc	.+2      	; 0x38e <__addsf3x+0x20>
 38c:	e0 95       	com	r30
 38e:	0b 2e       	mov	r0, r27
 390:	ba 2f       	mov	r27, r26
 392:	a0 2d       	mov	r26, r0
 394:	0b 01       	movw	r0, r22
 396:	b9 01       	movw	r22, r18
 398:	90 01       	movw	r18, r0
 39a:	0c 01       	movw	r0, r24
 39c:	ca 01       	movw	r24, r20
 39e:	a0 01       	movw	r20, r0
 3a0:	11 24       	eor	r1, r1
 3a2:	ff 27       	eor	r31, r31
 3a4:	59 1b       	sub	r21, r25
 3a6:	99 f0       	breq	.+38     	; 0x3ce <__addsf3x+0x60>
 3a8:	59 3f       	cpi	r21, 0xF9	; 249
 3aa:	50 f4       	brcc	.+20     	; 0x3c0 <__addsf3x+0x52>
 3ac:	50 3e       	cpi	r21, 0xE0	; 224
 3ae:	68 f1       	brcs	.+90     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3b0:	1a 16       	cp	r1, r26
 3b2:	f0 40       	sbci	r31, 0x00	; 0
 3b4:	a2 2f       	mov	r26, r18
 3b6:	23 2f       	mov	r18, r19
 3b8:	34 2f       	mov	r19, r20
 3ba:	44 27       	eor	r20, r20
 3bc:	58 5f       	subi	r21, 0xF8	; 248
 3be:	f3 cf       	rjmp	.-26     	; 0x3a6 <__addsf3x+0x38>
 3c0:	46 95       	lsr	r20
 3c2:	37 95       	ror	r19
 3c4:	27 95       	ror	r18
 3c6:	a7 95       	ror	r26
 3c8:	f0 40       	sbci	r31, 0x00	; 0
 3ca:	53 95       	inc	r21
 3cc:	c9 f7       	brne	.-14     	; 0x3c0 <__addsf3x+0x52>
 3ce:	7e f4       	brtc	.+30     	; 0x3ee <__addsf3x+0x80>
 3d0:	1f 16       	cp	r1, r31
 3d2:	ba 0b       	sbc	r27, r26
 3d4:	62 0b       	sbc	r22, r18
 3d6:	73 0b       	sbc	r23, r19
 3d8:	84 0b       	sbc	r24, r20
 3da:	ba f0       	brmi	.+46     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3dc:	91 50       	subi	r25, 0x01	; 1
 3de:	a1 f0       	breq	.+40     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3e0:	ff 0f       	add	r31, r31
 3e2:	bb 1f       	adc	r27, r27
 3e4:	66 1f       	adc	r22, r22
 3e6:	77 1f       	adc	r23, r23
 3e8:	88 1f       	adc	r24, r24
 3ea:	c2 f7       	brpl	.-16     	; 0x3dc <__addsf3x+0x6e>
 3ec:	0e c0       	rjmp	.+28     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3ee:	ba 0f       	add	r27, r26
 3f0:	62 1f       	adc	r22, r18
 3f2:	73 1f       	adc	r23, r19
 3f4:	84 1f       	adc	r24, r20
 3f6:	48 f4       	brcc	.+18     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3f8:	87 95       	ror	r24
 3fa:	77 95       	ror	r23
 3fc:	67 95       	ror	r22
 3fe:	b7 95       	ror	r27
 400:	f7 95       	ror	r31
 402:	9e 3f       	cpi	r25, 0xFE	; 254
 404:	08 f0       	brcs	.+2      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 406:	b0 cf       	rjmp	.-160    	; 0x368 <__addsf3+0x28>
 408:	93 95       	inc	r25
 40a:	88 0f       	add	r24, r24
 40c:	08 f0       	brcs	.+2      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 40e:	99 27       	eor	r25, r25
 410:	ee 0f       	add	r30, r30
 412:	97 95       	ror	r25
 414:	87 95       	ror	r24
 416:	08 95       	ret

00000418 <__divsf3>:
 418:	0e 94 20 02 	call	0x440	; 0x440 <__divsf3x>
 41c:	0c 94 01 03 	jmp	0x602	; 0x602 <__fp_round>
 420:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__fp_pscB>
 424:	58 f0       	brcs	.+22     	; 0x43c <__divsf3+0x24>
 426:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <__fp_pscA>
 42a:	40 f0       	brcs	.+16     	; 0x43c <__divsf3+0x24>
 42c:	29 f4       	brne	.+10     	; 0x438 <__divsf3+0x20>
 42e:	5f 3f       	cpi	r21, 0xFF	; 255
 430:	29 f0       	breq	.+10     	; 0x43c <__divsf3+0x24>
 432:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <__fp_inf>
 436:	51 11       	cpse	r21, r1
 438:	0c 94 35 03 	jmp	0x66a	; 0x66a <__fp_szero>
 43c:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__fp_nan>

00000440 <__divsf3x>:
 440:	0e 94 12 03 	call	0x624	; 0x624 <__fp_split3>
 444:	68 f3       	brcs	.-38     	; 0x420 <__divsf3+0x8>

00000446 <__divsf3_pse>:
 446:	99 23       	and	r25, r25
 448:	b1 f3       	breq	.-20     	; 0x436 <__divsf3+0x1e>
 44a:	55 23       	and	r21, r21
 44c:	91 f3       	breq	.-28     	; 0x432 <__divsf3+0x1a>
 44e:	95 1b       	sub	r25, r21
 450:	55 0b       	sbc	r21, r21
 452:	bb 27       	eor	r27, r27
 454:	aa 27       	eor	r26, r26
 456:	62 17       	cp	r22, r18
 458:	73 07       	cpc	r23, r19
 45a:	84 07       	cpc	r24, r20
 45c:	38 f0       	brcs	.+14     	; 0x46c <__divsf3_pse+0x26>
 45e:	9f 5f       	subi	r25, 0xFF	; 255
 460:	5f 4f       	sbci	r21, 0xFF	; 255
 462:	22 0f       	add	r18, r18
 464:	33 1f       	adc	r19, r19
 466:	44 1f       	adc	r20, r20
 468:	aa 1f       	adc	r26, r26
 46a:	a9 f3       	breq	.-22     	; 0x456 <__divsf3_pse+0x10>
 46c:	35 d0       	rcall	.+106    	; 0x4d8 <__divsf3_pse+0x92>
 46e:	0e 2e       	mov	r0, r30
 470:	3a f0       	brmi	.+14     	; 0x480 <__divsf3_pse+0x3a>
 472:	e0 e8       	ldi	r30, 0x80	; 128
 474:	32 d0       	rcall	.+100    	; 0x4da <__divsf3_pse+0x94>
 476:	91 50       	subi	r25, 0x01	; 1
 478:	50 40       	sbci	r21, 0x00	; 0
 47a:	e6 95       	lsr	r30
 47c:	00 1c       	adc	r0, r0
 47e:	ca f7       	brpl	.-14     	; 0x472 <__divsf3_pse+0x2c>
 480:	2b d0       	rcall	.+86     	; 0x4d8 <__divsf3_pse+0x92>
 482:	fe 2f       	mov	r31, r30
 484:	29 d0       	rcall	.+82     	; 0x4d8 <__divsf3_pse+0x92>
 486:	66 0f       	add	r22, r22
 488:	77 1f       	adc	r23, r23
 48a:	88 1f       	adc	r24, r24
 48c:	bb 1f       	adc	r27, r27
 48e:	26 17       	cp	r18, r22
 490:	37 07       	cpc	r19, r23
 492:	48 07       	cpc	r20, r24
 494:	ab 07       	cpc	r26, r27
 496:	b0 e8       	ldi	r27, 0x80	; 128
 498:	09 f0       	breq	.+2      	; 0x49c <__divsf3_pse+0x56>
 49a:	bb 0b       	sbc	r27, r27
 49c:	80 2d       	mov	r24, r0
 49e:	bf 01       	movw	r22, r30
 4a0:	ff 27       	eor	r31, r31
 4a2:	93 58       	subi	r25, 0x83	; 131
 4a4:	5f 4f       	sbci	r21, 0xFF	; 255
 4a6:	3a f0       	brmi	.+14     	; 0x4b6 <__divsf3_pse+0x70>
 4a8:	9e 3f       	cpi	r25, 0xFE	; 254
 4aa:	51 05       	cpc	r21, r1
 4ac:	78 f0       	brcs	.+30     	; 0x4cc <__divsf3_pse+0x86>
 4ae:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <__fp_inf>
 4b2:	0c 94 35 03 	jmp	0x66a	; 0x66a <__fp_szero>
 4b6:	5f 3f       	cpi	r21, 0xFF	; 255
 4b8:	e4 f3       	brlt	.-8      	; 0x4b2 <__divsf3_pse+0x6c>
 4ba:	98 3e       	cpi	r25, 0xE8	; 232
 4bc:	d4 f3       	brlt	.-12     	; 0x4b2 <__divsf3_pse+0x6c>
 4be:	86 95       	lsr	r24
 4c0:	77 95       	ror	r23
 4c2:	67 95       	ror	r22
 4c4:	b7 95       	ror	r27
 4c6:	f7 95       	ror	r31
 4c8:	9f 5f       	subi	r25, 0xFF	; 255
 4ca:	c9 f7       	brne	.-14     	; 0x4be <__divsf3_pse+0x78>
 4cc:	88 0f       	add	r24, r24
 4ce:	91 1d       	adc	r25, r1
 4d0:	96 95       	lsr	r25
 4d2:	87 95       	ror	r24
 4d4:	97 f9       	bld	r25, 7
 4d6:	08 95       	ret
 4d8:	e1 e0       	ldi	r30, 0x01	; 1
 4da:	66 0f       	add	r22, r22
 4dc:	77 1f       	adc	r23, r23
 4de:	88 1f       	adc	r24, r24
 4e0:	bb 1f       	adc	r27, r27
 4e2:	62 17       	cp	r22, r18
 4e4:	73 07       	cpc	r23, r19
 4e6:	84 07       	cpc	r24, r20
 4e8:	ba 07       	cpc	r27, r26
 4ea:	20 f0       	brcs	.+8      	; 0x4f4 <__divsf3_pse+0xae>
 4ec:	62 1b       	sub	r22, r18
 4ee:	73 0b       	sbc	r23, r19
 4f0:	84 0b       	sbc	r24, r20
 4f2:	ba 0b       	sbc	r27, r26
 4f4:	ee 1f       	adc	r30, r30
 4f6:	88 f7       	brcc	.-30     	; 0x4da <__divsf3_pse+0x94>
 4f8:	e0 95       	com	r30
 4fa:	08 95       	ret

000004fc <__fixunssfsi>:
 4fc:	0e 94 1a 03 	call	0x634	; 0x634 <__fp_splitA>
 500:	88 f0       	brcs	.+34     	; 0x524 <__fixunssfsi+0x28>
 502:	9f 57       	subi	r25, 0x7F	; 127
 504:	98 f0       	brcs	.+38     	; 0x52c <__fixunssfsi+0x30>
 506:	b9 2f       	mov	r27, r25
 508:	99 27       	eor	r25, r25
 50a:	b7 51       	subi	r27, 0x17	; 23
 50c:	b0 f0       	brcs	.+44     	; 0x53a <__fixunssfsi+0x3e>
 50e:	e1 f0       	breq	.+56     	; 0x548 <__fixunssfsi+0x4c>
 510:	66 0f       	add	r22, r22
 512:	77 1f       	adc	r23, r23
 514:	88 1f       	adc	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	1a f0       	brmi	.+6      	; 0x520 <__fixunssfsi+0x24>
 51a:	ba 95       	dec	r27
 51c:	c9 f7       	brne	.-14     	; 0x510 <__fixunssfsi+0x14>
 51e:	14 c0       	rjmp	.+40     	; 0x548 <__fixunssfsi+0x4c>
 520:	b1 30       	cpi	r27, 0x01	; 1
 522:	91 f0       	breq	.+36     	; 0x548 <__fixunssfsi+0x4c>
 524:	0e 94 34 03 	call	0x668	; 0x668 <__fp_zero>
 528:	b1 e0       	ldi	r27, 0x01	; 1
 52a:	08 95       	ret
 52c:	0c 94 34 03 	jmp	0x668	; 0x668 <__fp_zero>
 530:	67 2f       	mov	r22, r23
 532:	78 2f       	mov	r23, r24
 534:	88 27       	eor	r24, r24
 536:	b8 5f       	subi	r27, 0xF8	; 248
 538:	39 f0       	breq	.+14     	; 0x548 <__fixunssfsi+0x4c>
 53a:	b9 3f       	cpi	r27, 0xF9	; 249
 53c:	cc f3       	brlt	.-14     	; 0x530 <__fixunssfsi+0x34>
 53e:	86 95       	lsr	r24
 540:	77 95       	ror	r23
 542:	67 95       	ror	r22
 544:	b3 95       	inc	r27
 546:	d9 f7       	brne	.-10     	; 0x53e <__fixunssfsi+0x42>
 548:	3e f4       	brtc	.+14     	; 0x558 <__fixunssfsi+0x5c>
 54a:	90 95       	com	r25
 54c:	80 95       	com	r24
 54e:	70 95       	com	r23
 550:	61 95       	neg	r22
 552:	7f 4f       	sbci	r23, 0xFF	; 255
 554:	8f 4f       	sbci	r24, 0xFF	; 255
 556:	9f 4f       	sbci	r25, 0xFF	; 255
 558:	08 95       	ret

0000055a <__floatunsisf>:
 55a:	e8 94       	clt
 55c:	09 c0       	rjmp	.+18     	; 0x570 <__floatsisf+0x12>

0000055e <__floatsisf>:
 55e:	97 fb       	bst	r25, 7
 560:	3e f4       	brtc	.+14     	; 0x570 <__floatsisf+0x12>
 562:	90 95       	com	r25
 564:	80 95       	com	r24
 566:	70 95       	com	r23
 568:	61 95       	neg	r22
 56a:	7f 4f       	sbci	r23, 0xFF	; 255
 56c:	8f 4f       	sbci	r24, 0xFF	; 255
 56e:	9f 4f       	sbci	r25, 0xFF	; 255
 570:	99 23       	and	r25, r25
 572:	a9 f0       	breq	.+42     	; 0x59e <__floatsisf+0x40>
 574:	f9 2f       	mov	r31, r25
 576:	96 e9       	ldi	r25, 0x96	; 150
 578:	bb 27       	eor	r27, r27
 57a:	93 95       	inc	r25
 57c:	f6 95       	lsr	r31
 57e:	87 95       	ror	r24
 580:	77 95       	ror	r23
 582:	67 95       	ror	r22
 584:	b7 95       	ror	r27
 586:	f1 11       	cpse	r31, r1
 588:	f8 cf       	rjmp	.-16     	; 0x57a <__floatsisf+0x1c>
 58a:	fa f4       	brpl	.+62     	; 0x5ca <__floatsisf+0x6c>
 58c:	bb 0f       	add	r27, r27
 58e:	11 f4       	brne	.+4      	; 0x594 <__floatsisf+0x36>
 590:	60 ff       	sbrs	r22, 0
 592:	1b c0       	rjmp	.+54     	; 0x5ca <__floatsisf+0x6c>
 594:	6f 5f       	subi	r22, 0xFF	; 255
 596:	7f 4f       	sbci	r23, 0xFF	; 255
 598:	8f 4f       	sbci	r24, 0xFF	; 255
 59a:	9f 4f       	sbci	r25, 0xFF	; 255
 59c:	16 c0       	rjmp	.+44     	; 0x5ca <__floatsisf+0x6c>
 59e:	88 23       	and	r24, r24
 5a0:	11 f0       	breq	.+4      	; 0x5a6 <__floatsisf+0x48>
 5a2:	96 e9       	ldi	r25, 0x96	; 150
 5a4:	11 c0       	rjmp	.+34     	; 0x5c8 <__floatsisf+0x6a>
 5a6:	77 23       	and	r23, r23
 5a8:	21 f0       	breq	.+8      	; 0x5b2 <__floatsisf+0x54>
 5aa:	9e e8       	ldi	r25, 0x8E	; 142
 5ac:	87 2f       	mov	r24, r23
 5ae:	76 2f       	mov	r23, r22
 5b0:	05 c0       	rjmp	.+10     	; 0x5bc <__floatsisf+0x5e>
 5b2:	66 23       	and	r22, r22
 5b4:	71 f0       	breq	.+28     	; 0x5d2 <__floatsisf+0x74>
 5b6:	96 e8       	ldi	r25, 0x86	; 134
 5b8:	86 2f       	mov	r24, r22
 5ba:	70 e0       	ldi	r23, 0x00	; 0
 5bc:	60 e0       	ldi	r22, 0x00	; 0
 5be:	2a f0       	brmi	.+10     	; 0x5ca <__floatsisf+0x6c>
 5c0:	9a 95       	dec	r25
 5c2:	66 0f       	add	r22, r22
 5c4:	77 1f       	adc	r23, r23
 5c6:	88 1f       	adc	r24, r24
 5c8:	da f7       	brpl	.-10     	; 0x5c0 <__floatsisf+0x62>
 5ca:	88 0f       	add	r24, r24
 5cc:	96 95       	lsr	r25
 5ce:	87 95       	ror	r24
 5d0:	97 f9       	bld	r25, 7
 5d2:	08 95       	ret

000005d4 <__fp_inf>:
 5d4:	97 f9       	bld	r25, 7
 5d6:	9f 67       	ori	r25, 0x7F	; 127
 5d8:	80 e8       	ldi	r24, 0x80	; 128
 5da:	70 e0       	ldi	r23, 0x00	; 0
 5dc:	60 e0       	ldi	r22, 0x00	; 0
 5de:	08 95       	ret

000005e0 <__fp_nan>:
 5e0:	9f ef       	ldi	r25, 0xFF	; 255
 5e2:	80 ec       	ldi	r24, 0xC0	; 192
 5e4:	08 95       	ret

000005e6 <__fp_pscA>:
 5e6:	00 24       	eor	r0, r0
 5e8:	0a 94       	dec	r0
 5ea:	16 16       	cp	r1, r22
 5ec:	17 06       	cpc	r1, r23
 5ee:	18 06       	cpc	r1, r24
 5f0:	09 06       	cpc	r0, r25
 5f2:	08 95       	ret

000005f4 <__fp_pscB>:
 5f4:	00 24       	eor	r0, r0
 5f6:	0a 94       	dec	r0
 5f8:	12 16       	cp	r1, r18
 5fa:	13 06       	cpc	r1, r19
 5fc:	14 06       	cpc	r1, r20
 5fe:	05 06       	cpc	r0, r21
 600:	08 95       	ret

00000602 <__fp_round>:
 602:	09 2e       	mov	r0, r25
 604:	03 94       	inc	r0
 606:	00 0c       	add	r0, r0
 608:	11 f4       	brne	.+4      	; 0x60e <__fp_round+0xc>
 60a:	88 23       	and	r24, r24
 60c:	52 f0       	brmi	.+20     	; 0x622 <__fp_round+0x20>
 60e:	bb 0f       	add	r27, r27
 610:	40 f4       	brcc	.+16     	; 0x622 <__fp_round+0x20>
 612:	bf 2b       	or	r27, r31
 614:	11 f4       	brne	.+4      	; 0x61a <__fp_round+0x18>
 616:	60 ff       	sbrs	r22, 0
 618:	04 c0       	rjmp	.+8      	; 0x622 <__fp_round+0x20>
 61a:	6f 5f       	subi	r22, 0xFF	; 255
 61c:	7f 4f       	sbci	r23, 0xFF	; 255
 61e:	8f 4f       	sbci	r24, 0xFF	; 255
 620:	9f 4f       	sbci	r25, 0xFF	; 255
 622:	08 95       	ret

00000624 <__fp_split3>:
 624:	57 fd       	sbrc	r21, 7
 626:	90 58       	subi	r25, 0x80	; 128
 628:	44 0f       	add	r20, r20
 62a:	55 1f       	adc	r21, r21
 62c:	59 f0       	breq	.+22     	; 0x644 <__fp_splitA+0x10>
 62e:	5f 3f       	cpi	r21, 0xFF	; 255
 630:	71 f0       	breq	.+28     	; 0x64e <__fp_splitA+0x1a>
 632:	47 95       	ror	r20

00000634 <__fp_splitA>:
 634:	88 0f       	add	r24, r24
 636:	97 fb       	bst	r25, 7
 638:	99 1f       	adc	r25, r25
 63a:	61 f0       	breq	.+24     	; 0x654 <__fp_splitA+0x20>
 63c:	9f 3f       	cpi	r25, 0xFF	; 255
 63e:	79 f0       	breq	.+30     	; 0x65e <__fp_splitA+0x2a>
 640:	87 95       	ror	r24
 642:	08 95       	ret
 644:	12 16       	cp	r1, r18
 646:	13 06       	cpc	r1, r19
 648:	14 06       	cpc	r1, r20
 64a:	55 1f       	adc	r21, r21
 64c:	f2 cf       	rjmp	.-28     	; 0x632 <__fp_split3+0xe>
 64e:	46 95       	lsr	r20
 650:	f1 df       	rcall	.-30     	; 0x634 <__fp_splitA>
 652:	08 c0       	rjmp	.+16     	; 0x664 <__fp_splitA+0x30>
 654:	16 16       	cp	r1, r22
 656:	17 06       	cpc	r1, r23
 658:	18 06       	cpc	r1, r24
 65a:	99 1f       	adc	r25, r25
 65c:	f1 cf       	rjmp	.-30     	; 0x640 <__fp_splitA+0xc>
 65e:	86 95       	lsr	r24
 660:	71 05       	cpc	r23, r1
 662:	61 05       	cpc	r22, r1
 664:	08 94       	sec
 666:	08 95       	ret

00000668 <__fp_zero>:
 668:	e8 94       	clt

0000066a <__fp_szero>:
 66a:	bb 27       	eor	r27, r27
 66c:	66 27       	eor	r22, r22
 66e:	77 27       	eor	r23, r23
 670:	cb 01       	movw	r24, r22
 672:	97 f9       	bld	r25, 7
 674:	08 95       	ret

00000676 <pow>:
 676:	fa 01       	movw	r30, r20
 678:	ee 0f       	add	r30, r30
 67a:	ff 1f       	adc	r31, r31
 67c:	30 96       	adiw	r30, 0x00	; 0
 67e:	21 05       	cpc	r18, r1
 680:	31 05       	cpc	r19, r1
 682:	a1 f1       	breq	.+104    	; 0x6ec <pow+0x76>
 684:	61 15       	cp	r22, r1
 686:	71 05       	cpc	r23, r1
 688:	61 f4       	brne	.+24     	; 0x6a2 <pow+0x2c>
 68a:	80 38       	cpi	r24, 0x80	; 128
 68c:	bf e3       	ldi	r27, 0x3F	; 63
 68e:	9b 07       	cpc	r25, r27
 690:	49 f1       	breq	.+82     	; 0x6e4 <pow+0x6e>
 692:	68 94       	set
 694:	90 38       	cpi	r25, 0x80	; 128
 696:	81 05       	cpc	r24, r1
 698:	61 f0       	breq	.+24     	; 0x6b2 <pow+0x3c>
 69a:	80 38       	cpi	r24, 0x80	; 128
 69c:	bf ef       	ldi	r27, 0xFF	; 255
 69e:	9b 07       	cpc	r25, r27
 6a0:	41 f0       	breq	.+16     	; 0x6b2 <pow+0x3c>
 6a2:	99 23       	and	r25, r25
 6a4:	4a f5       	brpl	.+82     	; 0x6f8 <pow+0x82>
 6a6:	ff 3f       	cpi	r31, 0xFF	; 255
 6a8:	e1 05       	cpc	r30, r1
 6aa:	31 05       	cpc	r19, r1
 6ac:	21 05       	cpc	r18, r1
 6ae:	19 f1       	breq	.+70     	; 0x6f6 <pow+0x80>
 6b0:	e8 94       	clt
 6b2:	08 94       	sec
 6b4:	e7 95       	ror	r30
 6b6:	d9 01       	movw	r26, r18
 6b8:	aa 23       	and	r26, r26
 6ba:	29 f4       	brne	.+10     	; 0x6c6 <pow+0x50>
 6bc:	ab 2f       	mov	r26, r27
 6be:	be 2f       	mov	r27, r30
 6c0:	f8 5f       	subi	r31, 0xF8	; 248
 6c2:	d0 f3       	brcs	.-12     	; 0x6b8 <pow+0x42>
 6c4:	10 c0       	rjmp	.+32     	; 0x6e6 <pow+0x70>
 6c6:	ff 5f       	subi	r31, 0xFF	; 255
 6c8:	70 f4       	brcc	.+28     	; 0x6e6 <pow+0x70>
 6ca:	a6 95       	lsr	r26
 6cc:	e0 f7       	brcc	.-8      	; 0x6c6 <pow+0x50>
 6ce:	f7 39       	cpi	r31, 0x97	; 151
 6d0:	50 f0       	brcs	.+20     	; 0x6e6 <pow+0x70>
 6d2:	19 f0       	breq	.+6      	; 0x6da <pow+0x64>
 6d4:	ff 3a       	cpi	r31, 0xAF	; 175
 6d6:	38 f4       	brcc	.+14     	; 0x6e6 <pow+0x70>
 6d8:	9f 77       	andi	r25, 0x7F	; 127
 6da:	9f 93       	push	r25
 6dc:	0d d0       	rcall	.+26     	; 0x6f8 <pow+0x82>
 6de:	0f 90       	pop	r0
 6e0:	07 fc       	sbrc	r0, 7
 6e2:	90 58       	subi	r25, 0x80	; 128
 6e4:	08 95       	ret
 6e6:	46 f0       	brts	.+16     	; 0x6f8 <pow+0x82>
 6e8:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__fp_nan>
 6ec:	60 e0       	ldi	r22, 0x00	; 0
 6ee:	70 e0       	ldi	r23, 0x00	; 0
 6f0:	80 e8       	ldi	r24, 0x80	; 128
 6f2:	9f e3       	ldi	r25, 0x3F	; 63
 6f4:	08 95       	ret
 6f6:	4f e7       	ldi	r20, 0x7F	; 127
 6f8:	9f 77       	andi	r25, 0x7F	; 127
 6fa:	5f 93       	push	r21
 6fc:	4f 93       	push	r20
 6fe:	3f 93       	push	r19
 700:	2f 93       	push	r18
 702:	0e 94 36 04 	call	0x86c	; 0x86c <log>
 706:	2f 91       	pop	r18
 708:	3f 91       	pop	r19
 70a:	4f 91       	pop	r20
 70c:	5f 91       	pop	r21
 70e:	0e 94 b2 04 	call	0x964	; 0x964 <__mulsf3>
 712:	0c 94 93 03 	jmp	0x726	; 0x726 <exp>
 716:	29 f4       	brne	.+10     	; 0x722 <pow+0xac>
 718:	16 f0       	brts	.+4      	; 0x71e <pow+0xa8>
 71a:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <__fp_inf>
 71e:	0c 94 34 03 	jmp	0x668	; 0x668 <__fp_zero>
 722:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__fp_nan>

00000726 <exp>:
 726:	0e 94 1a 03 	call	0x634	; 0x634 <__fp_splitA>
 72a:	a8 f3       	brcs	.-22     	; 0x716 <pow+0xa0>
 72c:	96 38       	cpi	r25, 0x86	; 134
 72e:	a0 f7       	brcc	.-24     	; 0x718 <pow+0xa2>
 730:	07 f8       	bld	r0, 7
 732:	0f 92       	push	r0
 734:	e8 94       	clt
 736:	2b e3       	ldi	r18, 0x3B	; 59
 738:	3a ea       	ldi	r19, 0xAA	; 170
 73a:	48 eb       	ldi	r20, 0xB8	; 184
 73c:	5f e7       	ldi	r21, 0x7F	; 127
 73e:	0e 94 c8 04 	call	0x990	; 0x990 <__mulsf3_pse>
 742:	0f 92       	push	r0
 744:	0f 92       	push	r0
 746:	0f 92       	push	r0
 748:	4d b7       	in	r20, 0x3d	; 61
 74a:	5e b7       	in	r21, 0x3e	; 62
 74c:	0f 92       	push	r0
 74e:	0e 94 7e 04 	call	0x8fc	; 0x8fc <modf>
 752:	e4 e5       	ldi	r30, 0x54	; 84
 754:	f0 e0       	ldi	r31, 0x00	; 0
 756:	0e 94 c5 03 	call	0x78a	; 0x78a <__fp_powser>
 75a:	4f 91       	pop	r20
 75c:	5f 91       	pop	r21
 75e:	ef 91       	pop	r30
 760:	ff 91       	pop	r31
 762:	e5 95       	asr	r30
 764:	ee 1f       	adc	r30, r30
 766:	ff 1f       	adc	r31, r31
 768:	49 f0       	breq	.+18     	; 0x77c <exp+0x56>
 76a:	fe 57       	subi	r31, 0x7E	; 126
 76c:	e0 68       	ori	r30, 0x80	; 128
 76e:	44 27       	eor	r20, r20
 770:	ee 0f       	add	r30, r30
 772:	44 1f       	adc	r20, r20
 774:	fa 95       	dec	r31
 776:	e1 f7       	brne	.-8      	; 0x770 <exp+0x4a>
 778:	41 95       	neg	r20
 77a:	55 0b       	sbc	r21, r21
 77c:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <ldexp>
 780:	0f 90       	pop	r0
 782:	07 fe       	sbrs	r0, 7
 784:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <inverse>
 788:	08 95       	ret

0000078a <__fp_powser>:
 78a:	df 93       	push	r29
 78c:	cf 93       	push	r28
 78e:	1f 93       	push	r17
 790:	0f 93       	push	r16
 792:	ff 92       	push	r15
 794:	ef 92       	push	r14
 796:	df 92       	push	r13
 798:	7b 01       	movw	r14, r22
 79a:	8c 01       	movw	r16, r24
 79c:	68 94       	set
 79e:	06 c0       	rjmp	.+12     	; 0x7ac <__fp_powser+0x22>
 7a0:	da 2e       	mov	r13, r26
 7a2:	ef 01       	movw	r28, r30
 7a4:	0e 94 c5 04 	call	0x98a	; 0x98a <__mulsf3x>
 7a8:	fe 01       	movw	r30, r28
 7aa:	e8 94       	clt
 7ac:	a5 91       	lpm	r26, Z+
 7ae:	25 91       	lpm	r18, Z+
 7b0:	35 91       	lpm	r19, Z+
 7b2:	45 91       	lpm	r20, Z+
 7b4:	55 91       	lpm	r21, Z+
 7b6:	a6 f3       	brts	.-24     	; 0x7a0 <__fp_powser+0x16>
 7b8:	ef 01       	movw	r28, r30
 7ba:	0e 94 b7 01 	call	0x36e	; 0x36e <__addsf3x>
 7be:	fe 01       	movw	r30, r28
 7c0:	97 01       	movw	r18, r14
 7c2:	a8 01       	movw	r20, r16
 7c4:	da 94       	dec	r13
 7c6:	69 f7       	brne	.-38     	; 0x7a2 <__fp_powser+0x18>
 7c8:	df 90       	pop	r13
 7ca:	ef 90       	pop	r14
 7cc:	ff 90       	pop	r15
 7ce:	0f 91       	pop	r16
 7d0:	1f 91       	pop	r17
 7d2:	cf 91       	pop	r28
 7d4:	df 91       	pop	r29
 7d6:	08 95       	ret

000007d8 <inverse>:
 7d8:	9b 01       	movw	r18, r22
 7da:	ac 01       	movw	r20, r24
 7dc:	60 e0       	ldi	r22, 0x00	; 0
 7de:	70 e0       	ldi	r23, 0x00	; 0
 7e0:	80 e8       	ldi	r24, 0x80	; 128
 7e2:	9f e3       	ldi	r25, 0x3F	; 63
 7e4:	0c 94 0c 02 	jmp	0x418	; 0x418 <__divsf3>
 7e8:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <__fp_inf>
 7ec:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <__fp_mpack>

000007f0 <ldexp>:
 7f0:	0e 94 1a 03 	call	0x634	; 0x634 <__fp_splitA>
 7f4:	d8 f3       	brcs	.-10     	; 0x7ec <inverse+0x14>
 7f6:	99 23       	and	r25, r25
 7f8:	c9 f3       	breq	.-14     	; 0x7ec <inverse+0x14>
 7fa:	94 0f       	add	r25, r20
 7fc:	51 1d       	adc	r21, r1
 7fe:	a3 f3       	brvs	.-24     	; 0x7e8 <inverse+0x10>
 800:	91 50       	subi	r25, 0x01	; 1
 802:	50 40       	sbci	r21, 0x00	; 0
 804:	94 f0       	brlt	.+36     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 806:	59 f0       	breq	.+22     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 808:	88 23       	and	r24, r24
 80a:	32 f0       	brmi	.+12     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 80c:	66 0f       	add	r22, r22
 80e:	77 1f       	adc	r23, r23
 810:	88 1f       	adc	r24, r24
 812:	91 50       	subi	r25, 0x01	; 1
 814:	50 40       	sbci	r21, 0x00	; 0
 816:	c1 f7       	brne	.-16     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 818:	9e 3f       	cpi	r25, 0xFE	; 254
 81a:	51 05       	cpc	r21, r1
 81c:	2c f7       	brge	.-54     	; 0x7e8 <inverse+0x10>
 81e:	88 0f       	add	r24, r24
 820:	91 1d       	adc	r25, r1
 822:	96 95       	lsr	r25
 824:	87 95       	ror	r24
 826:	97 f9       	bld	r25, 7
 828:	08 95       	ret
 82a:	5f 3f       	cpi	r21, 0xFF	; 255
 82c:	ac f0       	brlt	.+42     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 82e:	98 3e       	cpi	r25, 0xE8	; 232
 830:	9c f0       	brlt	.+38     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 832:	bb 27       	eor	r27, r27
 834:	86 95       	lsr	r24
 836:	77 95       	ror	r23
 838:	67 95       	ror	r22
 83a:	b7 95       	ror	r27
 83c:	08 f4       	brcc	.+2      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 83e:	b1 60       	ori	r27, 0x01	; 1
 840:	93 95       	inc	r25
 842:	c1 f7       	brne	.-16     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 844:	bb 0f       	add	r27, r27
 846:	58 f7       	brcc	.-42     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 848:	11 f4       	brne	.+4      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 84a:	60 ff       	sbrs	r22, 0
 84c:	e8 cf       	rjmp	.-48     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 84e:	6f 5f       	subi	r22, 0xFF	; 255
 850:	7f 4f       	sbci	r23, 0xFF	; 255
 852:	8f 4f       	sbci	r24, 0xFF	; 255
 854:	9f 4f       	sbci	r25, 0xFF	; 255
 856:	e3 cf       	rjmp	.-58     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 858:	0c 94 35 03 	jmp	0x66a	; 0x66a <__fp_szero>
 85c:	16 f0       	brts	.+4      	; 0x862 <__stack+0x3>
 85e:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <__fp_mpack>
 862:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__fp_nan>
 866:	68 94       	set
 868:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <__fp_inf>

0000086c <log>:
 86c:	0e 94 1a 03 	call	0x634	; 0x634 <__fp_splitA>
 870:	a8 f3       	brcs	.-22     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 872:	99 23       	and	r25, r25
 874:	c1 f3       	breq	.-16     	; 0x866 <__stack+0x7>
 876:	ae f3       	brts	.-22     	; 0x862 <__stack+0x3>
 878:	df 93       	push	r29
 87a:	cf 93       	push	r28
 87c:	1f 93       	push	r17
 87e:	0f 93       	push	r16
 880:	ff 92       	push	r15
 882:	c9 2f       	mov	r28, r25
 884:	dd 27       	eor	r29, r29
 886:	88 23       	and	r24, r24
 888:	2a f0       	brmi	.+10     	; 0x894 <log+0x28>
 88a:	21 97       	sbiw	r28, 0x01	; 1
 88c:	66 0f       	add	r22, r22
 88e:	77 1f       	adc	r23, r23
 890:	88 1f       	adc	r24, r24
 892:	da f7       	brpl	.-10     	; 0x88a <log+0x1e>
 894:	20 e0       	ldi	r18, 0x00	; 0
 896:	30 e0       	ldi	r19, 0x00	; 0
 898:	40 e8       	ldi	r20, 0x80	; 128
 89a:	5f eb       	ldi	r21, 0xBF	; 191
 89c:	9f e3       	ldi	r25, 0x3F	; 63
 89e:	88 39       	cpi	r24, 0x98	; 152
 8a0:	20 f0       	brcs	.+8      	; 0x8aa <log+0x3e>
 8a2:	80 3e       	cpi	r24, 0xE0	; 224
 8a4:	38 f0       	brcs	.+14     	; 0x8b4 <log+0x48>
 8a6:	21 96       	adiw	r28, 0x01	; 1
 8a8:	8f 77       	andi	r24, 0x7F	; 127
 8aa:	0e 94 a0 01 	call	0x340	; 0x340 <__addsf3>
 8ae:	ec e7       	ldi	r30, 0x7C	; 124
 8b0:	f0 e0       	ldi	r31, 0x00	; 0
 8b2:	04 c0       	rjmp	.+8      	; 0x8bc <log+0x50>
 8b4:	0e 94 a0 01 	call	0x340	; 0x340 <__addsf3>
 8b8:	e9 ea       	ldi	r30, 0xA9	; 169
 8ba:	f0 e0       	ldi	r31, 0x00	; 0
 8bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__fp_powser>
 8c0:	8b 01       	movw	r16, r22
 8c2:	be 01       	movw	r22, r28
 8c4:	ec 01       	movw	r28, r24
 8c6:	fb 2e       	mov	r15, r27
 8c8:	6f 57       	subi	r22, 0x7F	; 127
 8ca:	71 09       	sbc	r23, r1
 8cc:	75 95       	asr	r23
 8ce:	77 1f       	adc	r23, r23
 8d0:	88 0b       	sbc	r24, r24
 8d2:	99 0b       	sbc	r25, r25
 8d4:	0e 94 af 02 	call	0x55e	; 0x55e <__floatsisf>
 8d8:	28 e1       	ldi	r18, 0x18	; 24
 8da:	32 e7       	ldi	r19, 0x72	; 114
 8dc:	41 e3       	ldi	r20, 0x31	; 49
 8de:	5f e3       	ldi	r21, 0x3F	; 63
 8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__mulsf3x>
 8e4:	af 2d       	mov	r26, r15
 8e6:	98 01       	movw	r18, r16
 8e8:	ae 01       	movw	r20, r28
 8ea:	ff 90       	pop	r15
 8ec:	0f 91       	pop	r16
 8ee:	1f 91       	pop	r17
 8f0:	cf 91       	pop	r28
 8f2:	df 91       	pop	r29
 8f4:	0e 94 b7 01 	call	0x36e	; 0x36e <__addsf3x>
 8f8:	0c 94 01 03 	jmp	0x602	; 0x602 <__fp_round>

000008fc <modf>:
 8fc:	fa 01       	movw	r30, r20
 8fe:	dc 01       	movw	r26, r24
 900:	aa 0f       	add	r26, r26
 902:	bb 1f       	adc	r27, r27
 904:	9b 01       	movw	r18, r22
 906:	ac 01       	movw	r20, r24
 908:	bf 57       	subi	r27, 0x7F	; 127
 90a:	28 f4       	brcc	.+10     	; 0x916 <modf+0x1a>
 90c:	22 27       	eor	r18, r18
 90e:	33 27       	eor	r19, r19
 910:	44 27       	eor	r20, r20
 912:	50 78       	andi	r21, 0x80	; 128
 914:	20 c0       	rjmp	.+64     	; 0x956 <modf+0x5a>
 916:	b7 51       	subi	r27, 0x17	; 23
 918:	90 f4       	brcc	.+36     	; 0x93e <modf+0x42>
 91a:	ab 2f       	mov	r26, r27
 91c:	00 24       	eor	r0, r0
 91e:	46 95       	lsr	r20
 920:	37 95       	ror	r19
 922:	27 95       	ror	r18
 924:	01 1c       	adc	r0, r1
 926:	a3 95       	inc	r26
 928:	d2 f3       	brmi	.-12     	; 0x91e <modf+0x22>
 92a:	00 20       	and	r0, r0
 92c:	71 f0       	breq	.+28     	; 0x94a <modf+0x4e>
 92e:	22 0f       	add	r18, r18
 930:	33 1f       	adc	r19, r19
 932:	44 1f       	adc	r20, r20
 934:	b3 95       	inc	r27
 936:	da f3       	brmi	.-10     	; 0x92e <modf+0x32>
 938:	0e d0       	rcall	.+28     	; 0x956 <modf+0x5a>
 93a:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__subsf3>
 93e:	61 30       	cpi	r22, 0x01	; 1
 940:	71 05       	cpc	r23, r1
 942:	a0 e8       	ldi	r26, 0x80	; 128
 944:	8a 07       	cpc	r24, r26
 946:	b9 46       	sbci	r27, 0x69	; 105
 948:	30 f4       	brcc	.+12     	; 0x956 <modf+0x5a>
 94a:	9b 01       	movw	r18, r22
 94c:	ac 01       	movw	r20, r24
 94e:	66 27       	eor	r22, r22
 950:	77 27       	eor	r23, r23
 952:	88 27       	eor	r24, r24
 954:	90 78       	andi	r25, 0x80	; 128
 956:	30 96       	adiw	r30, 0x00	; 0
 958:	21 f0       	breq	.+8      	; 0x962 <modf+0x66>
 95a:	20 83       	st	Z, r18
 95c:	31 83       	std	Z+1, r19	; 0x01
 95e:	42 83       	std	Z+2, r20	; 0x02
 960:	53 83       	std	Z+3, r21	; 0x03
 962:	08 95       	ret

00000964 <__mulsf3>:
 964:	0e 94 c5 04 	call	0x98a	; 0x98a <__mulsf3x>
 968:	0c 94 01 03 	jmp	0x602	; 0x602 <__fp_round>
 96c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <__fp_pscA>
 970:	38 f0       	brcs	.+14     	; 0x980 <__mulsf3+0x1c>
 972:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__fp_pscB>
 976:	20 f0       	brcs	.+8      	; 0x980 <__mulsf3+0x1c>
 978:	95 23       	and	r25, r21
 97a:	11 f0       	breq	.+4      	; 0x980 <__mulsf3+0x1c>
 97c:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <__fp_inf>
 980:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__fp_nan>
 984:	11 24       	eor	r1, r1
 986:	0c 94 35 03 	jmp	0x66a	; 0x66a <__fp_szero>

0000098a <__mulsf3x>:
 98a:	0e 94 12 03 	call	0x624	; 0x624 <__fp_split3>
 98e:	70 f3       	brcs	.-36     	; 0x96c <__mulsf3+0x8>

00000990 <__mulsf3_pse>:
 990:	95 9f       	mul	r25, r21
 992:	c1 f3       	breq	.-16     	; 0x984 <__mulsf3+0x20>
 994:	95 0f       	add	r25, r21
 996:	50 e0       	ldi	r21, 0x00	; 0
 998:	55 1f       	adc	r21, r21
 99a:	62 9f       	mul	r22, r18
 99c:	f0 01       	movw	r30, r0
 99e:	72 9f       	mul	r23, r18
 9a0:	bb 27       	eor	r27, r27
 9a2:	f0 0d       	add	r31, r0
 9a4:	b1 1d       	adc	r27, r1
 9a6:	63 9f       	mul	r22, r19
 9a8:	aa 27       	eor	r26, r26
 9aa:	f0 0d       	add	r31, r0
 9ac:	b1 1d       	adc	r27, r1
 9ae:	aa 1f       	adc	r26, r26
 9b0:	64 9f       	mul	r22, r20
 9b2:	66 27       	eor	r22, r22
 9b4:	b0 0d       	add	r27, r0
 9b6:	a1 1d       	adc	r26, r1
 9b8:	66 1f       	adc	r22, r22
 9ba:	82 9f       	mul	r24, r18
 9bc:	22 27       	eor	r18, r18
 9be:	b0 0d       	add	r27, r0
 9c0:	a1 1d       	adc	r26, r1
 9c2:	62 1f       	adc	r22, r18
 9c4:	73 9f       	mul	r23, r19
 9c6:	b0 0d       	add	r27, r0
 9c8:	a1 1d       	adc	r26, r1
 9ca:	62 1f       	adc	r22, r18
 9cc:	83 9f       	mul	r24, r19
 9ce:	a0 0d       	add	r26, r0
 9d0:	61 1d       	adc	r22, r1
 9d2:	22 1f       	adc	r18, r18
 9d4:	74 9f       	mul	r23, r20
 9d6:	33 27       	eor	r19, r19
 9d8:	a0 0d       	add	r26, r0
 9da:	61 1d       	adc	r22, r1
 9dc:	23 1f       	adc	r18, r19
 9de:	84 9f       	mul	r24, r20
 9e0:	60 0d       	add	r22, r0
 9e2:	21 1d       	adc	r18, r1
 9e4:	82 2f       	mov	r24, r18
 9e6:	76 2f       	mov	r23, r22
 9e8:	6a 2f       	mov	r22, r26
 9ea:	11 24       	eor	r1, r1
 9ec:	9f 57       	subi	r25, 0x7F	; 127
 9ee:	50 40       	sbci	r21, 0x00	; 0
 9f0:	9a f0       	brmi	.+38     	; 0xa18 <__mulsf3_pse+0x88>
 9f2:	f1 f0       	breq	.+60     	; 0xa30 <__mulsf3_pse+0xa0>
 9f4:	88 23       	and	r24, r24
 9f6:	4a f0       	brmi	.+18     	; 0xa0a <__mulsf3_pse+0x7a>
 9f8:	ee 0f       	add	r30, r30
 9fa:	ff 1f       	adc	r31, r31
 9fc:	bb 1f       	adc	r27, r27
 9fe:	66 1f       	adc	r22, r22
 a00:	77 1f       	adc	r23, r23
 a02:	88 1f       	adc	r24, r24
 a04:	91 50       	subi	r25, 0x01	; 1
 a06:	50 40       	sbci	r21, 0x00	; 0
 a08:	a9 f7       	brne	.-22     	; 0x9f4 <__mulsf3_pse+0x64>
 a0a:	9e 3f       	cpi	r25, 0xFE	; 254
 a0c:	51 05       	cpc	r21, r1
 a0e:	80 f0       	brcs	.+32     	; 0xa30 <__mulsf3_pse+0xa0>
 a10:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <__fp_inf>
 a14:	0c 94 35 03 	jmp	0x66a	; 0x66a <__fp_szero>
 a18:	5f 3f       	cpi	r21, 0xFF	; 255
 a1a:	e4 f3       	brlt	.-8      	; 0xa14 <__mulsf3_pse+0x84>
 a1c:	98 3e       	cpi	r25, 0xE8	; 232
 a1e:	d4 f3       	brlt	.-12     	; 0xa14 <__mulsf3_pse+0x84>
 a20:	86 95       	lsr	r24
 a22:	77 95       	ror	r23
 a24:	67 95       	ror	r22
 a26:	b7 95       	ror	r27
 a28:	f7 95       	ror	r31
 a2a:	e7 95       	ror	r30
 a2c:	9f 5f       	subi	r25, 0xFF	; 255
 a2e:	c1 f7       	brne	.-16     	; 0xa20 <__mulsf3_pse+0x90>
 a30:	fe 2b       	or	r31, r30
 a32:	88 0f       	add	r24, r24
 a34:	91 1d       	adc	r25, r1
 a36:	96 95       	lsr	r25
 a38:	87 95       	ror	r24
 a3a:	97 f9       	bld	r25, 7
 a3c:	08 95       	ret

00000a3e <__fp_mpack>:
 a3e:	9f 3f       	cpi	r25, 0xFF	; 255
 a40:	31 f0       	breq	.+12     	; 0xa4e <__fp_mpack_finite+0xc>

00000a42 <__fp_mpack_finite>:
 a42:	91 50       	subi	r25, 0x01	; 1
 a44:	20 f4       	brcc	.+8      	; 0xa4e <__fp_mpack_finite+0xc>
 a46:	87 95       	ror	r24
 a48:	77 95       	ror	r23
 a4a:	67 95       	ror	r22
 a4c:	b7 95       	ror	r27
 a4e:	88 0f       	add	r24, r24
 a50:	91 1d       	adc	r25, r1
 a52:	96 95       	lsr	r25
 a54:	87 95       	ror	r24
 a56:	97 f9       	bld	r25, 7
 a58:	08 95       	ret

00000a5a <_exit>:
 a5a:	f8 94       	cli

00000a5c <__stop_program>:
 a5c:	ff cf       	rjmp	.-2      	; 0xa5c <__stop_program>
