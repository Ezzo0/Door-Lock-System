
MCU_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000322  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000376  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000376  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a33  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000671  00000000  00000000  00000ea7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000566  00000000  00000000  00001518  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00001a80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d7  00000000  00000000  00001b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000308  00000000  00000000  00001f23  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000222b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  74:	0c 94 8f 01 	jmp	0x31e	; 0x31e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <motor_init>:
 */ 
#include "motor.h"

void motor_init()
{
	DIO_init(port_B,PIN_5,OUT);
  7c:	41 e0       	ldi	r20, 0x01	; 1
  7e:	65 e0       	ldi	r22, 0x05	; 5
  80:	82 e4       	ldi	r24, 0x42	; 66
  82:	0e 94 9b 00 	call	0x136	; 0x136 <DIO_init>
	DIO_init(port_B,PIN_6,OUT);
  86:	41 e0       	ldi	r20, 0x01	; 1
  88:	66 e0       	ldi	r22, 0x06	; 6
  8a:	82 e4       	ldi	r24, 0x42	; 66
  8c:	0e 94 9b 00 	call	0x136	; 0x136 <DIO_init>
	DIO_init(port_B,PIN_7,OUT);
  90:	41 e0       	ldi	r20, 0x01	; 1
  92:	67 e0       	ldi	r22, 0x07	; 7
  94:	82 e4       	ldi	r24, 0x42	; 66
  96:	0e 94 9b 00 	call	0x136	; 0x136 <DIO_init>
  9a:	08 95       	ret

0000009c <motor_turn_cw>:
}

void motor_turn_cw()
{
	DIO_write(port_B,PIN_5,HIGH);
  9c:	41 e0       	ldi	r20, 0x01	; 1
  9e:	65 e0       	ldi	r22, 0x05	; 5
  a0:	82 e4       	ldi	r24, 0x42	; 66
  a2:	0e 94 15 01 	call	0x22a	; 0x22a <DIO_write>
	DIO_write(port_B,PIN_6,HIGH);
  a6:	41 e0       	ldi	r20, 0x01	; 1
  a8:	66 e0       	ldi	r22, 0x06	; 6
  aa:	82 e4       	ldi	r24, 0x42	; 66
  ac:	0e 94 15 01 	call	0x22a	; 0x22a <DIO_write>
	DIO_write(port_B,PIN_7,LOW);
  b0:	40 e0       	ldi	r20, 0x00	; 0
  b2:	67 e0       	ldi	r22, 0x07	; 7
  b4:	82 e4       	ldi	r24, 0x42	; 66
  b6:	0e 94 15 01 	call	0x22a	; 0x22a <DIO_write>
  ba:	08 95       	ret

000000bc <motor_turn_anti_cw>:
}

void motor_turn_anti_cw()
{
	DIO_write(port_B,PIN_5,HIGH);
  bc:	41 e0       	ldi	r20, 0x01	; 1
  be:	65 e0       	ldi	r22, 0x05	; 5
  c0:	82 e4       	ldi	r24, 0x42	; 66
  c2:	0e 94 15 01 	call	0x22a	; 0x22a <DIO_write>
	DIO_write(port_B,PIN_6,LOW);
  c6:	40 e0       	ldi	r20, 0x00	; 0
  c8:	66 e0       	ldi	r22, 0x06	; 6
  ca:	82 e4       	ldi	r24, 0x42	; 66
  cc:	0e 94 15 01 	call	0x22a	; 0x22a <DIO_write>
	DIO_write(port_B,PIN_7,HIGH);
  d0:	41 e0       	ldi	r20, 0x01	; 1
  d2:	67 e0       	ldi	r22, 0x07	; 7
  d4:	82 e4       	ldi	r24, 0x42	; 66
  d6:	0e 94 15 01 	call	0x22a	; 0x22a <DIO_write>
  da:	08 95       	ret

000000dc <morot_brake>:
}

void morot_brake()
{
	DIO_write(port_B,PIN_5,HIGH);
  dc:	41 e0       	ldi	r20, 0x01	; 1
  de:	65 e0       	ldi	r22, 0x05	; 5
  e0:	82 e4       	ldi	r24, 0x42	; 66
  e2:	0e 94 15 01 	call	0x22a	; 0x22a <DIO_write>
	DIO_write(port_B,PIN_6,HIGH);
  e6:	41 e0       	ldi	r20, 0x01	; 1
  e8:	66 e0       	ldi	r22, 0x06	; 6
  ea:	82 e4       	ldi	r24, 0x42	; 66
  ec:	0e 94 15 01 	call	0x22a	; 0x22a <DIO_write>
	DIO_write(port_B,PIN_7,HIGH);
  f0:	41 e0       	ldi	r20, 0x01	; 1
  f2:	67 e0       	ldi	r22, 0x07	; 7
  f4:	82 e4       	ldi	r24, 0x42	; 66
  f6:	0e 94 15 01 	call	0x22a	; 0x22a <DIO_write>
  fa:	08 95       	ret

000000fc <main>:

int main(void)
{
	//app_init();
	//app_start();
	motor_init();
  fc:	0e 94 3e 00 	call	0x7c	; 0x7c <motor_init>
	motor_turn_cw();
 100:	0e 94 4e 00 	call	0x9c	; 0x9c <motor_turn_cw>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	2f e7       	ldi	r18, 0x7F	; 127
 106:	8a e1       	ldi	r24, 0x1A	; 26
 108:	96 e0       	ldi	r25, 0x06	; 6
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0xe>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x18>
 114:	00 00       	nop
	_delay_ms(2000);
	motor_turn_anti_cw();
 116:	0e 94 5e 00 	call	0xbc	; 0xbc <motor_turn_anti_cw>
 11a:	2f e3       	ldi	r18, 0x3F	; 63
 11c:	8d e9       	ldi	r24, 0x9D	; 157
 11e:	94 e0       	ldi	r25, 0x04	; 4
 120:	21 50       	subi	r18, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0x24>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x2e>
 12a:	00 00       	nop
	_delay_ms(1512);
	morot_brake();
 12c:	0e 94 6e 00 	call	0xdc	; 0xdc <morot_brake>
}
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	08 95       	ret

00000136 <DIO_init>:

#include "DIO_2.h"

void DIO_init(uint8_t portnum,uint8_t pinnum, uint8_t direction)
{
	switch(portnum)
 136:	82 34       	cpi	r24, 0x42	; 66
 138:	31 f1       	breq	.+76     	; 0x186 <DIO_init+0x50>
 13a:	18 f4       	brcc	.+6      	; 0x142 <DIO_init+0xc>
 13c:	81 34       	cpi	r24, 0x41	; 65
 13e:	39 f0       	breq	.+14     	; 0x14e <DIO_init+0x18>
 140:	08 95       	ret
 142:	83 34       	cpi	r24, 0x43	; 67
 144:	e1 f1       	breq	.+120    	; 0x1be <DIO_init+0x88>
 146:	84 34       	cpi	r24, 0x44	; 68
 148:	09 f4       	brne	.+2      	; 0x14c <DIO_init+0x16>
 14a:	54 c0       	rjmp	.+168    	; 0x1f4 <DIO_init+0xbe>
 14c:	08 95       	ret
	{
		case port_A:
			if(direction == IN)
 14e:	41 11       	cpse	r20, r1
 150:	0c c0       	rjmp	.+24     	; 0x16a <DIO_init+0x34>
				clr_pin(DDRA,pinnum); // Make pin number (pinnum) in port A an input pin
 152:	2a b3       	in	r18, 0x1a	; 26
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_init+0x28>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_init+0x24>
 162:	80 95       	com	r24
 164:	82 23       	and	r24, r18
 166:	8a bb       	out	0x1a, r24	; 26
 168:	08 95       	ret
			
			else if(direction == OUT)
 16a:	41 30       	cpi	r20, 0x01	; 1
 16c:	09 f0       	breq	.+2      	; 0x170 <DIO_init+0x3a>
 16e:	5c c0       	rjmp	.+184    	; 0x228 <DIO_init+0xf2>
				set_pin(DDRA,pinnum);	// Make pin number (pinnum) in port A an output pin
 170:	2a b3       	in	r18, 0x1a	; 26
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_init+0x46>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_init+0x42>
 180:	82 2b       	or	r24, r18
 182:	8a bb       	out	0x1a, r24	; 26
 184:	08 95       	ret
				//Error Handling
			}
		break;
		
		case port_B:
			if(direction == IN)
 186:	41 11       	cpse	r20, r1
 188:	0c c0       	rjmp	.+24     	; 0x1a2 <DIO_init+0x6c>
				clr_pin(DDRB,pinnum); // Make pin number (pinnum) in port B an input pin
 18a:	27 b3       	in	r18, 0x17	; 23
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_init+0x60>
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	6a 95       	dec	r22
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_init+0x5c>
 19a:	80 95       	com	r24
 19c:	82 23       	and	r24, r18
 19e:	87 bb       	out	0x17, r24	; 23
 1a0:	08 95       	ret
			
			else if(direction == OUT)
 1a2:	41 30       	cpi	r20, 0x01	; 1
 1a4:	09 f0       	breq	.+2      	; 0x1a8 <DIO_init+0x72>
 1a6:	40 c0       	rjmp	.+128    	; 0x228 <DIO_init+0xf2>
				set_pin(DDRB,pinnum);	// Make pin number (pinnum) in port B an output pin
 1a8:	27 b3       	in	r18, 0x17	; 23
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_init+0x7e>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	6a 95       	dec	r22
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_init+0x7a>
 1b8:	82 2b       	or	r24, r18
 1ba:	87 bb       	out	0x17, r24	; 23
 1bc:	08 95       	ret
				//Error Handling
			}
		break;
		
		case port_C:
			if(direction == IN)
 1be:	41 11       	cpse	r20, r1
 1c0:	0c c0       	rjmp	.+24     	; 0x1da <DIO_init+0xa4>
				clr_pin(DDRC,pinnum); // Make pin number (pinnum) in port C an input pin
 1c2:	24 b3       	in	r18, 0x14	; 20
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <DIO_init+0x98>
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	6a 95       	dec	r22
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <DIO_init+0x94>
 1d2:	80 95       	com	r24
 1d4:	82 23       	and	r24, r18
 1d6:	84 bb       	out	0x14, r24	; 20
 1d8:	08 95       	ret
		
			else if(direction == OUT)
 1da:	41 30       	cpi	r20, 0x01	; 1
 1dc:	29 f5       	brne	.+74     	; 0x228 <DIO_init+0xf2>
				set_pin(DDRC,pinnum);	// Make pin number (pinnum) in port C an output pin
 1de:	24 b3       	in	r18, 0x14	; 20
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_init+0xb4>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	6a 95       	dec	r22
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_init+0xb0>
 1ee:	82 2b       	or	r24, r18
 1f0:	84 bb       	out	0x14, r24	; 20
 1f2:	08 95       	ret
				//Error Handling
			}
		break;
		
		case port_D:
			if(direction == IN)
 1f4:	41 11       	cpse	r20, r1
 1f6:	0c c0       	rjmp	.+24     	; 0x210 <DIO_init+0xda>
				clr_pin(DDRD,pinnum); // Make pin number (pinnum) in port D an input pin
 1f8:	21 b3       	in	r18, 0x11	; 17
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_init+0xce>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	6a 95       	dec	r22
 206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_init+0xca>
 208:	80 95       	com	r24
 20a:	82 23       	and	r24, r18
 20c:	81 bb       	out	0x11, r24	; 17
 20e:	08 95       	ret
		
			else if(direction == OUT)
 210:	41 30       	cpi	r20, 0x01	; 1
 212:	51 f4       	brne	.+20     	; 0x228 <DIO_init+0xf2>
				set_pin(DDRD,pinnum);	// Make pin number (pinnum) in port D an input pin
 214:	21 b3       	in	r18, 0x11	; 17
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_init+0xea>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_init+0xe6>
 224:	82 2b       	or	r24, r18
 226:	81 bb       	out	0x11, r24	; 17
 228:	08 95       	ret

0000022a <DIO_write>:
	}
}

void DIO_write(uint8_t portnum,uint8_t pinnum, uint8_t value)
{
	switch(portnum)
 22a:	82 34       	cpi	r24, 0x42	; 66
 22c:	31 f1       	breq	.+76     	; 0x27a <DIO_write+0x50>
 22e:	18 f4       	brcc	.+6      	; 0x236 <DIO_write+0xc>
 230:	81 34       	cpi	r24, 0x41	; 65
 232:	39 f0       	breq	.+14     	; 0x242 <DIO_write+0x18>
 234:	08 95       	ret
 236:	83 34       	cpi	r24, 0x43	; 67
 238:	e1 f1       	breq	.+120    	; 0x2b2 <DIO_write+0x88>
 23a:	84 34       	cpi	r24, 0x44	; 68
 23c:	09 f4       	brne	.+2      	; 0x240 <DIO_write+0x16>
 23e:	54 c0       	rjmp	.+168    	; 0x2e8 <DIO_write+0xbe>
 240:	08 95       	ret
	{
		case port_A:
			if(value == LOW)
 242:	41 11       	cpse	r20, r1
 244:	0c c0       	rjmp	.+24     	; 0x25e <DIO_write+0x34>
				clr_pin(PORTA,pinnum); // make pin number (pinnum) in port A has a value of 0
 246:	2b b3       	in	r18, 0x1b	; 27
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_write+0x28>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	6a 95       	dec	r22
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_write+0x24>
 256:	80 95       	com	r24
 258:	82 23       	and	r24, r18
 25a:	8b bb       	out	0x1b, r24	; 27
 25c:	08 95       	ret
			
			else if(value == HIGH)
 25e:	41 30       	cpi	r20, 0x01	; 1
 260:	09 f0       	breq	.+2      	; 0x264 <DIO_write+0x3a>
 262:	5c c0       	rjmp	.+184    	; 0x31c <DIO_write+0xf2>
				set_pin(PORTA,pinnum); // make pin number (pinnum) in port A has a value of 1
 264:	2b b3       	in	r18, 0x1b	; 27
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_write+0x46>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	6a 95       	dec	r22
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_write+0x42>
 274:	82 2b       	or	r24, r18
 276:	8b bb       	out	0x1b, r24	; 27
 278:	08 95       	ret
				//Error Handling
			}
		break;
		
		case port_B:
			if(value == LOW)
 27a:	41 11       	cpse	r20, r1
 27c:	0c c0       	rjmp	.+24     	; 0x296 <DIO_write+0x6c>
				clr_pin(PORTB,pinnum); // make pin number (pinnum) in port B has a value of 0
 27e:	28 b3       	in	r18, 0x18	; 24
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_write+0x60>
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	6a 95       	dec	r22
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_write+0x5c>
 28e:	80 95       	com	r24
 290:	82 23       	and	r24, r18
 292:	88 bb       	out	0x18, r24	; 24
 294:	08 95       	ret
		
			else if(value == HIGH)
 296:	41 30       	cpi	r20, 0x01	; 1
 298:	09 f0       	breq	.+2      	; 0x29c <DIO_write+0x72>
 29a:	40 c0       	rjmp	.+128    	; 0x31c <DIO_write+0xf2>
				set_pin(PORTB,pinnum); // make pin number (pinnum) in port B has a value of 1
 29c:	28 b3       	in	r18, 0x18	; 24
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_write+0x7e>
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	6a 95       	dec	r22
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_write+0x7a>
 2ac:	82 2b       	or	r24, r18
 2ae:	88 bb       	out	0x18, r24	; 24
 2b0:	08 95       	ret
				//Error Handling
			}
		break;
		
		case port_C:
			if(value == LOW)
 2b2:	41 11       	cpse	r20, r1
 2b4:	0c c0       	rjmp	.+24     	; 0x2ce <DIO_write+0xa4>
				clr_pin(PORTC,pinnum); // make pin number (pinnum) in port C has a value of 0
 2b6:	25 b3       	in	r18, 0x15	; 21
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <DIO_write+0x98>
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	6a 95       	dec	r22
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <DIO_write+0x94>
 2c6:	80 95       	com	r24
 2c8:	82 23       	and	r24, r18
 2ca:	85 bb       	out	0x15, r24	; 21
 2cc:	08 95       	ret
		
			else if(value == HIGH)
 2ce:	41 30       	cpi	r20, 0x01	; 1
 2d0:	29 f5       	brne	.+74     	; 0x31c <DIO_write+0xf2>
				set_pin(PORTC,pinnum); // make pin number (pinnum) in port C has a value of 1
 2d2:	25 b3       	in	r18, 0x15	; 21
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <DIO_write+0xb4>
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	6a 95       	dec	r22
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <DIO_write+0xb0>
 2e2:	82 2b       	or	r24, r18
 2e4:	85 bb       	out	0x15, r24	; 21
 2e6:	08 95       	ret
				//Error Handling
			}
		break;
		
		case port_D:
			if(value == LOW)
 2e8:	41 11       	cpse	r20, r1
 2ea:	0c c0       	rjmp	.+24     	; 0x304 <DIO_write+0xda>
				clr_pin(PORTD,pinnum); // make pin number (pinnum) in port D has a value of 0
 2ec:	22 b3       	in	r18, 0x12	; 18
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <DIO_write+0xce>
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	6a 95       	dec	r22
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <DIO_write+0xca>
 2fc:	80 95       	com	r24
 2fe:	82 23       	and	r24, r18
 300:	82 bb       	out	0x12, r24	; 18
 302:	08 95       	ret
		
			else if(value == HIGH)
 304:	41 30       	cpi	r20, 0x01	; 1
 306:	51 f4       	brne	.+20     	; 0x31c <DIO_write+0xf2>
				set_pin(PORTD,pinnum); // make pin number (pinnum) in port D has a value of 1
 308:	22 b3       	in	r18, 0x12	; 18
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_write+0xea>
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	6a 95       	dec	r22
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_write+0xe6>
 318:	82 2b       	or	r24, r18
 31a:	82 bb       	out	0x12, r24	; 18
 31c:	08 95       	ret

0000031e <_exit>:
 31e:	f8 94       	cli

00000320 <__stop_program>:
 320:	ff cf       	rjmp	.-2      	; 0x320 <__stop_program>
